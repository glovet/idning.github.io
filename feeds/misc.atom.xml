<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>ning</title><link href="/" rel="alternate"></link><link href="http://idning.github.io/feeds/misc.atom.xml" rel="self"></link><id>/</id><updated>2014-10-14T18:53:04+08:00</updated><entry><title>我们应该检查malloc的返回值么?</title><link href="/should-we-check-malloc.html" rel="alternate"></link><updated>2014-10-14T18:53:04+08:00</updated><author><name>ning</name></author><id>tag:,2014-10-14:should-we-check-malloc.html</id><summary type="html">&lt;div class="contents topic" id="table-of-contents"&gt;
&lt;p class="topic-title first"&gt;Table of Contents&lt;/p&gt;
&lt;ul class="auto-toc simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id1" id="id5"&gt;1&amp;nbsp;&amp;nbsp;&amp;nbsp;我们想要什么&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id2" id="id6"&gt;2&amp;nbsp;&amp;nbsp;&amp;nbsp;现有程序做法&lt;/a&gt;&lt;ul class="auto-toc"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#mysql" id="id7"&gt;2.1&amp;nbsp;&amp;nbsp;&amp;nbsp;mysql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#redis" id="id8"&gt;2.2&amp;nbsp;&amp;nbsp;&amp;nbsp;redis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#nginx" id="id9"&gt;2.3&amp;nbsp;&amp;nbsp;&amp;nbsp;nginx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#lighttpd" id="id10"&gt;2.4&amp;nbsp;&amp;nbsp;&amp;nbsp;lighttpd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#twemproxy" id="id11"&gt;2.5&amp;nbsp;&amp;nbsp;&amp;nbsp;twemproxy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id3" id="id12"&gt;3&amp;nbsp;&amp;nbsp;&amp;nbsp;小结&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id4" id="id13"&gt;4&amp;nbsp;&amp;nbsp;&amp;nbsp;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;我们经常纠结这种代码:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
some_small_struct *ptr=(some_small_struct *) malloc(sizeof(some_small_struct));
ptr-&amp;gt;some_member= ...;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;正方: 检查有用:&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;如果不检查, 没内存时会出现非预期行为.&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;反方: 检查没用:&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;因为这是一个小程序, 基本不可能超内存, 我们还需要检查malloc是否成功么?&lt;/li&gt;
&lt;li&gt;linux 上, 如果打开了 &lt;tt class="docutils literal"&gt;overcommit&lt;/tt&gt;, 基本上所有的alloc都会返回说有内存,
等到真正写到这片的时候才可能通过oom-killer 杀掉某个(也许是其它)进程.&lt;/li&gt;
&lt;li&gt;linux上, 如果打开了部分swap, alloc通常也会返回有内存,&lt;/li&gt;
&lt;li&gt;就算我们检查, 我们也不能避免栈空间不够之类的错误.&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;overcommit参考 man malloc:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
http://linux.die.net/man/3/malloc

By default, Linux follows an optimistic memory allocation strategy. This means that when malloc() returns non-NULL there is no guarantee that the memory really is available. This is a really bad bug. In case it turns out that the system is out of memory, one or more processes will be killed by the infamous OOM killer.
&lt;/pre&gt;
&lt;p&gt;但是这时候malloc也是可能返回NULL的, 比如 address space is full.&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;1&amp;nbsp;&amp;nbsp;&amp;nbsp;我们想要什么&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;我们的期望分成4级:&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;没内存时, 程序依然能够正常工作, 比如http服务器能拒绝掉部分请求而保证另一部分请求正常.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;没内存时, 优雅退出, 防止:
- 因为文件未关闭造成数据丢失   (如果我们写了文件, 未关闭, 操作系统会保证sync到磁盘么  -- 应该是不能保证)
- socket未关闭导致对端长等待.
- 比如是一个文件编辑器, 需要保存用户的工作先.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;没内存时, 通过ASSERT显示core掉&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;发生非预期异常(可能core).&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;比如alloc了一个NULL, 但是不是alloc的时候报错, 而是往里面写东西的时候报错, 就很难追查了.&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;很显然, 1是最好的情况, 是一个有尊严的程序员所期望的, 4是一定不能发生的. 2,3是需要权衡的.&lt;/p&gt;
&lt;p&gt;3 是基线, 做到3可能保证出错时知道原因.&lt;/p&gt;
&lt;p&gt;其它:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;对嵌入式系统: 内存有限, 所以应该总是检查&lt;/li&gt;
&lt;li&gt;对c++: 尽量使用new, 这样有exception.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;2&amp;nbsp;&amp;nbsp;&amp;nbsp;现有程序做法&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;我们看看一些有名程序的做法&lt;/p&gt;
&lt;div class="section" id="mysql"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id7"&gt;2.1&amp;nbsp;&amp;nbsp;&amp;nbsp;mysql&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;多数地方都做到1:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
HP_INFO *heap_open_from_share(HP_SHARE *share, int mode)
{
  HP_INFO *info;
  DBUG_ENTER(&amp;quot;heap_open_from_share&amp;quot;);

  if (!(info= (HP_INFO*) my_malloc((uint) sizeof(HP_INFO) +
                  2 * share-&amp;gt;max_key_length,
                  MYF(MY_ZEROFILL))))
  {
    DBUG_RETURN(0);
  }
&lt;/pre&gt;
&lt;p&gt;有的地方只能做到4:&lt;/p&gt;
&lt;p&gt;storage/innobase/handler/ha_innodb.cc:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
    field_lengths = (ulint*) my_malloc(sizeof(ulint) * n_fields,
            MYF(MY_FAE));

    namebuf = (char*) my_malloc((uint) len + 2, MYF(0));
    memcpy(namebuf, ptr, len);

innobase_rename_table(
    ...
    norm_to = (char*) my_malloc(strlen(to) + 64, MYF(0));
    norm_from = (char*) my_malloc(strlen(from) + 64, MYF(0));
&lt;/pre&gt;
&lt;p&gt;storage/myisam/myisampack.c:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
static my_bool open_isam_files(PACK_MRG_INFO *mrg, char **names, uint count)
{
  mrg-&amp;gt;file=(MI_INFO**) my_malloc(sizeof(MI_INFO*)*count,MYF(MY_FAE));
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="redis"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id8"&gt;2.2&amp;nbsp;&amp;nbsp;&amp;nbsp;redis&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;做到3:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
void aofRewriteBufferAppend(unsigned char *s, unsigned long len) {
    block = zmalloc(sizeof(*block));
    block-&amp;gt;free = AOF_RW_BUF_BLOCK_SIZE;
&lt;/pre&gt;
&lt;p&gt;不过在zmalloc里面做到了assert:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
static void zmalloc_default_oom(size_t size) {
    fprintf(stderr, &amp;quot;zmalloc: Out of memory trying to allocate %zu bytes\n&amp;quot;,
        size);
    fflush(stderr);
    abort();
}

static void (*zmalloc_oom_handler)(size_t) = zmalloc_default_oom;

void *zmalloc(size_t size) {
    void *ptr = malloc(size+PREFIX_SIZE);

    if (!ptr) zmalloc_oom_handler(size);
&lt;/pre&gt;
&lt;p&gt;但是在cli等不重要代码里面做到4:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
static void cliInitHelp() {
    tmp.argv = malloc(sizeof(sds));
    tmp.argv[0] = sdscatprintf(sdsempty(),&amp;quot;&amp;#64;%s&amp;quot;,commandGroups[i]);
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="nginx"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id9"&gt;2.3&amp;nbsp;&amp;nbsp;&amp;nbsp;nginx&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;alloc 里面打日志, 不是ASSERT (不过ngx_log_error里面应该还会malloc):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
void *
ngx_alloc(size_t size, ngx_log_t *log)
{
    void  *p;

    p = malloc(size);
    if (p == NULL) {
        ngx_log_error(NGX_LOG_EMERG, log, ngx_errno,
                      &amp;quot;malloc(%uz) failed&amp;quot;, size);
    }

    ngx_log_debug2(NGX_LOG_DEBUG_ALLOC, log, 0, &amp;quot;malloc: %p:%uz&amp;quot;, p, size);

    return p;
}
&lt;/pre&gt;
&lt;p&gt;使用时检查(90%的地方都有检查):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
env = ngx_palloc(cycle-&amp;gt;pool, (n + 1) * sizeof(char *));
if (env == NULL) {
    return NULL;
}

overflow_list = ngx_alloc(sizeof(struct pollfd) * rtscf-&amp;gt;overflow_events,
                          cycle-&amp;gt;log);
if (overflow_list == NULL) {
    return NGX_ERROR;
}
&lt;/pre&gt;
&lt;p&gt;也有不检查:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ngx_exec_new_binary(ngx_cycle_t *cycle, char *const *argv)
    var = ngx_alloc(sizeof(NGINX_VAR)
                    + cycle-&amp;gt;listening.nelts * (NGX_INT32_LEN + 1) + 2,
                    cycle-&amp;gt;log);

    p = ngx_cpymem(var, NGINX_VAR &amp;quot;=&amp;quot;, sizeof(NGINX_VAR));
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="lighttpd"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id10"&gt;2.4&amp;nbsp;&amp;nbsp;&amp;nbsp;lighttpd&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;ASSERT&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="twemproxy"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id11"&gt;2.5&amp;nbsp;&amp;nbsp;&amp;nbsp;twemproxy&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;和nginx一样:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
void *
_nc_alloc(size_t size, const char *name, int line)
{
    void *p;

    ASSERT(size != 0);

    p = malloc(size);
    if (p == NULL) {
        log_error(&amp;quot;malloc(%zu) failed &amp;#64; %s:%d&amp;quot;, size, name, line);
    } else {
        log_verb(&amp;quot;malloc(%zu) at %p &amp;#64; %s:%d&amp;quot;, size, p, name, line);
    }

    return p;
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id12"&gt;3&amp;nbsp;&amp;nbsp;&amp;nbsp;小结&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;nginx 和mysql, redis 做的差不多, 尽量检查.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;推荐的做法:&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;alloc里面如果有NULL打日志, 上层每次检查, 发现NULL处理错误&lt;/li&gt;
&lt;li&gt;对小的alloc, alloc 后写ASSERT.&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id13"&gt;4&amp;nbsp;&amp;nbsp;&amp;nbsp;参考&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;讨论: &lt;a class="reference external" href="http://stackoverflow.com/questions/1941323/always-check-malloced-memory"&gt;http://stackoverflow.com/questions/1941323/always-check-malloced-memory&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="all"></category></entry><entry><title>我们还需要80列的限制么</title><link href="/do_we_need_80_column_rule.html" rel="alternate"></link><updated>2014-07-21T13:02:07+08:00</updated><author><name>ning</name></author><id>tag:,2014-07-21:do_we_need_80_column_rule.html</id><summary type="html">&lt;p&gt;现在, 我们写代码通常不限制80列. 现在我们的屏幕都很宽, 一般都能放180列到200列. 所以貌似没必要限制80列了&lt;/p&gt;
&lt;p&gt;但是, 我们经常用diff工具来查看代码, 这样超过80列的代码在diff工具中就不好看了.&lt;/p&gt;
&lt;p&gt;所以, 我们还是坚持80列原则把.&lt;/p&gt;
</summary><category term="all"></category></entry><entry><title>honx分析</title><link href="/honx.html" rel="alternate"></link><updated>2014-07-10T09:41:04+08:00</updated><author><name>ning</name></author><id>tag:,2014-07-10:honx.html</id><summary type="html">&lt;div class="contents topic" id="table-of-contents"&gt;
&lt;p class="topic-title first"&gt;Table of Contents&lt;/p&gt;
&lt;ul class="auto-toc simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id1" id="id5"&gt;1&amp;nbsp;&amp;nbsp;&amp;nbsp;分析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#chromehttps-proxy" id="id6"&gt;2&amp;nbsp;&amp;nbsp;&amp;nbsp;chrome支持https proxy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id2" id="id7"&gt;3&amp;nbsp;&amp;nbsp;&amp;nbsp;尝试破解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id3" id="id8"&gt;4&amp;nbsp;&amp;nbsp;&amp;nbsp;这个方法对自己有啥用&lt;/a&gt;&lt;ul class="auto-toc"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#https" id="id9"&gt;4.1&amp;nbsp;&amp;nbsp;&amp;nbsp;架设https 代理服务器的方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id4" id="id10"&gt;5&amp;nbsp;&amp;nbsp;&amp;nbsp;给honx的建议&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#ps" id="id11"&gt;6&amp;nbsp;&amp;nbsp;&amp;nbsp;ps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;1&amp;nbsp;&amp;nbsp;&amp;nbsp;分析&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;抓包, 发现 &lt;tt class="docutils literal"&gt;23.239.5.211&lt;/tt&gt; 这个host:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ning&amp;#64;ning-laptop ~/test$ host 23.239.5.211
211.5.239.23.in-addr.arpa domain name pointer li699-211.members.linode.com.
&lt;/pre&gt;
&lt;p&gt;访问 &lt;a class="reference external" href="https://23.239.5.211/"&gt;https://23.239.5.211/&lt;/a&gt; 发现是一个https服务.&lt;/p&gt;
&lt;p&gt;也就是说, honx 架设了一个https代理服务器,&lt;/p&gt;
&lt;p&gt;但是, 据我所知, client 和proxy 之间的协议, 只支持 socks, socks5, http, 并不支持https. 目前PAC文件也是只支持这三种协议,&lt;/p&gt;
&lt;p&gt;因为g-f-w会根据内容过滤, 所以代理必须使用一种加密的通道, 而不能是socks, http, 这也就是自己之前一直用ssh隧道的原因.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="chromehttps-proxy"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;2&amp;nbsp;&amp;nbsp;&amp;nbsp;chrome支持https proxy&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;看了一下 chrome 扩展中 允许的 proxy 类型:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://developer.chrome.com/extensions/proxy"&gt;https://developer.chrome.com/extensions/proxy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;发现有https协议:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Scheme      Port
http        80
https       443
socks4      1080
socks5      1080
&lt;/pre&gt;
&lt;p&gt;原来, chrome 是支持 https 代理的:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.chromium.org/developers/design-documents/secure-web-proxy"&gt;http://www.chromium.org/developers/design-documents/secure-web-proxy&lt;/a&gt;
&lt;a class="reference external" href="http://www.chromium.org/spdy/spdy-proxy"&gt;http://www.chromium.org/spdy/spdy-proxy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可以直接在porxy.pac里面返回HTTPS xxx就行:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
function FindProxyForURL(url, host) { return &amp;quot;HTTPS secure-proxy.example.com:443&amp;quot;; }
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;其实这里也可以是SPDY&lt;/li&gt;
&lt;li&gt;HTTPS proxy 的支持是chrome特有的, 目前还没发现其它浏览器或者ssh客户端之类支持(因为代码相对复杂)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;3&amp;nbsp;&amp;nbsp;&amp;nbsp;尝试破解&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;既然如此, 我们写这样一个pac文件:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
function FindProxyForURL(url, host) {
    return 'HTTPS 23.239.5.211:443;';
}
&lt;/pre&gt;
&lt;p&gt;似乎就ok, 但是测试发现不行, 原因是 https 有域名校验, 这里chrome可能使用强制校验, 必须通过匹配的域名访问 23.239.5.211 才行.&lt;/p&gt;
&lt;p&gt;再查了一些chrome的资料, 其实通过 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;chrome://xxx-internals/&lt;/span&gt;&lt;/tt&gt;  很容易发现, honx其实也是写了这样的一个pac文件. 可以清楚的看到:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
PAC script: data:application/x-ns-proxy-autoconfig...
&lt;/pre&gt;
&lt;p&gt;它的内容是:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
function FindProxyForURL(url, host) {

var D = &amp;quot;DIRECT&amp;quot;;
var p='HTTPS xxxxx.com:443;';

var node = {&amp;quot;net&amp;quot;:{&amp;quot;akamaihd&amp;quot;:1,&amp;quot;facebook&amp;quot;:1,&amp;quot;fbcdn&amp;quot;:1,&amp;quot;cloudfront&amp;quot;:1,&amp;quot;sstatic&amp;quot;:1,&amp;quot;doubleclick&amp;quot;:1,&amp;quot;2mdn&amp;quot;:1},&amp;quot;com&amp;quot;:{&amp;quot;facebook&amp;quot;:1,&amp;quot;twitter&amp;quot;:1,&amp;quot;twimg&amp;quot;:1,&amp;quot;google&amp;quot;:1,&amp;quot;googleusercontent&amp;quot;:1,&amp;quot;googleapis&amp;quot;:1,&amp;quot;gstatic&amp;quot;:1,&amp;quot;gmail&amp;quot;:1,&amp;quot;tumblr&amp;quot;:1,&amp;quot;appspot&amp;quot;:1,&amp;quot;amazonaws&amp;quot;:{&amp;quot;s3&amp;quot;:1},&amp;quot;blogspot&amp;quot;:1,&amp;quot;blogger&amp;quot;:1,&amp;quot;mediafire&amp;quot;:1,&amp;quot;ytimg&amp;quot;:1,&amp;quot;youtube&amp;quot;:1,&amp;quot;googlevideo&amp;quot;:1,&amp;quot;youtube-nocookie&amp;quot;:1,&amp;quot;wordpress&amp;quot;:1,&amp;quot;vimeo&amp;quot;:1,&amp;quot;googlesyndication&amp;quot;:1,&amp;quot;ggpht&amp;quot;:1,&amp;quot;imgur&amp;quot;:1,&amp;quot;googleadservices&amp;quot;:1,&amp;quot;cloudflare&amp;quot;:1,&amp;quot;chrome&amp;quot;:1,&amp;quot;symantec&amp;quot;:1},&amp;quot;co&amp;quot;:{&amp;quot;t&amp;quot;:1},&amp;quot;hk&amp;quot;:{&amp;quot;com&amp;quot;:{&amp;quot;google&amp;quot;:1}},&amp;quot;ly&amp;quot;:{&amp;quot;bit&amp;quot;:1},&amp;quot;be&amp;quot;:{&amp;quot;youtu&amp;quot;:1},&amp;quot;wpad&amp;quot;:1,&amp;quot;org&amp;quot;:{&amp;quot;chromium&amp;quot;:1}};

var hostParts = host.toLowerCase().split('.');
for (var i=hostParts.length - 1; i &amp;gt;= 0; i --) {
    var part = hostParts[i];
    node = node[part];
    if (node == undefined || node == 1) break;
}
if (node == 1)
    return p;

return D;
}
&lt;/pre&gt;
&lt;p&gt;我们发现这个脚本里面清楚的写着xxxx.com 这个域名, 把自己的pac换成这个域名:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
function FindProxyForURL(url, host) {
    return 'HTTPS xxxxx.com:443;';
}
&lt;/pre&gt;
&lt;p&gt;ok, 发现我们已经顺利使用这个https 代理了.&lt;/p&gt;
&lt;p&gt;这里为了防止大家瞎搞, 域名我已经隐去了.&lt;/p&gt;
&lt;p&gt;这段js里面居然用了一个 &lt;strong&gt;trie-tree&lt;/strong&gt; , 好赞, 不像我写的土鳖js:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
var hosts = [
    &amp;quot;google.com&amp;quot;,
    &amp;quot;google.co.jp&amp;quot;,
    &amp;quot;blogspot.com&amp;quot;,
];

function FindProxyForURL(url, host) {
    for (var i in hosts){
        pattern = '.*' + hosts[i] + '.*';
        if (regExpMatch(host, pattern)){
            return proxy;
        }
    }
    return &amp;quot;DIRECT&amp;quot;;
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;4&amp;nbsp;&amp;nbsp;&amp;nbsp;这个方法对自己有啥用&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;既然知道了chrome 可以用https 的proxy, 那我就可以在自己的linode上搭了.&lt;/li&gt;
&lt;li&gt;搭了这样一个https代理, 会不会被大家乱用呢.. 还得想办法.&lt;/li&gt;
&lt;li&gt;如果能让ssh客户端等支持https 代理就好了.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="https"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id9"&gt;4.1&amp;nbsp;&amp;nbsp;&amp;nbsp;架设https 代理服务器的方法&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Running a Secure Web Proxy&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;While all the details of running a secure web proxy are out of scope for this document, here are two suggestions.  If you are already running a web proxy, you use stunnel to convert it into a secure web proxy.  For example:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
stunnel -f -d 443 -r localhost:8080 -p cert.pem
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This would cause stunnel to listen for SSL connections on port 443 and send any HTTP requests to the web proxy running on port 8080.&lt;/p&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;Squid&lt;/tt&gt; appears to offer support for running as a secure web proxy via the https_port directive.&lt;/li&gt;
&lt;li&gt;nginx+SPDY?&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/igrigorik/node-spdyproxy"&gt;https://github.com/igrigorik/node-spdyproxy&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;5&amp;nbsp;&amp;nbsp;&amp;nbsp;给honx的建议&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;增加某种验证机制,&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;使用http/https的 proxy验证机制&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;都比较弱, 而且需要用户介入手动填一次密码, 会频繁打断用户.&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;比如在代理服务器上同时开一个注册服务, 当honx启动后, 每x秒会向这个接口注册一次, 说这个clientip是合法的, 这个接口可以加入复杂的验证, 这样就比较优雅.&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;不过引入这种机制会导致一些ip会变(公司多出口之类)的用户可能不能正常使用. 比较烦恼&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;再者, 一个honx用户估计是可以在多处登录, 这样就可以多人共享proxy, 所以, 加认证等等, 终归是防君子不防小人.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;建议针对学生降价.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="ps"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;6&amp;nbsp;&amp;nbsp;&amp;nbsp;ps&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;honx 在产品设计上非常傻瓜, 0配置, 一键加入代理也很方便.&lt;/li&gt;
&lt;li&gt;好服务, 要呵护, 希望大家没功夫折腾的同学, 多多支持honx(我也买了)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="all"></category></entry><entry><title>tmux</title><link href="/tmux.html" rel="alternate"></link><updated>2014-05-08T09:52:32+08:00</updated><author><name>ning</name></author><id>tag:,2014-05-08:tmux.html</id><summary type="html">&lt;div class="contents topic" id="table-of-contents"&gt;
&lt;p class="topic-title first"&gt;Table of Contents&lt;/p&gt;
&lt;ul class="auto-toc simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#why" id="id9"&gt;1&amp;nbsp;&amp;nbsp;&amp;nbsp;why&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id1" id="id10"&gt;2&amp;nbsp;&amp;nbsp;&amp;nbsp;安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id2" id="id11"&gt;3&amp;nbsp;&amp;nbsp;&amp;nbsp;使用&lt;/a&gt;&lt;ul class="auto-toc"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#session" id="id12"&gt;3.1&amp;nbsp;&amp;nbsp;&amp;nbsp;session&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#window" id="id13"&gt;3.2&amp;nbsp;&amp;nbsp;&amp;nbsp;window&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#pane" id="id14"&gt;3.3&amp;nbsp;&amp;nbsp;&amp;nbsp;pane&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#copy-paste" id="id15"&gt;3.4&amp;nbsp;&amp;nbsp;&amp;nbsp;copy-paste&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id3" id="id16"&gt;3.5&amp;nbsp;&amp;nbsp;&amp;nbsp;交换两个window&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#kill-window" id="id17"&gt;3.6&amp;nbsp;&amp;nbsp;&amp;nbsp;kill-window&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id4" id="id18"&gt;3.7&amp;nbsp;&amp;nbsp;&amp;nbsp;帮助&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id5" id="id19"&gt;4&amp;nbsp;&amp;nbsp;&amp;nbsp;问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id6" id="id20"&gt;5&amp;nbsp;&amp;nbsp;&amp;nbsp;工具&lt;/a&gt;&lt;ul class="auto-toc"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#tmuxp" id="id21"&gt;5.1&amp;nbsp;&amp;nbsp;&amp;nbsp;tmuxp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#workspace" id="id22"&gt;5.2&amp;nbsp;&amp;nbsp;&amp;nbsp;workspace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id7" id="id23"&gt;6&amp;nbsp;&amp;nbsp;&amp;nbsp;小结&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id8" id="id24"&gt;7&amp;nbsp;&amp;nbsp;&amp;nbsp;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="why"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;1&amp;nbsp;&amp;nbsp;&amp;nbsp;why&lt;/a&gt;&lt;/h2&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;配置更可读, 比如状态栏:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
#screen
hardstatus alwayslastline '%{gk}[ %{G}%H %{g}][%= %{wk}%?%-Lw%?%{=b kR}(%{W}%n*%f%t%?(%u)%?%{=b kR})%{= kw}%?%+Lw%?%?%= %{y}][%{G} %l%{y}] %{y}[%{G} %m/%d %c %{y}]%{W}'

#tmux
set -g status-left ' #[fg=green,bold]#H#[default]'
set -g status-right '#[fg=yellow,bold]#(cut -d &amp;quot; &amp;quot; -f 1-4 /proc/loadavg)#[default] #[fg=cyan,bold]%Y-%m-%d %H:%M:%S#[default] '

screen的配置完全看不懂 颜色在哪, 看上去更像魔法.
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;可编程&lt;/p&gt;
&lt;p&gt;nearly all commands can be invoked from the command line,&lt;/p&gt;
&lt;p&gt;screen 也可以的.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Window Splitting&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;和screen一样, 也支持 前缀.
比如 tmux attach 可以简写为 tmux att&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;列出所有window, 在window很多的时候 有用:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Ctrl-b w (List all windows / window numbers)
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;动态修改配置(有些属性不能及时生效, 要杀掉所有session):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
By default tmux reads ~/.tmux.conf only if it was not already running. To have tmux load a configuration file afterwards, execute:
tmux source-file &amp;lt;path&amp;gt;
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;很多外部工具, 如tmuxp&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;2&amp;nbsp;&amp;nbsp;&amp;nbsp;安装&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;因为我的ubuntu tmux是1.1..  ubuntu 也太老,  只能自己编译了..  需要libevent 2.x and ncurses .&lt;/p&gt;
&lt;p&gt;用这个脚本: &lt;a class="reference external" href="https://gist.github.com/ryin/3106801"&gt;https://gist.github.com/ryin/3106801&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;3&amp;nbsp;&amp;nbsp;&amp;nbsp;使用&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="session"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id12"&gt;3.1&amp;nbsp;&amp;nbsp;&amp;nbsp;session&lt;/a&gt;&lt;/h3&gt;
&lt;pre class="literal-block"&gt;
#creates a new tmux session named session_name
tmux new -s session_name

#attaches to an existing tmux session named session_name
tmux attach -t session_name

#switches to an existing session named session_name
tmux switch -t session_name

#lists existing tmux sessions
tmux list-sessions

#detach the currently attached session
tmux detach (prefix + d)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="window"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id13"&gt;3.2&amp;nbsp;&amp;nbsp;&amp;nbsp;window&lt;/a&gt;&lt;/h3&gt;
&lt;pre class="literal-block"&gt;
create a new window
tmux new-window (prefix + c)

move to the window based on index
tmux select-window -t :0-9 (prefix + 0-9)

rename the current window
tmux rename-window (prefix + ,)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="pane"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id14"&gt;3.3&amp;nbsp;&amp;nbsp;&amp;nbsp;pane&lt;/a&gt;&lt;/h3&gt;
&lt;pre class="literal-block"&gt;
tmux split-window (prefix + &amp;quot;)
splits the window into two vertical panes

tmux split-window -h (prefix + %)
splits the window into two horizontal panes

tmux swap-pane -[UDLR] (prefix + { or })
swaps pane with another in the specified direction

tmux select-pane -[UDLR]
selects the next pane in the specified direction

tmux select-pane -t :.+
selects the next pane in numerical order
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="copy-paste"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id15"&gt;3.4&amp;nbsp;&amp;nbsp;&amp;nbsp;copy-paste&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;空格开始选择, Enter确认copy
1. enter copy mode using &lt;tt class="docutils literal"&gt;Control+b [&lt;/tt&gt;
2. navigate to beginning of text, you want to select and hit &lt;tt class="docutils literal"&gt;Space&lt;/tt&gt;
3. move around using arrow keys to select region
4. when you reach end of region simply hit &lt;tt class="docutils literal"&gt;Enter&lt;/tt&gt; to copy the region
5. now &lt;tt class="docutils literal"&gt;Control+b ]&lt;/tt&gt; will paste the selection&lt;/p&gt;
&lt;p&gt;配置:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# Setup 'v' to begin selection as in Vim
bind-key -t vi-copy v begin-selection
bind-key -t vi-copy y copy-selection
#bind-key -t vi-copy y copy-pipe &amp;quot;reattach-to-user-namespace pbcopy&amp;quot;

# Update default binding of `Enter` to also use copy-pipe
unbind -t vi-copy Enter
bind-key -t vi-copy Enter copy-pipe &amp;quot;reattach-to-user-namespace pbcopy&amp;quot;

bind-key p paste-buffer
&lt;/pre&gt;
&lt;p&gt;这样就可以 &lt;tt class="docutils literal"&gt;^a[&lt;/tt&gt; 进入回滚模式, &lt;tt class="docutils literal"&gt;v&lt;/tt&gt; 开始选择, &lt;tt class="docutils literal"&gt;y&lt;/tt&gt; 拷贝, &lt;tt class="docutils literal"&gt;q&lt;/tt&gt; 退出,&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;^a p&lt;/tt&gt; 粘贴.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id16"&gt;3.5&amp;nbsp;&amp;nbsp;&amp;nbsp;交换两个window&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;当前window和1号window交换:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
swap-window -t 1
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="kill-window"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id17"&gt;3.6&amp;nbsp;&amp;nbsp;&amp;nbsp;kill-window&lt;/a&gt;&lt;/h3&gt;
&lt;pre class="literal-block"&gt;
tmux kill-window -t ndb:7
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id18"&gt;3.7&amp;nbsp;&amp;nbsp;&amp;nbsp;帮助&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;列出命令:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ning&amp;#64;ning-laptop:~/idning/blog_and_notes$ tmux lscm
attach-session [-d] [-t target-session]
bind-key [-cnr] [-t key-table] key command [arguments]
break-pane [-t target-pane] [-d]
choose-client [-t target-window] [template]
choose-session [-t target-window] [template]
choose-window [-t target-window] [template]
&lt;/pre&gt;
&lt;p&gt;列出绑定:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
^A?
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id19"&gt;4&amp;nbsp;&amp;nbsp;&amp;nbsp;问题&lt;/a&gt;&lt;/h2&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;用^A ^A 来在最常用的两个window间切换:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
#select last window
bind-key C-a last-window
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;.bashrc/.profile is not loaded on new tmux session&lt;/p&gt;
&lt;p&gt;tmux加载 &lt;tt class="docutils literal"&gt;.bash_profile&lt;/tt&gt; 需要在 &lt;tt class="docutils literal"&gt;.bash_profile&lt;/tt&gt; 中加入:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
. ~/.bashrc
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;new 和attatch 的标识不一样:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
tmux new -s
tmux attach -t
&lt;/pre&gt;
&lt;p&gt;好在有这个alias:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
alias t=&amp;quot;if tmux has-session -t $USER; then tmux attach -t $USER; else tmux new -s $USER; fi&amp;quot;
&lt;/pre&gt;
&lt;p&gt;不过这个不能指定名字, 用函数:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
t(){
    if [ $# -eq 0 ]
      then
        tmux ls
      else
        if tmux has-session -t $&amp;#64;; then tmux attach -t $&amp;#64;; else tmux new -s $&amp;#64;; fi
    fi

}
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;ctrl-left&lt;/span&gt;&lt;/tt&gt; 不能用, 特别是在vim里面, 需要配置一下:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;tmux.conf:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
set-window-option -g xterm-keys on
&lt;/pre&gt;
&lt;p&gt;.vimrc:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;quot;for tmux
if &amp;amp;term =~ '^screen'
    &amp;quot; tmux will send xterm-style keys when xterm-keys is on
    execute &amp;quot;set &amp;lt;xUp&amp;gt;=\e[1;*A&amp;quot;
    execute &amp;quot;set &amp;lt;xDown&amp;gt;=\e[1;*B&amp;quot;
    execute &amp;quot;set &amp;lt;xRight&amp;gt;=\e[1;*C&amp;quot;
    execute &amp;quot;set &amp;lt;xLeft&amp;gt;=\e[1;*D&amp;quot;
endif
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;双层嵌套退出:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
tmux detach  -s tmp
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ol class="arabic" start="5"&gt;
&lt;li&gt;&lt;p class="first"&gt;vim里面 &lt;tt class="docutils literal"&gt;shift+tab&lt;/tt&gt; 不能用, 至今无解.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;tagbar等乱掉:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://plus.google.com/u/0/+VysakhSreenivasan/posts/4heRzoxbM72"&gt;https://plus.google.com/u/0/+VysakhSreenivasan/posts/4heRzoxbM72&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在tmux.conf里面加上:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
set-window-option -g utf8 on
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id20"&gt;5&amp;nbsp;&amp;nbsp;&amp;nbsp;工具&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="tmuxp"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id21"&gt;5.1&amp;nbsp;&amp;nbsp;&amp;nbsp;tmuxp&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;pip install tmuxp&lt;/p&gt;
&lt;p&gt;保存会话(我试用有问题, ):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
usage: tmuxp freeze [-h] [-L socket-name] [-S socket-path]
                session_name [session_name ...]

ning&amp;#64;ning-laptop ~/test$ tmuxp load a.yaml
(E) [10:05:09] tmuxp.cli cli.main():952 [u'tmux: unknown option -- V', u'usage: tmux [-28lquv] [-c shell-command] [-f file] [-L socket-name]', u'            [-S socket-path] [command [flags]]']
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="workspace"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id22"&gt;5.2&amp;nbsp;&amp;nbsp;&amp;nbsp;workspace&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;修改了我的workspace脚本, 老的:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;#64;task
def redissrc():
    cmd('''
gnome-terminal --geometry=120x40
--tab --working-directory ~/idning/blog_and_notes
--tab --working-directory ~/idning/blog_and_notes
--tab --working-directory ~/idning-github/redis/src
--tab --working-directory ~/idning-github/twemproxy/src
--tab --working-directory ~/idning-github/twemproxy/src
''')
&lt;/pre&gt;
&lt;p&gt;新的:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;#64;task
def redismgr():
    startcmd = '''
        tmux new -d      -s redismgr -n src  -c ~/idning-github/redis-mgr/
        tmux new-window  -t redismgr -n src  -c ~/idning-github/redis-mgr/
        tmux new-window  -t redismgr -n src  -c ~/idning-github/redis-mgr/
        tmux new-window  -t redismgr -n note -c ~/idning/blog_and_notes/
        tmux new-window  -t redismgr -n note -c ~/idning/blog_and_notes/
        '''

    if not _tmux_exists('redismgr'):
        cmd2(startcmd)
    cmd('tmux attach -t redismgr')
&lt;/pre&gt;
&lt;p&gt;类似的:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;#64;task
def work():
    cmd('''
gnome-terminal --geometry=120x40  --name=abc
--tab --working-directory /home/ning/mywork/work-log
--tab --working-directory /home/ning/mywork/work-log
--tab --working-directory /home/ning/mywork/codebase-git/
--tab --working-directory /home/ning/mywork/codebase
''')

    cmd('xdotool key alt+1')
    cmd('xdotool type &amp;quot;vim M/201402.rst&amp;quot;')
    cmd('xdotool key  Return F8')
    #cmd('xdotool key  alt+Tab')
&lt;/pre&gt;
&lt;p&gt;换成了:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;#64;task
def work():
    startcmd = '''
        tmux new -d      -s work -n worklog     -c /home/ning/mywork/work-log/
        tmux new-window  -t work -n worklog     -c /home/ning/mywork/work-log/
        tmux new-window  -t work -n git         -c /home/ning/mywork/codebase-git/
        tmux new-window  -t work -n code        -c /home/ning/mywork/codebase/
        '''

    if not _tmux_exists('work'):
        cmd2(startcmd)

    cmd('tmux send-keys -t work:0 &amp;quot;vi M/201405.rst&amp;quot; Enter')
    cmd('tmux select-window -t work:0')
    cmd('tmux attach -t work')
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id23"&gt;6&amp;nbsp;&amp;nbsp;&amp;nbsp;小结&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;比screen好(可定制性强)&lt;/li&gt;
&lt;li&gt;自己写脚本管理, 比用tmuxp这样的工具好&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id24"&gt;7&amp;nbsp;&amp;nbsp;&amp;nbsp;参考&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://wiki.gentoo.org/wiki/Tmux"&gt;http://wiki.gentoo.org/wiki/Tmux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://wiki.archlinux.org/index.php/tmux"&gt;https://wiki.archlinux.org/index.php/tmux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/aziz/dotfiles/blob/master/tmux.conf"&gt;https://github.com/aziz/dotfiles/blob/master/tmux.conf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://gist.github.com/kwbock/5161135"&gt;https://gist.github.com/kwbock/5161135&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/roylez/dotfiles/blob/master/.tmux.conf"&gt;https://github.com/roylez/dotfiles/blob/master/.tmux.conf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="all"></category></entry><entry><title>icomet-cr</title><link href="/icomet-cr.html" rel="alternate"></link><updated>2014-04-23T16:18:23+08:00</updated><author><name>ning</name></author><id>tag:,2014-04-23:icomet-cr.html</id><summary type="html">&lt;div class="contents topic" id="table-of-contents"&gt;
&lt;p class="topic-title first"&gt;Table of Contents&lt;/p&gt;
&lt;ul class="auto-toc simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id1" id="id5"&gt;1&amp;nbsp;&amp;nbsp;&amp;nbsp;代码量&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#utils" id="id6"&gt;2&amp;nbsp;&amp;nbsp;&amp;nbsp;utils&lt;/a&gt;&lt;ul class="auto-toc"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#config" id="id7"&gt;2.1&amp;nbsp;&amp;nbsp;&amp;nbsp;config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#log" id="id8"&gt;2.2&amp;nbsp;&amp;nbsp;&amp;nbsp;log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id2" id="id9"&gt;2.3&amp;nbsp;&amp;nbsp;&amp;nbsp;其它&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#comet" id="id10"&gt;3&amp;nbsp;&amp;nbsp;&amp;nbsp;comet逻辑&lt;/a&gt;&lt;ul class="auto-toc"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#comet-server-cpp-main" id="id11"&gt;3.1&amp;nbsp;&amp;nbsp;&amp;nbsp;comet-server.cpp main()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#server-cpp-server-h" id="id12"&gt;3.2&amp;nbsp;&amp;nbsp;&amp;nbsp;server.cpp server.h&lt;/a&gt;&lt;ul class="auto-toc"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#pub" id="id13"&gt;3.2.1&amp;nbsp;&amp;nbsp;&amp;nbsp;pub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#sub" id="id14"&gt;3.2.2&amp;nbsp;&amp;nbsp;&amp;nbsp;sub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#channel-cpp-pub" id="id15"&gt;3.3&amp;nbsp;&amp;nbsp;&amp;nbsp;channel.cpp (pub端)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#subscriber-cpp-subscriber-h" id="id16"&gt;3.4&amp;nbsp;&amp;nbsp;&amp;nbsp;subscriber.cpp subscriber.h&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id3" id="id17"&gt;4&amp;nbsp;&amp;nbsp;&amp;nbsp;问题&lt;/a&gt;&lt;ul class="auto-toc"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#k" id="id18"&gt;4.1&amp;nbsp;&amp;nbsp;&amp;nbsp;1000K 连接的测试.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id4" id="id19"&gt;5&amp;nbsp;&amp;nbsp;&amp;nbsp;小结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;icomet是ideawu的作品, 基于libevent 的evhttp框架做的comet服务.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/ideawu/icomet"&gt;https://github.com/ideawu/icomet&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;1&amp;nbsp;&amp;nbsp;&amp;nbsp;代码量&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="literal-block"&gt;
ning&amp;#64;ning-laptop:~/test/icomet/src$ find . -name '*.cpp' | xargs cat | wc -l
2116
ning&amp;#64;ning-laptop:~/test/icomet/src$ find . -name '*.h' | xargs cat | wc -l
982
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="utils"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;2&amp;nbsp;&amp;nbsp;&amp;nbsp;utils&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="config"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id7"&gt;2.1&amp;nbsp;&amp;nbsp;&amp;nbsp;config&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;支持名字空间的config&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;支持保存到文件(dump)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;注释也会读入, 并记录行号, dump的时候可以保留注释, 这不错.&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;是否支持默认值和覆盖?&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;不支持.&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;数组支持, 需要解析的时候特别解析:&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;allow xx&lt;/li&gt;
&lt;li&gt;allow xxx&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注释里面说是是c的cfg这样:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
struct config *cfg, *c;

cfg = cfg_load_file(&amp;quot;cfg_test.conf&amp;quot;);
if(!cfg){
    return 0;
}
printf(&amp;quot;proxy.php.host = %s\n&amp;quot;, cfg_getstr(cfg, &amp;quot;proxy.php.host&amp;quot;));
printf(&amp;quot;proxy.php.port = %d\n&amp;quot;, cfg_getnum(cfg, &amp;quot;proxy.php.port&amp;quot;));
&lt;/pre&gt;
&lt;p&gt;实际上, 格式较怪异:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# 有效行以 \t* 开头
proxy :
    php =
        host = 127.0.0.1
        port = 8088
    py :
        host = 127.0.0.1
        port = 8080
&lt;/pre&gt;
&lt;p&gt;实际用起来还是有点费劲:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{
    Config *cc = (Config *)conf-&amp;gt;get(&amp;quot;admin&amp;quot;);
    if(cc != NULL){
        std::vector&amp;lt;Config *&amp;gt; *children = &amp;amp;cc-&amp;gt;children;
        std::vector&amp;lt;Config *&amp;gt;::iterator it;
        for(it = children-&amp;gt;begin(); it != children-&amp;gt;end(); it++){
            if((*it)-&amp;gt;key != &amp;quot;allow&amp;quot;){
                continue;
            }
            const char *ip = (*it)-&amp;gt;str();
            log_info(&amp;quot;    allow %s&amp;quot;, ip);
            ip_filter-&amp;gt;add_allow(ip);
        }
    }
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="log"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id8"&gt;2.2&amp;nbsp;&amp;nbsp;&amp;nbsp;log&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;和自己习惯不一样:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
static const int LEVEL_NONE     = (-1);
static const int LEVEL_MIN      = 0;
static const int LEVEL_FATAL    = 0;
static const int LEVEL_ERROR    = 1;
static const int LEVEL_WARN     = 2;
static const int LEVEL_INFO     = 3;
static const int LEVEL_DEBUG    = 4;
static const int LEVEL_TRACE    = 5;
static const int LEVEL_MAX      = 5;
&lt;/pre&gt;
&lt;p&gt;支持按照文件大小切日志-能按小时切最好&lt;/p&gt;
&lt;p&gt;可以设置写的时候加锁:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
if(this-&amp;gt;mutex){
    pthread_mutex_lock(this-&amp;gt;mutex);
}
fwrite(buf, len, 1, this-&amp;gt;fp);
fflush(this-&amp;gt;fp);

stats.w_curr += len;
stats.w_total += len;
if(rotate_size &amp;gt; 0 &amp;amp;&amp;amp; stats.w_curr &amp;gt; rotate_size){
    this-&amp;gt;rotate();
}
if(this-&amp;gt;mutex){
    pthread_mutex_unlock(this-&amp;gt;mutex);
}
&lt;/pre&gt;
&lt;p&gt;因为 这里用的是 &lt;tt class="docutils literal"&gt;FILE *&lt;/tt&gt;, 不能直接append.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id9"&gt;2.3&amp;nbsp;&amp;nbsp;&amp;nbsp;其它&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;daemon.h
file.h
ip_filter.h 黑白名单,
list.h 链表 c++还需要这个么?:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
template &amp;lt;class T&amp;gt;
class LinkedList{
&lt;/pre&gt;
&lt;p&gt;strings.h 提供trim(), hexmem() parse_ip_port() 函数
objpool.h 因为用范型, 所以很有用的对象池, 可惜c用不了, icomet里面没用.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="comet"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;3&amp;nbsp;&amp;nbsp;&amp;nbsp;comet逻辑&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="comet-server-cpp-main"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id11"&gt;3.1&amp;nbsp;&amp;nbsp;&amp;nbsp;comet-server.cpp main()&lt;/a&gt;&lt;/h3&gt;
&lt;pre class="literal-block"&gt;
Server *serv = NULL;
void pub_handler(struct evhttp_request *req, void *arg){
    CHECK_AUTH();
    serv-&amp;gt;pub(req, true);
}

void timer_cb(evutil_socket_t sig, short events, void *user_data){ //每秒一次.
    rand();
    serv-&amp;gt;check_timeout();
}

int main(int argc, char **argv){
    //读取配置
    serv = new Server();
    // /pub?cname=abc&amp;amp;content=hi
    evhttp_set_cb(admin_http, &amp;quot;/pub&amp;quot;, pub_handler, NULL);

    // /sub?cname=abc&amp;amp;cb=jsonp&amp;amp;token=&amp;amp;seq=123&amp;amp;noop=123
    evhttp_set_cb(front_http, &amp;quot;/sub&amp;quot;, poll_handler, NULL);

}
&lt;/pre&gt;
&lt;p&gt;为啥把pub 放在admin_http上&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="server-cpp-server-h"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id12"&gt;3.2&amp;nbsp;&amp;nbsp;&amp;nbsp;server.cpp server.h&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;used_channels 所有已用channel链表
cname_channels 每个channel有一个名字, 用map存name-&amp;gt;channel的关系.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Channel* Server::new_channel(const std::string &amp;amp;cname){
    if(used_channels.size &amp;gt;= ServerConfig::max_channels){
        return NULL;
    }
    log_debug(&amp;quot;new channel: %s&amp;quot;, cname.c_str());

    Channel *channel = new Channel();
    channel-&amp;gt;serv = this;
    channel-&amp;gt;name = cname;
    channel-&amp;gt;create_token();

    add_presence(PresenceOnline, channel-&amp;gt;name);

    used_channels.push_back(channel);
    cname_channels[channel-&amp;gt;name] = channel;

    return channel;
}
&lt;/pre&gt;
&lt;p&gt;check_timeout 每秒对每个channel上的每个sub, 检查是否过了一段时间的idle, 如果是idle, 就回复这个sub没有更新(noop()方法):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
int Server::check_timeout(){
    //log_debug(&amp;quot;&amp;lt;&amp;quot;);
    LinkedList&amp;lt;Channel *&amp;gt;::Iterator it = used_channels.iterator();
    while(Channel *channel = it.next()){
        if(channel-&amp;gt;subs.size == 0){
            if(--channel-&amp;gt;idle &amp;lt; 0){
                this-&amp;gt;free_channel(channel);
            }
            continue;
        }
        if(channel-&amp;gt;idle &amp;lt; ServerConfig::channel_idles){
            channel-&amp;gt;idle = ServerConfig::channel_idles;
        }

        LinkedList&amp;lt;Subscriber *&amp;gt;::Iterator it2 = channel-&amp;gt;subs.iterator();
        while(Subscriber *sub = it2.next()){
            if(++sub-&amp;gt;idle &amp;lt;= ServerConfig::polling_idles){
                continue;
            }
            sub-&amp;gt;idle = 0;
            sub-&amp;gt;noop();
        }
    }
    //log_debug(&amp;quot;&amp;gt;&amp;quot;);
    return 0;
}
&lt;/pre&gt;
&lt;p&gt;这个方法效率极低.&lt;/p&gt;
&lt;div class="section" id="pub"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id13"&gt;3.2.1&amp;nbsp;&amp;nbsp;&amp;nbsp;pub&lt;/a&gt;&lt;/h4&gt;
&lt;pre class="literal-block"&gt;
int Server::pub(struct evhttp_request *req, bool encoded){
    channel = this-&amp;gt;get_channel_by_name(cname);
    // response to publisher
    evhttp_add_header(req-&amp;gt;output_headers, &amp;quot;Content-Type&amp;quot;, &amp;quot;text/javascript; charset=utf-8&amp;quot;);
    struct evbuffer *buf = evbuffer_new();

    evbuffer_add_printf(buf, &amp;quot;{\&amp;quot;type\&amp;quot;:\&amp;quot;ok\&amp;quot;}&amp;quot;);

    evhttp_send_reply(req, 200, &amp;quot;OK&amp;quot;, buf);
    evbuffer_free(buf);

    // push to subscribers
    channel-&amp;gt;send(&amp;quot;data&amp;quot;, content, encoded);
    return 0;
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="sub"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id14"&gt;3.2.2&amp;nbsp;&amp;nbsp;&amp;nbsp;sub&lt;/a&gt;&lt;/h4&gt;
&lt;pre class="literal-block"&gt;
int Server::sub(struct evhttp_request *req, Subscriber::Type sub_type){
    HttpQuery query(req);
    int seq = query.get_int(&amp;quot;seq&amp;quot;, 0);
    int noop = query.get_int(&amp;quot;noop&amp;quot;, 0);
    const char *cb = query.get_str(&amp;quot;cb&amp;quot;, &amp;quot;&amp;quot;);
    const char *token = query.get_str(&amp;quot;token&amp;quot;, &amp;quot;&amp;quot;);
    std::string cname = query.get_str(&amp;quot;cname&amp;quot;, &amp;quot;&amp;quot;);

    Channel *channel = this-&amp;gt;get_channel_by_name(cname);

    ... //check

    Subscriber *sub = new Subscriber();
    sub-&amp;gt;req = req;
    sub-&amp;gt;type = sub_type;
    sub-&amp;gt;idle = 0;
    sub-&amp;gt;seq_next = seq;
    sub-&amp;gt;seq_noop = noop;
    sub-&amp;gt;callback = cb;

    channel-&amp;gt;add_subscriber(sub); //添加进去.
    subscribers ++;
    sub-&amp;gt;start();

    return 0;
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="channel-cpp-pub"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id15"&gt;3.3&amp;nbsp;&amp;nbsp;&amp;nbsp;channel.cpp (pub端)&lt;/a&gt;&lt;/h3&gt;
&lt;pre class="literal-block"&gt;
class Channel{
    LinkedList&amp;lt;Subscriber *&amp;gt; subs;
    int idle;
    int seq_next;
    std::string name;
    std::string token;
    std::vector&amp;lt;std::string&amp;gt; msg_list; //用一个vector保存msg
    void add_subscriber(Subscriber *sub);
    void send(const char *type, const char *content, bool encoded=true);
}
&lt;/pre&gt;
&lt;p&gt;这是pub逻辑,&lt;/p&gt;
&lt;pre class="literal-block"&gt;
void Channel::send(const char *type, const char *content, bool encoded){
    ...
    msg_list.push_back(content);
    seq_next ++;
    if(msg_list.size() &amp;gt;= ServerConfig::channel_buffer_size * 1.5){
        std::vector&amp;lt;std::string&amp;gt;::iterator it;
        it = msg_list.end() - ServerConfig::channel_buffer_size;
        msg_list.assign(it, msg_list.end());
        log_trace(&amp;quot;resize msg_list to %d, seq_next: %d&amp;quot;, msg_list.size(), seq_next);
    }
    LinkedList&amp;lt;Subscriber *&amp;gt;::Iterator it = subs.iterator();
    while(Subscriber *sub = it.next()){
        sub-&amp;gt;send_chunk(this-&amp;gt;seq_next, type, new_content.c_str());
    }
}
&lt;/pre&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;sub-&amp;gt;send_chunk&lt;/span&gt;&lt;/tt&gt; 是决定向sub端发数据,
前面 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;serv-&amp;gt;check_timeout()&lt;/span&gt;&lt;/tt&gt; 里面sub-&amp;gt;noop() 是决定向sub端回复说 &lt;tt class="docutils literal"&gt;没有消息&lt;/tt&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="subscriber-cpp-subscriber-h"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id16"&gt;3.4&amp;nbsp;&amp;nbsp;&amp;nbsp;subscriber.cpp subscriber.h&lt;/a&gt;&lt;/h3&gt;
&lt;pre class="literal-block"&gt;
evhttp_add_header(req-&amp;gt;output_headers, &amp;quot;Connection&amp;quot;, &amp;quot;keep-alive&amp;quot;);
evhttp_send_reply_chunk(this-&amp;gt;req, buf);
&lt;/pre&gt;
&lt;p&gt;evhttp_send_reply_chunk, 就是用Chunked方式回复数据.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id17"&gt;4&amp;nbsp;&amp;nbsp;&amp;nbsp;问题&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;消息存在内存中, 不能持久化.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;一个channel如果一直活跃, 消息就不会删除, 越堆越多?(一个channel有个最大消息量):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
if(msg_list.size() &amp;gt;= ServerConfig::channel_buffer_size * 1.5){
    std::vector&amp;lt;std::string&amp;gt;::iterator it;
    it = msg_list.end() - ServerConfig::channel_buffer_size;
    msg_list.assign(it, msg_list.end());
    log_trace(&amp;quot;resize msg_list to %d, seq_next: %d&amp;quot;, msg_list.size(), seq_next);
}
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;有channel timeout, 没有msg timeout&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="k"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id18"&gt;4.1&amp;nbsp;&amp;nbsp;&amp;nbsp;1000K 连接的测试.&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;ideawu 提供了一个 c1000k 代码:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/ideawu/c1000k"&gt;https://github.com/ideawu/c1000k&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;要测试c1000k 主要两个问题:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;是server 端, 每个sokcet 大约需要占用0.5M内存(内核sokcet缓冲区内存), 所以总共需要500G内存.&lt;/li&gt;
&lt;li&gt;client端, client 只能开大约3w-5w个client端口(对每个server ip+port, 只能有3w-5w连接)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ideawu是这样解决的:
1. server 端每accept一个连接, 都设置它的缓冲区大小为5k:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
     bufsize = 5000;
     setsockopt(sock, SOL_SOCKET, SO_SNDBUF, &amp;amp;bufsize, sizeof(bufsize));
     setsockopt(sock, SOL_SOCKET, SO_RCVBUF, &amp;amp;bufsize, sizeof(bufsize));

这样1000k连接只需要10G内存.
&lt;/pre&gt;
&lt;ol class="arabic" start="2"&gt;
&lt;li&gt;&lt;p class="first"&gt;server 端开100个port, 这样每个客户端3w端口, 就可以开300w个连接.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;这时候, 限制就只有fd个数限制了.&lt;/p&gt;
&lt;p&gt;我启动的时候设置好limit就可以&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ limit -n 1024000 ./server 6000
$ limit -n 1024000 ./client 127.0.0.1 6000

可以一直跑到:
connections: 1023897
error: Too many open files
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id19"&gt;5&amp;nbsp;&amp;nbsp;&amp;nbsp;小结&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;对于comet, evhttp 应该是最佳选择, 好于nginx.&lt;/li&gt;
&lt;li&gt;赞ideawu.&lt;/li&gt;
&lt;li&gt;消息不持久化,&lt;/li&gt;
&lt;li&gt;单机模式, 如何扩展?&lt;/li&gt;
&lt;li&gt;定时timer遍历, 对单进程服务器来说, 应该不可接受.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="all"></category></entry><entry><title>Understanding the Linux Kernel(notes)</title><link href="/ulk.html" rel="alternate"></link><updated>2014-01-05T11:54:31+08:00</updated><author><name>ning</name></author><id>tag:,2014-01-05:ulk.html</id><summary type="html">&lt;div class="contents topic" id="table-of-contents"&gt;
&lt;p class="topic-title first"&gt;Table of Contents&lt;/p&gt;
&lt;ul class="auto-toc simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#c1" id="id48"&gt;1&amp;nbsp;&amp;nbsp;&amp;nbsp;c1&lt;/a&gt;&lt;ul class="auto-toc"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id1" id="id49"&gt;1.1&amp;nbsp;&amp;nbsp;&amp;nbsp;微内核&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#user-mode-kernel-mode" id="id50"&gt;1.2&amp;nbsp;&amp;nbsp;&amp;nbsp;user mode &amp;amp; kernel mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id2" id="id51"&gt;1.3&amp;nbsp;&amp;nbsp;&amp;nbsp;内核可重入&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id3" id="id52"&gt;1.4&amp;nbsp;&amp;nbsp;&amp;nbsp;内核线程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id4" id="id53"&gt;1.5&amp;nbsp;&amp;nbsp;&amp;nbsp;内核和用户内存&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#zombie" id="id54"&gt;1.6&amp;nbsp;&amp;nbsp;&amp;nbsp;僵尸进程 (zombie)&lt;/a&gt;&lt;ul class="auto-toc"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#init" id="id55"&gt;1.6.1&amp;nbsp;&amp;nbsp;&amp;nbsp;如果父进程先结束, 子进程会继续, 并且挂到init上&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id5" id="id56"&gt;1.6.2&amp;nbsp;&amp;nbsp;&amp;nbsp;清除僵尸进程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id6" id="id57"&gt;1.6.3&amp;nbsp;&amp;nbsp;&amp;nbsp;注意&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#c2" id="id58"&gt;2&amp;nbsp;&amp;nbsp;&amp;nbsp;c2 内存寻址(段页管理)&lt;/a&gt;&lt;ul class="auto-toc"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id7" id="id59"&gt;2.1&amp;nbsp;&amp;nbsp;&amp;nbsp;逻辑地址, 线性地址, 物理地址&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id8" id="id60"&gt;2.2&amp;nbsp;&amp;nbsp;&amp;nbsp;硬件中的分段&lt;/a&gt;&lt;ul class="auto-toc"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id9" id="id61"&gt;2.2.1&amp;nbsp;&amp;nbsp;&amp;nbsp;80286 后的实模式/保护模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id10" id="id62"&gt;2.2.2&amp;nbsp;&amp;nbsp;&amp;nbsp;保护模式中的地址&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#segment-selectors" id="id63"&gt;2.2.3&amp;nbsp;&amp;nbsp;&amp;nbsp;段选择器(Segment Selectors)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id11" id="id64"&gt;2.2.4&amp;nbsp;&amp;nbsp;&amp;nbsp;段寄存器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#segment-descriptors" id="id65"&gt;2.2.5&amp;nbsp;&amp;nbsp;&amp;nbsp;段描述符(Segment Descriptors)&lt;/a&gt;&lt;ul class="auto-toc"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#gdt-ldt" id="id66"&gt;2.2.5.1&amp;nbsp;&amp;nbsp;&amp;nbsp;GDT/LDT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id12" id="id67"&gt;2.2.6&amp;nbsp;&amp;nbsp;&amp;nbsp;段选择器, 段描述符的关系&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id13" id="id68"&gt;2.2.7&amp;nbsp;&amp;nbsp;&amp;nbsp;分段单元: 从逻辑地址到线性地址&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#linux" id="id69"&gt;2.3&amp;nbsp;&amp;nbsp;&amp;nbsp;Linux 中的分段&lt;/a&gt;&lt;ul class="auto-toc"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#linux-gdt" id="id70"&gt;2.3.1&amp;nbsp;&amp;nbsp;&amp;nbsp;Linux 中的GDT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#linuxldt" id="id71"&gt;2.3.2&amp;nbsp;&amp;nbsp;&amp;nbsp;Linux中的LDT:&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id14" id="id72"&gt;2.4&amp;nbsp;&amp;nbsp;&amp;nbsp;硬件中的分页&lt;/a&gt;&lt;ul class="auto-toc"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id15" id="id73"&gt;2.4.1&amp;nbsp;&amp;nbsp;&amp;nbsp;常规分页&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id16" id="id74"&gt;2.4.2&amp;nbsp;&amp;nbsp;&amp;nbsp;扩展分页&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#pae-324g" id="id75"&gt;2.4.3&amp;nbsp;&amp;nbsp;&amp;nbsp;PAE: 允许在32位系统上访问大于4G内存&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id17" id="id76"&gt;2.4.4&amp;nbsp;&amp;nbsp;&amp;nbsp;64位架构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#hardware-cache" id="id77"&gt;2.4.5&amp;nbsp;&amp;nbsp;&amp;nbsp;Hardware Cache&lt;/a&gt;&lt;ul class="auto-toc"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#cache-snooping" id="id78"&gt;2.4.5.1&amp;nbsp;&amp;nbsp;&amp;nbsp;cache snooping:&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#tlb-translation-lookaside-buffers" id="id79"&gt;2.4.6&amp;nbsp;&amp;nbsp;&amp;nbsp;TLB(Translation Lookaside Buffers)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id18" id="id80"&gt;2.5&amp;nbsp;&amp;nbsp;&amp;nbsp;Linux 中的分页&lt;/a&gt;&lt;ul class="auto-toc"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#layout" id="id81"&gt;2.5.1&amp;nbsp;&amp;nbsp;&amp;nbsp;物理内存Layout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#process-page-table" id="id82"&gt;2.5.2&amp;nbsp;&amp;nbsp;&amp;nbsp;Process Page Table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#kernel-page-table" id="id83"&gt;2.5.3&amp;nbsp;&amp;nbsp;&amp;nbsp;Kernel Page Table&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id19" id="id84"&gt;2.6&amp;nbsp;&amp;nbsp;&amp;nbsp;小结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#c3-processes" id="id85"&gt;3&amp;nbsp;&amp;nbsp;&amp;nbsp;c3 Processes&lt;/a&gt;&lt;ul class="auto-toc"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#processes-lightweight-processes-and-threads" id="id86"&gt;3.1&amp;nbsp;&amp;nbsp;&amp;nbsp;Processes, Lightweight Processes, and Threads&lt;/a&gt;&lt;ul class="auto-toc"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#pthread" id="id87"&gt;3.1.1&amp;nbsp;&amp;nbsp;&amp;nbsp;关于pthread&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#linuxthreads-nptl" id="id88"&gt;3.1.2&amp;nbsp;&amp;nbsp;&amp;nbsp;LinuxThreads 和NPTL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id20" id="id89"&gt;3.1.3&amp;nbsp;&amp;nbsp;&amp;nbsp;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#process-descriptor" id="id90"&gt;3.2&amp;nbsp;&amp;nbsp;&amp;nbsp;Process Descriptor&lt;/a&gt;&lt;ul class="auto-toc"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id21" id="id91"&gt;3.2.1&amp;nbsp;&amp;nbsp;&amp;nbsp;能有多少个进程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#pidthread-group" id="id92"&gt;3.2.2&amp;nbsp;&amp;nbsp;&amp;nbsp;pid在thread group中&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#process-list" id="id93"&gt;3.2.3&amp;nbsp;&amp;nbsp;&amp;nbsp;process list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#process" id="id94"&gt;3.2.4&amp;nbsp;&amp;nbsp;&amp;nbsp;Process 资源限制&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#process-switch" id="id95"&gt;3.3&amp;nbsp;&amp;nbsp;&amp;nbsp;Process Switch&lt;/a&gt;&lt;ul class="auto-toc"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#hardware-context" id="id96"&gt;3.3.1&amp;nbsp;&amp;nbsp;&amp;nbsp;Hardware Context 切换&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#schedule" id="id97"&gt;3.3.2&amp;nbsp;&amp;nbsp;&amp;nbsp;schedule()  函数&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#create-processes" id="id98"&gt;3.4&amp;nbsp;&amp;nbsp;&amp;nbsp;Create Processes&lt;/a&gt;&lt;ul class="auto-toc"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#clone" id="id99"&gt;3.4.1&amp;nbsp;&amp;nbsp;&amp;nbsp;内核底层的clone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#clone-fork-and-vfork" id="id100"&gt;3.4.2&amp;nbsp;&amp;nbsp;&amp;nbsp;clone( ), fork( ), and vfork( )&lt;/a&gt;&lt;ul class="auto-toc"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#man-clone" id="id101"&gt;3.4.2.1&amp;nbsp;&amp;nbsp;&amp;nbsp;man clone(库函数)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#do-fork" id="id102"&gt;3.4.3&amp;nbsp;&amp;nbsp;&amp;nbsp;do_fork() 函数&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id22" id="id103"&gt;3.5&amp;nbsp;&amp;nbsp;&amp;nbsp;内核线程&lt;/a&gt;&lt;ul class="auto-toc"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#pdflush" id="id104"&gt;3.5.1&amp;nbsp;&amp;nbsp;&amp;nbsp;pdflush&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id23" id="id105"&gt;3.6&amp;nbsp;&amp;nbsp;&amp;nbsp;进程0 &amp;amp; 进程1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#destorying-processes" id="id106"&gt;3.7&amp;nbsp;&amp;nbsp;&amp;nbsp;Destorying Processes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#c4-interrupts-and-exceptions" id="id107"&gt;4&amp;nbsp;&amp;nbsp;&amp;nbsp;c4 Interrupts and Exceptions&lt;/a&gt;&lt;ul class="auto-toc"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#interrupts-and-exceptions" id="id108"&gt;4.1&amp;nbsp;&amp;nbsp;&amp;nbsp;Interrupts and Exceptions&lt;/a&gt;&lt;ul class="auto-toc"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#interrupt" id="id109"&gt;4.1.1&amp;nbsp;&amp;nbsp;&amp;nbsp;Interrupt&lt;/a&gt;&lt;ul class="auto-toc"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#interrupt-handling" id="id110"&gt;4.1.1.1&amp;nbsp;&amp;nbsp;&amp;nbsp;Interrupt handling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#irqs-interrupt-requests" id="id111"&gt;4.1.1.2&amp;nbsp;&amp;nbsp;&amp;nbsp;IRQs (Interrupt ReQuests)&lt;/a&gt;&lt;ul class="auto-toc"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#pic" id="id112"&gt;4.1.1.2.1&amp;nbsp;&amp;nbsp;&amp;nbsp;老的PIC 的硬件结构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#pic-the-advanced-programmable-interrupt-controller-apic" id="id113"&gt;4.1.1.2.2&amp;nbsp;&amp;nbsp;&amp;nbsp;新的PIC 的硬件结构 The Advanced Programmable Interrupt Controller (APIC)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#exceptions" id="id114"&gt;4.1.2&amp;nbsp;&amp;nbsp;&amp;nbsp;Exceptions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#idt" id="id115"&gt;4.1.3&amp;nbsp;&amp;nbsp;&amp;nbsp;中断描述符表IDT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#nested-execution-of-exception-and-interrupt-handlers" id="id116"&gt;4.2&amp;nbsp;&amp;nbsp;&amp;nbsp;Nested Execution of Exception and Interrupt Handlers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#initializing-the-interrupt-descriptor-table" id="id117"&gt;4.3&amp;nbsp;&amp;nbsp;&amp;nbsp;Initializing the Interrupt Descriptor Table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#exception-handling" id="id118"&gt;4.4&amp;nbsp;&amp;nbsp;&amp;nbsp;Exception Handling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id24" id="id119"&gt;4.5&amp;nbsp;&amp;nbsp;&amp;nbsp;Interrupt Handling(硬件产生的)&lt;/a&gt;&lt;ul class="auto-toc"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#irq" id="id120"&gt;4.5.1&amp;nbsp;&amp;nbsp;&amp;nbsp;IRQ在多处理器系统上的分发&lt;/a&gt;&lt;ul class="auto-toc"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#cpuirq" id="id121"&gt;4.5.1.1&amp;nbsp;&amp;nbsp;&amp;nbsp;CPU的IRQ亲和力&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id25" id="id122"&gt;4.5.1.2&amp;nbsp;&amp;nbsp;&amp;nbsp;例子:网卡多队列的中断绑定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id26" id="id123"&gt;4.5.1.3&amp;nbsp;&amp;nbsp;&amp;nbsp;把进程绑在核上&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id27" id="id124"&gt;4.5.1.4&amp;nbsp;&amp;nbsp;&amp;nbsp;网卡多队列&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id28" id="id125"&gt;4.5.1.5&amp;nbsp;&amp;nbsp;&amp;nbsp;千兆网卡多队列&lt;/a&gt;&lt;ul class="auto-toc"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id29" id="id126"&gt;4.5.1.5.1&amp;nbsp;&amp;nbsp;&amp;nbsp;是否支持&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id30" id="id127"&gt;4.5.1.5.2&amp;nbsp;&amp;nbsp;&amp;nbsp;开启多队列&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#proc-softirqs" id="id128"&gt;4.5.2&amp;nbsp;&amp;nbsp;&amp;nbsp;/proc/softirqs&lt;/a&gt;&lt;ul class="auto-toc"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#mpstat" id="id129"&gt;4.5.2.1&amp;nbsp;&amp;nbsp;&amp;nbsp;mpstat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#vmstat" id="id130"&gt;4.5.2.2&amp;nbsp;&amp;nbsp;&amp;nbsp;vmstat&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#softirqs-and-tasklets" id="id131"&gt;4.6&amp;nbsp;&amp;nbsp;&amp;nbsp;Softirqs and Tasklets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#work-queues" id="id132"&gt;4.7&amp;nbsp;&amp;nbsp;&amp;nbsp;Work Queues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#returning-from-interrupts-and-exceptions" id="id133"&gt;4.8&amp;nbsp;&amp;nbsp;&amp;nbsp;Returning from Interrupts and Exceptions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#c5-kernel-synchronization" id="id134"&gt;5&amp;nbsp;&amp;nbsp;&amp;nbsp;c5 Kernel Synchronization&lt;/a&gt;&lt;ul class="auto-toc"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#how-the-kernel-services-requests" id="id135"&gt;5.1&amp;nbsp;&amp;nbsp;&amp;nbsp;How the Kernel Services Requests&lt;/a&gt;&lt;ul class="auto-toc"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id31" id="id136"&gt;5.1.1&amp;nbsp;&amp;nbsp;&amp;nbsp;内核抢占&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#synchronization-primitives" id="id137"&gt;5.2&amp;nbsp;&amp;nbsp;&amp;nbsp;Synchronization Primitives(同步原语)&lt;/a&gt;&lt;ul class="auto-toc"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#cpu" id="id138"&gt;5.2.1&amp;nbsp;&amp;nbsp;&amp;nbsp;每CPU变量&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id32" id="id139"&gt;5.2.2&amp;nbsp;&amp;nbsp;&amp;nbsp;原子操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id33" id="id140"&gt;5.2.3&amp;nbsp;&amp;nbsp;&amp;nbsp;优化屏障&amp;amp;内存屏障&lt;/a&gt;&lt;ul class="auto-toc"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#optimization-barrier" id="id141"&gt;5.2.3.1&amp;nbsp;&amp;nbsp;&amp;nbsp;优化屏障(optimization barrier) 原语保证编译程序不会混淆原语前后的汇编指令.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id34" id="id142"&gt;5.2.3.2&amp;nbsp;&amp;nbsp;&amp;nbsp;内存屏障确保原语之后的操作开始执行之前, 原语之前的操作已完成.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id35" id="id143"&gt;5.2.4&amp;nbsp;&amp;nbsp;&amp;nbsp;自旋锁&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id36" id="id144"&gt;5.2.5&amp;nbsp;&amp;nbsp;&amp;nbsp;读/写自旋锁&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id37" id="id145"&gt;5.2.6&amp;nbsp;&amp;nbsp;&amp;nbsp;顺序锁&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#rcu" id="id146"&gt;5.2.7&amp;nbsp;&amp;nbsp;&amp;nbsp;读-拷贝-更新 (RCU通过指针而不是锁)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id38" id="id147"&gt;5.2.8&amp;nbsp;&amp;nbsp;&amp;nbsp;信号量&lt;/a&gt;&lt;ul class="auto-toc"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#completion" id="id148"&gt;5.2.8.1&amp;nbsp;&amp;nbsp;&amp;nbsp;补充原语(completion)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id39" id="id149"&gt;5.2.9&amp;nbsp;&amp;nbsp;&amp;nbsp;本地中断禁止&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id40" id="id150"&gt;5.2.10&amp;nbsp;&amp;nbsp;&amp;nbsp;本地软中断禁止&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#synchronizing-accesses-to-kernel-data-structures" id="id151"&gt;5.3&amp;nbsp;&amp;nbsp;&amp;nbsp;Synchronizing Accesses to Kernel Data Structures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#examples-of-race-condition-prevention" id="id152"&gt;5.4&amp;nbsp;&amp;nbsp;&amp;nbsp;Examples of Race Condition Prevention&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#c6-timing-measurements" id="id153"&gt;6&amp;nbsp;&amp;nbsp;&amp;nbsp;c6 Timing Measurements&lt;/a&gt;&lt;ul class="auto-toc"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#clock-and-timer-circuits" id="id154"&gt;6.1&amp;nbsp;&amp;nbsp;&amp;nbsp;Clock and Timer Circuits (几种硬件计时器)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#the-linux-timekeeping-architecture" id="id155"&gt;6.2&amp;nbsp;&amp;nbsp;&amp;nbsp;The Linux Timekeeping Architecture&lt;/a&gt;&lt;ul class="auto-toc"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id41" id="id156"&gt;6.2.1&amp;nbsp;&amp;nbsp;&amp;nbsp;时钟中断时处理&lt;/a&gt;&lt;ul class="auto-toc"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id42" id="id157"&gt;6.2.1.1&amp;nbsp;&amp;nbsp;&amp;nbsp;系统负载&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id43" id="id158"&gt;6.2.1.2&amp;nbsp;&amp;nbsp;&amp;nbsp;监管内核代码&lt;/a&gt;&lt;ul class="auto-toc"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#readprofiler-hot-spot" id="id159"&gt;6.2.1.2.1&amp;nbsp;&amp;nbsp;&amp;nbsp;readprofiler, 用于确定内核热点(hot spot).&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#oprofile" id="id160"&gt;6.2.1.2.2&amp;nbsp;&amp;nbsp;&amp;nbsp;oprofile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id44" id="id161"&gt;6.2.1.2.3&amp;nbsp;&amp;nbsp;&amp;nbsp;检测死锁&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id45" id="id162"&gt;6.2.1.2.4&amp;nbsp;&amp;nbsp;&amp;nbsp;蒙特卡洛:&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#updating-the-time-and-date" id="id163"&gt;6.3&amp;nbsp;&amp;nbsp;&amp;nbsp;Updating the Time and Date&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#updating-system-statistics" id="id164"&gt;6.4&amp;nbsp;&amp;nbsp;&amp;nbsp;Updating System Statistics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#software-timers-and-delay-functions" id="id165"&gt;6.5&amp;nbsp;&amp;nbsp;&amp;nbsp;Software Timers and Delay Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#system-calls-related-to-timing-measurements" id="id166"&gt;6.6&amp;nbsp;&amp;nbsp;&amp;nbsp;System Calls Related to Timing Measurements&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#c7-process-scheduling" id="id167"&gt;7&amp;nbsp;&amp;nbsp;&amp;nbsp;c7 Process Scheduling&lt;/a&gt;&lt;ul class="auto-toc"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#scheduling-policy" id="id168"&gt;7.1&amp;nbsp;&amp;nbsp;&amp;nbsp;Scheduling Policy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#the-scheduling-algorithm" id="id169"&gt;7.2&amp;nbsp;&amp;nbsp;&amp;nbsp;The Scheduling Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#data-structures-used-by-the-scheduler" id="id170"&gt;7.3&amp;nbsp;&amp;nbsp;&amp;nbsp;Data Structures Used by the Scheduler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#functions-used-by-the-scheduler-schedule" id="id171"&gt;7.4&amp;nbsp;&amp;nbsp;&amp;nbsp;Functions Used by the Scheduler(schedule)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id46" id="id172"&gt;7.5&amp;nbsp;&amp;nbsp;&amp;nbsp;多处理器系统中 执行队列的平衡&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#system-calls-related-to-scheduling" id="id173"&gt;7.6&amp;nbsp;&amp;nbsp;&amp;nbsp;System Calls Related to Scheduling&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#c8-memory-management" id="id174"&gt;8&amp;nbsp;&amp;nbsp;&amp;nbsp;c8 Memory Management&lt;/a&gt;&lt;ul class="auto-toc"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#page-frame-management" id="id175"&gt;8.1&amp;nbsp;&amp;nbsp;&amp;nbsp;Page Frame Management&lt;/a&gt;&lt;ul class="auto-toc"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#numa" id="id176"&gt;8.1.1&amp;nbsp;&amp;nbsp;&amp;nbsp;非一致内存访问(NUMA)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#memory-area-management" id="id177"&gt;8.2&amp;nbsp;&amp;nbsp;&amp;nbsp;Memory Area Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#noncontiguous-memory-area-management" id="id178"&gt;8.3&amp;nbsp;&amp;nbsp;&amp;nbsp;Noncontiguous Memory Area Management&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#c9-process-address-space" id="id179"&gt;9&amp;nbsp;&amp;nbsp;&amp;nbsp;c9. Process Address Space&lt;/a&gt;&lt;ul class="auto-toc"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#the-processs-address-space" id="id180"&gt;9.1&amp;nbsp;&amp;nbsp;&amp;nbsp;The Process’s Address Space&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#the-memory-descriptor" id="id181"&gt;9.2&amp;nbsp;&amp;nbsp;&amp;nbsp;The Memory Descriptor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#memory-regions" id="id182"&gt;9.3&amp;nbsp;&amp;nbsp;&amp;nbsp;Memory Regions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#page-fault-exception-handler" id="id183"&gt;9.4&amp;nbsp;&amp;nbsp;&amp;nbsp;Page Fault Exception Handler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#creating-and-deleting-a-process-address-space" id="id184"&gt;9.5&amp;nbsp;&amp;nbsp;&amp;nbsp;Creating and Deleting a Process Address Space&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#managing-the-heap" id="id185"&gt;9.6&amp;nbsp;&amp;nbsp;&amp;nbsp;Managing the Heap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#c10-system-calls" id="id186"&gt;10&amp;nbsp;&amp;nbsp;&amp;nbsp;c10 System Calls&lt;/a&gt;&lt;ul class="auto-toc"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#posix-apis-and-system-calls" id="id187"&gt;10.1&amp;nbsp;&amp;nbsp;&amp;nbsp;POSIX APIs and System Calls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#system-call-handler-and-service-routines" id="id188"&gt;10.2&amp;nbsp;&amp;nbsp;&amp;nbsp;System Call Handler and Service Routines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#entering-and-exiting-a-system-call" id="id189"&gt;10.3&amp;nbsp;&amp;nbsp;&amp;nbsp;Entering and Exiting a System Call&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#parameter-passing" id="id190"&gt;10.4&amp;nbsp;&amp;nbsp;&amp;nbsp;Parameter Passing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#kernel-wrapper-routines" id="id191"&gt;10.5&amp;nbsp;&amp;nbsp;&amp;nbsp;Kernel Wrapper Routines&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#c11-signals" id="id192"&gt;11&amp;nbsp;&amp;nbsp;&amp;nbsp;c11. Signals&lt;/a&gt;&lt;ul class="auto-toc"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#the-role-of-signals" id="id193"&gt;11.1&amp;nbsp;&amp;nbsp;&amp;nbsp;The Role of Signals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#generating-a-signal" id="id194"&gt;11.2&amp;nbsp;&amp;nbsp;&amp;nbsp;Generating a Signal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#delivering-a-signal" id="id195"&gt;11.3&amp;nbsp;&amp;nbsp;&amp;nbsp;Delivering a Signal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#system-calls-related-to-signal-handling" id="id196"&gt;11.4&amp;nbsp;&amp;nbsp;&amp;nbsp;System Calls Related to Signal Handling&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#c12-the-virtual-filesystem" id="id197"&gt;12&amp;nbsp;&amp;nbsp;&amp;nbsp;c12 The Virtual Filesystem&lt;/a&gt;&lt;ul class="auto-toc"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#the-role-of-the-virtual-filesystem-vfs" id="id198"&gt;12.1&amp;nbsp;&amp;nbsp;&amp;nbsp;The Role of the Virtual Filesystem (VFS)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#vfs-data-structures" id="id199"&gt;12.2&amp;nbsp;&amp;nbsp;&amp;nbsp;VFS Data Structures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#filesystem-types" id="id200"&gt;12.3&amp;nbsp;&amp;nbsp;&amp;nbsp;Filesystem Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#filesystem-handling" id="id201"&gt;12.4&amp;nbsp;&amp;nbsp;&amp;nbsp;Filesystem Handling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#pathname-lookup" id="id202"&gt;12.5&amp;nbsp;&amp;nbsp;&amp;nbsp;Pathname Lookup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#implementations-of-vfs-system-calls" id="id203"&gt;12.6&amp;nbsp;&amp;nbsp;&amp;nbsp;Implementations of VFS System Calls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#file-locking" id="id204"&gt;12.7&amp;nbsp;&amp;nbsp;&amp;nbsp;File Locking&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#c13-i-o-architecture-and-device-drivers" id="id205"&gt;13&amp;nbsp;&amp;nbsp;&amp;nbsp;c13. I/O Architecture and Device Drivers&lt;/a&gt;&lt;ul class="auto-toc"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#i-o-architecture" id="id206"&gt;13.1&amp;nbsp;&amp;nbsp;&amp;nbsp;I/O Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#the-device-driver-model" id="id207"&gt;13.2&amp;nbsp;&amp;nbsp;&amp;nbsp;The Device Driver Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#device-files" id="id208"&gt;13.3&amp;nbsp;&amp;nbsp;&amp;nbsp;Device Files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#device-drivers" id="id209"&gt;13.4&amp;nbsp;&amp;nbsp;&amp;nbsp;Device Drivers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#character-device-drivers" id="id210"&gt;13.5&amp;nbsp;&amp;nbsp;&amp;nbsp;Character Device Drivers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#c14-block-device-drivers" id="id211"&gt;14&amp;nbsp;&amp;nbsp;&amp;nbsp;c14. Block Device Drivers&lt;/a&gt;&lt;ul class="auto-toc"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#block-devices-handling" id="id212"&gt;14.1&amp;nbsp;&amp;nbsp;&amp;nbsp;Block Devices Handling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#the-generic-block-layer" id="id213"&gt;14.2&amp;nbsp;&amp;nbsp;&amp;nbsp;The Generic Block Layer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#the-i-o-scheduler" id="id214"&gt;14.3&amp;nbsp;&amp;nbsp;&amp;nbsp;The I/O Scheduler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#block-device-drivers" id="id215"&gt;14.4&amp;nbsp;&amp;nbsp;&amp;nbsp;Block Device Drivers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#opening-a-block-device-file" id="id216"&gt;14.5&amp;nbsp;&amp;nbsp;&amp;nbsp;Opening a Block Device File&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#c15-the-page-cache" id="id217"&gt;15&amp;nbsp;&amp;nbsp;&amp;nbsp;c15. The Page Cache&lt;/a&gt;&lt;ul class="auto-toc"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#the-page-cache" id="id218"&gt;15.1&amp;nbsp;&amp;nbsp;&amp;nbsp;The Page Cache&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#storing-blocks-in-the-page-cache" id="id219"&gt;15.2&amp;nbsp;&amp;nbsp;&amp;nbsp;Storing Blocks in the Page Cache&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#writing-dirty-pages-to-disk" id="id220"&gt;15.3&amp;nbsp;&amp;nbsp;&amp;nbsp;Writing Dirty Pages to Disk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#the-sync-fsync-and-fdatasync-system-calls" id="id221"&gt;15.4&amp;nbsp;&amp;nbsp;&amp;nbsp;The sync( ), fsync( ), and fdatasync() System Calls&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#c16-accessing-files" id="id222"&gt;16&amp;nbsp;&amp;nbsp;&amp;nbsp;c16. Accessing Files&lt;/a&gt;&lt;ul class="auto-toc"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#reading-and-writing-a-file" id="id223"&gt;16.1&amp;nbsp;&amp;nbsp;&amp;nbsp;Reading and Writing a File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#memory-mapping" id="id224"&gt;16.2&amp;nbsp;&amp;nbsp;&amp;nbsp;Memory Mapping&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#direct-i-o-transfers" id="id225"&gt;16.3&amp;nbsp;&amp;nbsp;&amp;nbsp;Direct I/O Transfers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#asynchronous-i-o" id="id226"&gt;16.4&amp;nbsp;&amp;nbsp;&amp;nbsp;Asynchronous I/O&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#c17-page-frame-reclaiming" id="id227"&gt;17&amp;nbsp;&amp;nbsp;&amp;nbsp;c17. Page Frame Reclaiming&lt;/a&gt;&lt;ul class="auto-toc"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#the-page-frame-reclaiming-algorithm" id="id228"&gt;17.1&amp;nbsp;&amp;nbsp;&amp;nbsp;The Page Frame Reclaiming Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#reverse-mapping" id="id229"&gt;17.2&amp;nbsp;&amp;nbsp;&amp;nbsp;Reverse Mapping&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#implementing-the-pfra" id="id230"&gt;17.3&amp;nbsp;&amp;nbsp;&amp;nbsp;Implementing the PFRA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#swapping" id="id231"&gt;17.4&amp;nbsp;&amp;nbsp;&amp;nbsp;Swapping&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#c18-the-ext2-and-ext3-filesystems" id="id232"&gt;18&amp;nbsp;&amp;nbsp;&amp;nbsp;c18. The Ext2 and Ext3 Filesystems&lt;/a&gt;&lt;ul class="auto-toc"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#general-characteristics-of-ext2" id="id233"&gt;18.1&amp;nbsp;&amp;nbsp;&amp;nbsp;General Characteristics of Ext2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#ext2-disk-data-structures" id="id234"&gt;18.2&amp;nbsp;&amp;nbsp;&amp;nbsp;Ext2 Disk Data Structures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#ext2-memory-data-structures" id="id235"&gt;18.3&amp;nbsp;&amp;nbsp;&amp;nbsp;Ext2 Memory Data Structures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#creating-the-ext2-filesystem" id="id236"&gt;18.4&amp;nbsp;&amp;nbsp;&amp;nbsp;Creating the Ext2 Filesystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#ext2-methods" id="id237"&gt;18.5&amp;nbsp;&amp;nbsp;&amp;nbsp;Ext2 Methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#managing-ext2-disk-space" id="id238"&gt;18.6&amp;nbsp;&amp;nbsp;&amp;nbsp;Managing Ext2 Disk Space&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#the-ext3-filesystem" id="id239"&gt;18.7&amp;nbsp;&amp;nbsp;&amp;nbsp;The Ext3 Filesystem&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#c19-process-communication" id="id240"&gt;19&amp;nbsp;&amp;nbsp;&amp;nbsp;c19. Process Communication&lt;/a&gt;&lt;ul class="auto-toc"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#pipes" id="id241"&gt;19.1&amp;nbsp;&amp;nbsp;&amp;nbsp;Pipes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#fifos" id="id242"&gt;19.2&amp;nbsp;&amp;nbsp;&amp;nbsp;FIFOs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#system-v-ipc" id="id243"&gt;19.3&amp;nbsp;&amp;nbsp;&amp;nbsp;System V IPC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#posix-message-queues" id="id244"&gt;19.4&amp;nbsp;&amp;nbsp;&amp;nbsp;POSIX Message Queues&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#c20-program-execution" id="id245"&gt;20&amp;nbsp;&amp;nbsp;&amp;nbsp;c20. Program Execution&lt;/a&gt;&lt;ul class="auto-toc"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#executable-files" id="id246"&gt;20.1&amp;nbsp;&amp;nbsp;&amp;nbsp;Executable Files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#executable-formats" id="id247"&gt;20.2&amp;nbsp;&amp;nbsp;&amp;nbsp;Executable Formats&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#execution-domains" id="id248"&gt;20.3&amp;nbsp;&amp;nbsp;&amp;nbsp;Execution Domains&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#the-exec-functions" id="id249"&gt;20.4&amp;nbsp;&amp;nbsp;&amp;nbsp;The exec Functions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id47" id="id250"&gt;21&amp;nbsp;&amp;nbsp;&amp;nbsp;总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
内存 c2, c8, c9
进程 c3, c7
中断 c4,
IO: 12, 13, 14, 15, 16, 17, 18
其它: 5, 6, 10, 11, 19, 20
&lt;/pre&gt;
&lt;p&gt;内存和io是重点, 没有网络中, 如epoll的实现.&lt;/p&gt;
&lt;p&gt;c1-c9看的比较认真, 有笔记, 后面看的比较粗.&lt;/p&gt;
&lt;div class="section" id="c1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id48"&gt;1&amp;nbsp;&amp;nbsp;&amp;nbsp;c1&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id1"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id49"&gt;1.1&amp;nbsp;&amp;nbsp;&amp;nbsp;微内核&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;微内核vs巨内核 微内核慢，linux就是微内核&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="user-mode-kernel-mode"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id50"&gt;1.2&amp;nbsp;&amp;nbsp;&amp;nbsp;user mode &amp;amp; kernel mode&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;两个模式是cpu提供的功能。应该理解为在两个模式下cpu可以使用的指令是不同的。或者说可以访问的内存区是不同的。&lt;/li&gt;
&lt;li&gt;用户程序调用系统调用，然后系统调用的使用cpu的指令进行切换到内核模式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注意&lt;/strong&gt; : 这是同一个进程, 一个进程可以运行在用户模式也可以在内核模式。&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="" src="/imgs/ulk_user_and_kernel_mode.png" /&gt;
&lt;img alt="" src="/imgs/ulk_user_and_kernel_mode_2.png" /&gt;
&lt;p&gt;这个图很好的解释了什么情况下会从user mode 进入kernel mode:&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;user mode 程序调用系统调用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;时钟中断(此时内核会调用scheduler, 找一个程序来run)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;设备中断(此时内核处理设备响应)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;如对读磁盘操作, 这里把磁盘缓冲区的内容读到内存&lt;/li&gt;
&lt;li&gt;对写磁盘操作, 这里检查写是否成功.&lt;/li&gt;
&lt;li&gt;接下来可以调用scheduler, 把那个Process 唤起就是 scheduler 的问题了&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;内存越界等(Excption)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id51"&gt;1.3&amp;nbsp;&amp;nbsp;&amp;nbsp;内核可重入&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;内核是可重入的, 意思就是说, 在中断中处理中, 可以再接受中断(某些中断当然是不可重入的)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id52"&gt;1.4&amp;nbsp;&amp;nbsp;&amp;nbsp;内核线程&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;如oom killer&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id53"&gt;1.5&amp;nbsp;&amp;nbsp;&amp;nbsp;内核和用户内存&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;现在的理解是这样的:&lt;/p&gt;
&lt;img alt="" src="/imgs/ulk_user_and_kernel_space.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="zombie"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id54"&gt;1.6&amp;nbsp;&amp;nbsp;&amp;nbsp;僵尸进程 (zombie)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;这样产生的:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;父进程fork后, 不去wait它(比如父进程在做sleep() 或其它操作, 总之就是没有调用wait()). 这也就产生了僵尸进程&lt;/li&gt;
&lt;li&gt;如果父进程挂掉, 这个进程就会被挂到init(1), init总是会wait() 它, 所以不会产生僵尸进程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;代码, 子进程退出后, 父进程没去wait它:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
int main(){
    int pid = fork();
    if(pid== 0) {
        fprintf(stderr, &amp;quot;child pid: %d\n&amp;quot;, getpid());
        sleep(1);
        fprintf(stderr, &amp;quot;child finish\n&amp;quot;);
    } else {                //Parent
        fprintf(stderr, &amp;quot;parent pid: %d\n&amp;quot;, getpid());
        sleep(100);
        fprintf(stderr, &amp;quot;parent finish\n&amp;quot;);
    }
    return 0;
}
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
$ ./a.out
parent pid: 1221
child pid: 1222
child finish
&lt;/pre&gt;
&lt;p&gt;此时pstree看, 子进程挂到 父进程, 状态已经变成Z:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
init(1)-+-NetworkManager(1022)-+-dhclient(28101)
        |                      |-bash(31597)---a.out(1221)---a.out(1222)

$ ps  -elF
1 Z ning      1222  1221  0  80   0 -     0 exit       0   1 13:16 pts/1    00:00:00 [a.out] &amp;lt;defunct&amp;gt;
&lt;/pre&gt;
&lt;div class="section" id="init"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id55"&gt;1.6.1&amp;nbsp;&amp;nbsp;&amp;nbsp;如果父进程先结束, 子进程会继续, 并且挂到init上&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;代码:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
int main(){
    int pid = fork();
    if(pid== 0) {
        fprintf(stderr, &amp;quot;child pid: %d\n&amp;quot;, getpid());
        sleep(2*100);
        fprintf(stderr, &amp;quot;child finish\n&amp;quot;);
    } else {                //Parent
        fprintf(stderr, &amp;quot;parent pid: %d\n&amp;quot;, getpid());
        sleep(1);
        fprintf(stderr, &amp;quot;parent finish\n&amp;quot;);
    }
    return 0;
}
&lt;/pre&gt;
&lt;p&gt;父进程先退出, 子进程后退出:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ ./a.out
parent pid: 928
child pid: 929
parent finish
&lt;/pre&gt;
&lt;p&gt;此时pstree看, 子进程已经挂到 init上了, 但是这时状态不是Z:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
init(1)-+-NetworkManager(1022)-+-dhclient(28101)
        |                      `-{NetworkManager}(1851)
        |-a.out(929)

$ ps  -elF
F S UID        PID  PPID  C PRI  NI ADDR SZ WCHAN    RSS PSR STIME TTY          TIME CMD
4 S root         1     0  0  80   0 -  5961 poll_s  1888   0 Jan03 ?        00:00:01 /sbin/init
1 S ning       929     1  0  80   0 -  2936 hrtime   320   3 13:11 pts/1    00:00:00 ./a.out
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id56"&gt;1.6.2&amp;nbsp;&amp;nbsp;&amp;nbsp;清除僵尸进程&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;僵尸进程本身是不能被kill的(因为本来就是死的):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ning&amp;#64;ning-laptop:~/idning/langtest/c/zombie-processes$ ps -elF | grep a.out
0 S ning     20696 20023  0  80   0 -   969 hrtime   428   1 08:53 pts/16   00:00:00 ./a.out
1 Z ning     20697 20696  0  80   0 -     0 exit       0   3 08:53 pts/16   00:00:00 [a.out] &amp;lt;defunct&amp;gt;
ning&amp;#64;ning-laptop:~/idning/langtest/c/zombie-processes$ kill 20697                                           (不能kill掉)
ning&amp;#64;ning-laptop:~/idning/langtest/c/zombie-processes$ ps -elF | grep a.out
0 S ning     20696 20023  0  80   0 -   969 hrtime   428   1 08:53 pts/16   00:00:00 ./a.out
1 Z ning     20697 20696  0  80   0 -     0 exit       0   3 08:53 pts/16   00:00:00 [a.out] &amp;lt;defunct&amp;gt;
ning&amp;#64;ning-laptop:~/idning/langtest/c/zombie-processes$ kill 20696                                           (解决方法是kill掉附进程)
ning&amp;#64;ning-laptop:~/idning/langtest/c/zombie-processes$ ps -elF | grep a.out
nothing
&lt;/pre&gt;
&lt;p&gt;解决方法是kill掉父进程, 这样子进程会挂到 init, 并被init wait()&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id57"&gt;1.6.3&amp;nbsp;&amp;nbsp;&amp;nbsp;注意&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;父进程不一定非要调用wait, 忽略 &lt;tt class="docutils literal"&gt;SIGCHILD&lt;/tt&gt; 也可以(wait就是等待 &lt;tt class="docutils literal"&gt;SIGCHILD&lt;/tt&gt; ) 参考:&lt;/p&gt;
&lt;p&gt;引用:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
僵尸进程简而言之就是：子进程退出时，父进程并未对其发出的SIGCHILD信号进行适当处理，导致子进程停留在僵死状态等待其父进程为其收尸，这个状态下的子进程就是僵死进程。

在fork()/execve()过程中，假设子进程结束时父进程仍存在，而父进程fork()之前既没安装SIGCHLD信号处理函数调用waitpid()等待子进程结束，又没有显式忽略该信号，则子进程成为僵死进程，无法正常结束，此时即使是root身份kill -9也不能杀死僵死进程。补救办法是杀死僵尸进程的父进程(僵死进程的父进程必然存在)，僵死进程成为&amp;quot;孤儿进程&amp;quot;，过继给1号进程init，init始终会负责清理僵死进程。

在unix术语中，一个已经终止但是其父进程尚未对其进行善后处理（获取终止子进程的有关信息，释放它仍占用的资源）的进程称为僵尸进程(zombie)。
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="c2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id58"&gt;2&amp;nbsp;&amp;nbsp;&amp;nbsp;c2 内存寻址(段页管理)&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;段主要是 隔离的作用!&lt;/li&gt;
&lt;li&gt;linux里面用的段主要是4个:
用户代码段, 用户数据段, 内核代码段, 内核数据段&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id59"&gt;2.1&amp;nbsp;&amp;nbsp;&amp;nbsp;逻辑地址, 线性地址, 物理地址&lt;/a&gt;&lt;/h3&gt;
&lt;pre class="literal-block"&gt;
+-----------------+               +-----------------+            +-----------------+
|                 |   分段单元    |                 |  分页单元  |                 |
|  逻辑地址       |  ----------&amp;gt;  |     线性地址    | ---------&amp;gt; |    物理地址     |
|                 |               |                 |            |                 |
+-----------------+               +-----------------+            +-----------------+
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id60"&gt;2.2&amp;nbsp;&amp;nbsp;&amp;nbsp;硬件中的分段&lt;/a&gt;&lt;/h3&gt;
&lt;div class="section" id="id9"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id61"&gt;2.2.1&amp;nbsp;&amp;nbsp;&amp;nbsp;80286 后的实模式/保护模式&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;一般系统刚启动的时候是在实模式,&lt;/p&gt;
&lt;p&gt;正常运行中, 是保护模式,&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id10"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id62"&gt;2.2.2&amp;nbsp;&amp;nbsp;&amp;nbsp;保护模式中的地址&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;逻辑地址是段选择器和offset的组合:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="segment-selectors"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id63"&gt;2.2.3&amp;nbsp;&amp;nbsp;&amp;nbsp;段选择器(Segment Selectors)&lt;/a&gt;&lt;/h4&gt;
&lt;pre class="literal-block"&gt;
+------------------+                +----------------+
|                  |                |                |
|    段选择器      |       +        |   offset       |
|                  |                |                |
+------------------+                +----------------+
&lt;/pre&gt;
&lt;p&gt;段选择器有16 bit:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
15                                        3   2   1  0
+-------------------------------------------+---+------+
|                   index                   |TI | RPL  |
+-------------------------------------------+---+------+

TI: Table Indicator
RPL Requestor Privilege Level
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id11"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id64"&gt;2.2.4&amp;nbsp;&amp;nbsp;&amp;nbsp;段寄存器&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;在cpu中有专门设置的段寄存器, 用于存放段选择器:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
cs: 代码段 (code)
    有两个bit表示 CPU Privilege Level(CPL)   &amp;lt;Linux 只用了0和3 (内核态/用户态)&amp;gt;
ss: 栈段   (stack)
ds: 数据段 (全局和static数据)
es
fs
gs
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="segment-descriptors"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id65"&gt;2.2.5&amp;nbsp;&amp;nbsp;&amp;nbsp;段描述符(Segment Descriptors)&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;存放在 &lt;tt class="docutils literal"&gt;GDT/LDT&lt;/tt&gt; 中.&lt;/p&gt;
&lt;p&gt;8byte的段描述符:&lt;/p&gt;
&lt;img alt="" src="/imgs/ulk-Segment-Descriptors.png" /&gt;
&lt;div class="section" id="gdt-ldt"&gt;
&lt;h5&gt;&lt;a class="toc-backref" href="#id66"&gt;2.2.5.1&amp;nbsp;&amp;nbsp;&amp;nbsp;GDT/LDT&lt;/a&gt;&lt;/h5&gt;
&lt;pre class="literal-block"&gt;
GDT: 通常一个系统只有一个
LDT: 如果每个进程需要额外的段
&lt;/pre&gt;
&lt;p&gt;gdtr寄存器: 指向内存中存放的GDT
ldtr集群器: 指向内存中存放的LDT&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id12"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id67"&gt;2.2.6&amp;nbsp;&amp;nbsp;&amp;nbsp;段选择器, 段描述符的关系&lt;/a&gt;&lt;/h4&gt;
&lt;img alt="" src="/imgs/ulk-Segment-Descriptors-and-Segment-Selector.png" /&gt;
&lt;p&gt;段选择器的字段:&lt;/p&gt;
&lt;table class="docutils field-list" frame="void" rules="none"&gt;
&lt;col class="field-name" /&gt;
&lt;col class="field-body" /&gt;
&lt;tbody valign="top"&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;index:&lt;/th&gt;&lt;td class="field-body"&gt;Identifies the Segment Descriptor entry contained in the GDT or in the LDT (described further in the text following this table).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;TI:&lt;/th&gt;&lt;td class="field-body"&gt;Table Indicator: specifies whether the Segment Descriptor is included in the GDT (TI = 0) or in the LDT (TI = 1).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;RPL:&lt;/th&gt;&lt;td class="field-body"&gt;Requestor Privilege Level: specifies the Current Privilege Level of the CPU when the corresponding Segment Selector is loaded into the cs register; it also may be used to selectively weaken the processor privilege level when accessing data segments (see Intel documentation for details).&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;计算:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
gdtr 中存放的地址 +  段选择器中index*8 = 段描述符的位置.
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id13"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id68"&gt;2.2.7&amp;nbsp;&amp;nbsp;&amp;nbsp;分段单元: 从逻辑地址到线性地址&lt;/a&gt;&lt;/h4&gt;
&lt;img alt="" src="/imgs/ulk-Translating-a-logical-address.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="linux"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id69"&gt;2.3&amp;nbsp;&amp;nbsp;&amp;nbsp;Linux 中的分段&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;因为分段和分页功能上比较重复, Linux实现中对分段用的很少&lt;/p&gt;
&lt;p&gt;Linux 2.6 只在80x86架构下使用分段, 只使用4个段:&lt;/p&gt;
&lt;img alt="" src="/imgs/ulk-linux-segment.png" /&gt;
&lt;p&gt;这4个段的线性地址空间都是 &lt;tt class="docutils literal"&gt;0 - &lt;span class="pre"&gt;2^32-1&lt;/span&gt;&lt;/tt&gt; , 意味着&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;所有的进程(不管用户模式还是内核模式) 都使用相同的线性地址空间.&lt;/li&gt;
&lt;li&gt;因为开始于0x0000000, 线性地址 = 逻辑地址是一样的&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="section" id="linux-gdt"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id70"&gt;2.3.1&amp;nbsp;&amp;nbsp;&amp;nbsp;Linux 中的GDT&lt;/a&gt;&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;单核系统只有一个GDT&lt;/li&gt;
&lt;li&gt;多核系统, 对每个核有一个GDT&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each GDT includes 18 segment descriptors and 14 null, unused, or reserved entries&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="linuxldt"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id71"&gt;2.3.2&amp;nbsp;&amp;nbsp;&amp;nbsp;Linux中的LDT:&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;User Application 不使用LDT, 大家共享一个 &lt;tt class="docutils literal"&gt;default_ldt&lt;/tt&gt;, 可以用 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;modify_ldt()系统调用&lt;/span&gt;&lt;/tt&gt; 来修改ldt, (Wine使用, 模拟window)&lt;/p&gt;
&lt;p&gt;man modify_ldt:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
#include &amp;lt;sys/types.h&amp;gt;
int modify_ldt(int func, void *ptr, unsigned long bytecount);

DESCRIPTION:
modify_ldt()  reads or writes the local descriptor table (ldt) for a process.  The ldt is a per-process memory management table used by the i386 processor.
For more information on this table, see an Intel 386 processor handbook.
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id14"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id72"&gt;2.4&amp;nbsp;&amp;nbsp;&amp;nbsp;硬件中的分页&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;检查对页的访问是否有权限, 如果没有, 产生PageFault exception&lt;/p&gt;
&lt;p&gt;page frame: 物理概念(physical page)&lt;/p&gt;
&lt;p&gt;80x86: 控制寄存器cr0中的PG标志控制是否使用硬件提供的分页机制:&lt;/p&gt;
&lt;p&gt;PG = 0: linear addresses 就是 physical addresses
PG = 1: 使用页表分页.&lt;/p&gt;
&lt;div class="section" id="id15"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id73"&gt;2.4.1&amp;nbsp;&amp;nbsp;&amp;nbsp;常规分页&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;4KB 的page, 两极页表:&lt;/p&gt;
&lt;p&gt;如果用一级页表, 当用户稀疏使用了4G线性地址空间，比如只用了0x00000000和0xFFFFFFFF, 就需要 2^20个页表项 (2^32/4k) 需要4M内存.
如果用2级页表, 如果用户实际用的内存较少, 页表所需空间就较小&lt;/p&gt;
&lt;p&gt;当然, 如果一个进程使用全部4G空间, 那么一级页表和两极页表都需要占用相同的空间, (二级页表还更多些)&lt;/p&gt;
&lt;p&gt;分页机制示意图:&lt;/p&gt;
&lt;img alt="" src="/imgs/ulk-paging.png" /&gt;
&lt;p&gt;每个进程都必须有自己的 &lt;tt class="docutils literal"&gt;Page Dirrectory&lt;/tt&gt;, 但是只需要部分的 &lt;tt class="docutils literal"&gt;Page Table&lt;/tt&gt; .&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;Page Dirrectory&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;Page Table&lt;/tt&gt; 都是大小都是1024个页表条目. 页表条目包含:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;Present flag&lt;/tt&gt; : 是否在内存中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;20bit物理地址&lt;/tt&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Dirty flag&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Read/Write flag&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;User/Supervisor&lt;/tt&gt; flag (注意, 只有两种权限级别, 不像段映射, 有4个权限级别)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;标志为0时, 只允许 CPL &amp;lt; 3 的时候访问(在Linux里面就是内核态)&lt;/li&gt;
&lt;li&gt;标志为1时, 总是允许访问.&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id16"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id74"&gt;2.4.2&amp;nbsp;&amp;nbsp;&amp;nbsp;扩展分页&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;允许4M的 &lt;tt class="docutils literal"&gt;page frame&lt;/tt&gt;:&lt;/p&gt;
&lt;img alt="" src="/imgs/ulk-extended-paging.png" /&gt;
&lt;p&gt;相当于省掉了 &lt;tt class="docutils literal"&gt;Page Table&lt;/tt&gt; 这一层.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pae-324g"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id75"&gt;2.4.3&amp;nbsp;&amp;nbsp;&amp;nbsp;PAE: 允许在32位系统上访问大于4G内存&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Physical Address Extension&lt;/p&gt;
&lt;p&gt;从 &lt;tt class="docutils literal"&gt;Pentium Pro&lt;/tt&gt; 开始, Intel 把地址总线宽度从 32 升级到36, 允许访问2^36=64G内存.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
PAE is activated by setting the Physical Address Extension (PAE) flag in the cr4 con- trol register.
增加了:
A new level of Page Table called the Page Directory Pointer Table (PDPT)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id17"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id76"&gt;2.4.4&amp;nbsp;&amp;nbsp;&amp;nbsp;64位架构&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;64位是 256 TB 地址空间&lt;/p&gt;
&lt;p&gt;64位中, 一般使用48位, 如果依然使用4KB的页, 还剩下48-12=36 bit, 这放在两级页表中, &lt;tt class="docutils literal"&gt;Page Directory&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;Page Table&lt;/tt&gt; 就分别要有2^18条目, 得占用1M空间.&lt;/p&gt;
&lt;p&gt;所以, 64位系统中, 一般使用多级页表:&lt;/p&gt;
&lt;img alt="" src="/imgs/ulk-paging-level.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="hardware-cache"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id77"&gt;2.4.5&amp;nbsp;&amp;nbsp;&amp;nbsp;Hardware Cache&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Today’s microprocessors have clock rates of several gigahertz, while dynamic RAM (DRAM) chips have access times in the range of hundreds of clock cycles.&lt;/p&gt;
&lt;p&gt;L1 cache, L2 cache 之类&lt;/p&gt;
&lt;div class="section" id="cache-snooping"&gt;
&lt;h5&gt;&lt;a class="toc-backref" href="#id78"&gt;2.4.5.1&amp;nbsp;&amp;nbsp;&amp;nbsp;cache snooping:&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;在多核架构中, 每个核有自己的cache, 一个核在写数据到cache时, 需要确保另一个核没有对应着一块内存的cache.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="tlb-translation-lookaside-buffers"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id79"&gt;2.4.6&amp;nbsp;&amp;nbsp;&amp;nbsp;TLB(Translation Lookaside Buffers)&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;80x86 中: to speed up linear address translation&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id18"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id80"&gt;2.5&amp;nbsp;&amp;nbsp;&amp;nbsp;Linux 中的分页&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;对32位架构和64位架构使用同样的分页模型&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;2.6.10: 3级页表&lt;/li&gt;
&lt;li&gt;2.6.11: 4级页表&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4级页表:&lt;/p&gt;
&lt;img alt="" src="/imgs/ulk-paging-level-in-linux.png" /&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;对于32位系统: Linux直接把Upper Dirrectory 和Middle Directory 设为只有1个条目, 这样就可以变为2级页表.&lt;/li&gt;
&lt;li&gt;对于32位+PAE的系统: Linux使用3级页表,&lt;/li&gt;
&lt;li&gt;对于64位系统, 使用3或4级页表. (见前面的表格)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="layout"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id81"&gt;2.5.1&amp;nbsp;&amp;nbsp;&amp;nbsp;物理内存Layout&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Linux 内核通常在RAM的0x00100000(from the second megabyte)&lt;/p&gt;
&lt;p&gt;因为第一M通常是BIOS,&lt;/p&gt;
&lt;p&gt;启动时, 内核向BIOS查询可用物理内存大小:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
In the early stage of the boot sequence (see Appendix A), the kernel queries the BIOS and learns the size of the physical memory.
&lt;/pre&gt;
&lt;p&gt;之后内核调用 &lt;tt class="docutils literal"&gt;machine_specific_memory_setup()&lt;/tt&gt; 构造可用空间的一个列表, 例如&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Start      End        Type
0x00000000 0x0009ffff Usable
0x000f0000 0x000fffff Reserved
0x00100000 0x07feffff Usable
0x07ff0000 0x07ff2fff ACPI data
0x07ff3000 0x07ffffff ACPI NVS
0xffff0000 0xffffffff Reserved
&lt;/pre&gt;
&lt;p&gt;arch/i386/kernel/setup.c:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
void __init setup_arch(char **cmdline_p)
{

    print_memory_map(machine_specific_memory_setup());
    max_low_pfn = setup_memory();

    paging_init();

    register_memory();
}
&lt;/pre&gt;
&lt;p&gt;内核加载后, 一般占3M空间, 也分为代码段, 数据段.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="process-page-table"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id82"&gt;2.5.2&amp;nbsp;&amp;nbsp;&amp;nbsp;Process Page Table&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;注意这里说的是线性地址空间:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Linear addresses from 0x00000000 to 0xbfffffff can be addressed when the process runs in either User or Kernel Mode.&lt;/li&gt;
&lt;li&gt;Linear addresses from 0xc0000000 to 0xffffffff can be addressed only when the process runs in Kernel Mode.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="kernel-page-table"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id83"&gt;2.5.3&amp;nbsp;&amp;nbsp;&amp;nbsp;Kernel Page Table&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The kernel maintains a set of page tables for its own use, rooted at a so-called master kernel Page Global Directory.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id19"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id84"&gt;2.6&amp;nbsp;&amp;nbsp;&amp;nbsp;小结&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Linux 中所有的进程(不管用户模式还是内核模式) 都使用相同的线性地址空间: &lt;tt class="docutils literal"&gt;0 - &lt;span class="pre"&gt;2^32-1&lt;/span&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="c3-processes"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id85"&gt;3&amp;nbsp;&amp;nbsp;&amp;nbsp;c3 Processes&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Processes are often called tasks or threads in the Linux source code.&lt;/p&gt;
&lt;p&gt;LWP: Lightweight Processes, Linux 的多线程就是用LWP实现的.&lt;/p&gt;
&lt;div class="section" id="processes-lightweight-processes-and-threads"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id86"&gt;3.1&amp;nbsp;&amp;nbsp;&amp;nbsp;Processes, Lightweight Processes, and Threads&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;老的Unix: 进程通过fork产生新进程, 共享代码段, 有不同的数据段(Copy on Write)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;不支持multithreaded, 内核看到的都是进程, 线程的概念是在用户态实现的(pthread)&lt;/li&gt;
&lt;li&gt;老的pthread库是用这种实现.&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;新的Unix: 直接支持多线程,&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;user programs having many relatively independent execution flows sharing a large portion of the application data structures&lt;/li&gt;
&lt;li&gt;In such systems, a process is composed of several user threads&lt;/li&gt;
&lt;li&gt;Linux 用 &lt;tt class="docutils literal"&gt;Lightweight processes&lt;/tt&gt; 支持multithreaded&lt;/li&gt;
&lt;li&gt;Examples of POSIX-compliant pthread libraries that use Linux’s lightweight processes are LinuxThreads, Native POSIX Thread Library (NPTL), and IBM’s Next Generation Posix Threading Package (NGPT).&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In Linux a thread group is basically a set of lightweight processes that implement a multithreaded application and act as a whole with regards to some system calls such as getpid(), kill(), and _exit().&lt;/p&gt;
&lt;div class="section" id="pthread"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id87"&gt;3.1.1&amp;nbsp;&amp;nbsp;&amp;nbsp;关于pthread&lt;/a&gt;&lt;/h4&gt;
&lt;pre class="literal-block"&gt;
The code below comes from &amp;quot;Advanced Programing in Unix Environment&amp;quot;, it creates a new thread, and prints the process id and thread id for main and new threads.

In the book, it said that in linux, the output of this code would show that two threads have different process ids, because pthread uses lightweight process to emulate thread. But when I ran this code in Ubuntu 12.04, it has kernel 3.2, printed the same pid.

so, does the new linux kernel change the internal implementation of pthread?

#include &amp;quot;apue.h&amp;quot;
#include &amp;lt;pthread.h&amp;gt;

pthread_t ntid;

void printids(const char *s) {
  pid_t     pid;
  pthread_t tid;
  pid = getpid();
  tid = pthread_self();
  printf(&amp;quot;%s pid %u tid %u (0x%x)\n&amp;quot;,
         s, (unsigned int)pid, (unsigned int)tid, (unsigned int)tid);
}

void *thread_fn(void* arg) {
  printids(&amp;quot;new thread: &amp;quot;);
  return (void *)0;
}

int main(void) {
  int err;
  err = pthread_create(&amp;amp;ntid, NULL, thread_fn, NULL);
  if (err != 0)
    err_quit(&amp;quot;can't create thread: %s\n&amp;quot;, strerror(err));
  printids(&amp;quot;main thread: &amp;quot;);
  sleep(1);
  return 0;
}
&lt;/pre&gt;
&lt;p&gt;On Linux pthread uses the clone syscall with a special flag CLONE_THREAD.&lt;/p&gt;
&lt;p&gt;See the documentation of clone syscall:&lt;/p&gt;
&lt;p&gt;CLONE_THREAD (since Linux 2.4.0-test8):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
If CLONE_THREAD is set, the child is placed in the same thread group as the calling process. To make the remainder of the discussion of CLONE_THREAD more readable, the term &amp;quot;thread&amp;quot; is used to refer to the processes within a thread group.

Thread groups were a feature added in Linux 2.4 to support the POSIX threads notion of a set of threads that share a single PID. Internally, this shared PID is the so-called thread group identifier (TGID) for the thread group. Since Linux 2.4, calls to getpid(2) return the TGID of the caller.
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="linuxthreads-nptl"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id88"&gt;3.1.2&amp;nbsp;&amp;nbsp;&amp;nbsp;LinuxThreads 和NPTL&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;一个系统里面的pthread实现只会是两种之一, 可以用下面这个命令查询本系统使用的pthread版本:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
getconf GNU_LIBPTHREAD_VERSION
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id20"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id89"&gt;3.1.3&amp;nbsp;&amp;nbsp;&amp;nbsp;参考&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;TODO:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://computing.llnl.gov/tutorials/pthreads/"&gt;https://computing.llnl.gov/tutorials/pthreads/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;可以参考这本书: &lt;a class="reference external" href="http://maxim.int.ru/bookshelf/PthreadsProgram/htm/r_47.html"&gt;http://maxim.int.ru/bookshelf/PthreadsProgram/htm/r_47.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="process-descriptor"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id90"&gt;3.2&amp;nbsp;&amp;nbsp;&amp;nbsp;Process Descriptor&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;进程描述符&lt;/p&gt;
&lt;img alt="" src="/imgs/ulk-process-descriptor.png" /&gt;
&lt;p&gt;注意内核里面 没有thread 的概念.&lt;/p&gt;
&lt;p&gt;进程到Process Descriptor 的一一对应关系, 是通过 Process Descriptor结构的地址值确定的.&lt;/p&gt;
&lt;div class="section" id="id21"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id91"&gt;3.2.1&amp;nbsp;&amp;nbsp;&amp;nbsp;能有多少个进程&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;by default, the maximum PID number is 32,767 (PID_MAX_DEFAULT - 1) , 32位系统最多3w个进程.&lt;/p&gt;
&lt;p&gt;the system administrator may reduce this limit by writing a smaller value into the /proc/sys/kernel/pid_max file&lt;/p&gt;
&lt;p&gt;In 64-bit architectures, the system administrator can enlarge the maximum PID number up to 4,194,303&lt;/p&gt;
&lt;p&gt;因为内核分配一个pid的时候, 需要确保这个pid没有被用过, 所以需要一个bitmap, 32767个bit, 正好是4k(一个page).
在64位系统中, 如果pid_max设置为 4,194,303, 就可能需要0.5M内存做bitmap, 这些内存一旦用了就不会被释放的.&lt;/p&gt;
&lt;p&gt;我们的机器一般都是默认的32767&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pidthread-group"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id92"&gt;3.2.2&amp;nbsp;&amp;nbsp;&amp;nbsp;pid在thread group中&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;在一个thread group 中的进程, 从用户看来pid相等, 实际上, 内核中它们的pid不相等, 是因为getpid 返回的是 &lt;tt class="docutils literal"&gt;tgid&lt;/tt&gt; .&lt;/p&gt;
&lt;p&gt;To comply with this standard, Linux makes use of thread groups. The identifier shared by the threads is the PID of the thread group leader, that is, the PID of the first lightweight process in the group;&lt;/p&gt;
&lt;p&gt;it is stored in the tgid field of the process descriptors. The getpid() system call returns the value of &lt;tt class="docutils literal"&gt;tgid&lt;/tt&gt; relative to the current process instead of the value of pid, so all the threads of a multithreaded application share the same identifier&lt;/p&gt;
&lt;p&gt;注意: 但是 &lt;tt class="docutils literal"&gt;kill()&lt;/tt&gt; 的时候用的是pid.&lt;/p&gt;
&lt;p&gt;因为内核中 内核栈后面有意个指向 &lt;tt class="docutils literal"&gt;Process Descriptor&lt;/tt&gt; 的指针, 所以:&lt;/p&gt;
&lt;p&gt;the kernel can easily obtain the address of the thread_info Structure of the process currently running on a CPU from the value of the esp register:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
current_thread_info()  这个函数用的非常多
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="process-list"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id93"&gt;3.2.3&amp;nbsp;&amp;nbsp;&amp;nbsp;process list&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;用内核的双链表结构&lt;/p&gt;
&lt;p&gt;不同优先级:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
truct list_head [140];  #queue The 140 heads of the priority lists
&lt;/pre&gt;
&lt;p&gt;四个hash表用于从id到 Process Descriptor 的映射:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Hash table type     Field name  Description
PIDTYPE_PID         pid         PID of the process
PIDTYPE_TGID        tgid        PID of thread group leader process
PIDTYPE_PGID        pgrp        PID of the group leader process
PIDTYPE_SID         session     PID of the session leader process
&lt;/pre&gt;
&lt;p&gt;用于pid的hash函数:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
unsigned long hash_long(unsigned long val, unsigned int bits)
{
    unsigned long hash = val * 0x9e370001UL;
    return hash &amp;gt;&amp;gt; (32 - bits);
}
&lt;/pre&gt;
&lt;p&gt;这个数字0x9e370001UL, 是一个质数. 而且比较容易算(二进制中1的位数较少)&lt;/p&gt;
&lt;p&gt;A process wishing to wait for a specific condition can invoke any of the functions shown in the following list.:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
The sleep_on() function operates on the current process:
void sleep_on(wait_queue_head_t *wq)
{
    wait_queue_t wait;
    init_waitqueue_entry(&amp;amp;wait, current);
    current-&amp;gt;state = TASK_UNINTERRUPTIBLE;
    add_wait_queue(wq,&amp;amp;wait); /* wq points to the wait queue head */
    schedule();
    remove_wait_queue(wq, &amp;amp;wait);
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="process"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id94"&gt;3.2.4&amp;nbsp;&amp;nbsp;&amp;nbsp;Process 资源限制&lt;/a&gt;&lt;/h4&gt;
&lt;table class="docutils field-list" frame="void" rules="none"&gt;
&lt;col class="field-name" /&gt;
&lt;col class="field-body" /&gt;
&lt;tbody valign="top"&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;RLIMIT_AS:&lt;/th&gt;&lt;td class="field-body"&gt;The maximum size of process address space, in bytes. The kernel checks this value when the
process uses malloc( ) or a related function to enlarge its address space (see the section
The Process’s Address Space” in Chapter 9).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;RLIMIT_CORE:&lt;/th&gt;&lt;td class="field-body"&gt;The maximum core dump file size, in bytes. The kernel checks this value when a process is
aborted, before creating a core file in the current directory of the process (see the section
Actions Performed upon Delivering a Signal” in Chapter 11). If the limit is 0, the kernel
won’t create the file.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;RLIMIT_CPU:&lt;/th&gt;&lt;td class="field-body"&gt;The maximum CPU time for the process, in seconds. If the process exceeds the limit, the ker-
nel sends it a SIGXCPU signal, and then, if the process doesn’t terminate, a SIGKILL sig-
nal (see Chapter 11).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;RLIMIT_DATA:&lt;/th&gt;&lt;td class="field-body"&gt;The maximum &lt;tt class="docutils literal"&gt;heap size&lt;/tt&gt; , in bytes. The kernel checks this value before expanding the heap of
the process (see the section “Managing the Heap” in Chapter 9).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;RLIMIT_FSIZE:&lt;/th&gt;&lt;td class="field-body"&gt;The maximum file size allowed, in bytes. If the process tries to enlarge a file to a size greater
than this value, the kernel sends it a SIGXFSZ signal.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;RLIMIT_LOCKS:&lt;/th&gt;&lt;td class="field-body"&gt;Maximum number of file locks (currently, not enforced).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;RLIMIT_NOFILE:&lt;/th&gt;&lt;td class="field-body"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="process-switch"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id95"&gt;3.3&amp;nbsp;&amp;nbsp;&amp;nbsp;Process Switch&lt;/a&gt;&lt;/h3&gt;
&lt;div class="section" id="hardware-context"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id96"&gt;3.3.1&amp;nbsp;&amp;nbsp;&amp;nbsp;Hardware Context 切换&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;2.6以前, 使用 &lt;tt class="docutils literal"&gt;far jmp&lt;/tt&gt; 来实现硬件层次的切换, 自动保存寄存器的值.
But Linux 2.6 uses software to perform a process switch for the following reasons:&lt;/p&gt;
&lt;p&gt;总之就是保存各种寄存器. MMX&amp;lt; FPU, SSE之类.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="schedule"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id97"&gt;3.3.2&amp;nbsp;&amp;nbsp;&amp;nbsp;schedule()  函数&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;every process switch consists of two steps:
1. Switching the Page Global Directory to install a new address space; we’ll describe this step in Chapter 9.
2. Switching the Kernel Mode stack and the hardware context, which provides all the information needed by the kernel to execute the new process, including the CPU registers.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="create-processes"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id98"&gt;3.4&amp;nbsp;&amp;nbsp;&amp;nbsp;Create Processes&lt;/a&gt;&lt;/h3&gt;
&lt;div class="section" id="clone"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id99"&gt;3.4.1&amp;nbsp;&amp;nbsp;&amp;nbsp;内核底层的clone&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;各种flag:&lt;/p&gt;
&lt;table class="docutils field-list" frame="void" rules="none"&gt;
&lt;col class="field-name" /&gt;
&lt;col class="field-body" /&gt;
&lt;tbody valign="top"&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;CLONE_VM:&lt;/th&gt;&lt;td class="field-body"&gt;Shares the memory descriptor and all Page Tables (see Chapter 9).
共享地址空间.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;CLONE_FS:&lt;/th&gt;&lt;td class="field-body"&gt;Shares the table that identifies the root directory and the current working directory, as
well as the value of the bitmask used to mask the initial file permissions of a new file
(the so-called file umask).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;CLONE_FILES:&lt;/th&gt;&lt;td class="field-body"&gt;Shares the table that identifies the open files (see Chapter 12).
共享打开的文件fd.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;CLONE_SIGHAND:&lt;/th&gt;&lt;td class="field-body"&gt;Shares the tables that identify the signal handlers and the blocked and pending signals
(see Chapter 11). If this flag is true, the CLONE_VM flag must also be set.
共享sighandler(比如nohup 先设置了SIGHANDLER, 再打开子进程的时候, 肯定就设置了这个标记)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;CLONE_PTRACE:&lt;/th&gt;&lt;td class="field-body"&gt;If traced, the parent wants the child to be traced too. Furthermore, the debugger may
want to trace the child on its own; in this case, the kernel forces the flag to 1.
跟踪模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;CLONE_VFORK:&lt;/th&gt;&lt;td class="field-body"&gt;Set when the system call issued is a vfork( ) (see later in this section).
...&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;CLONE_STOPPED:&lt;/th&gt;&lt;td class="field-body"&gt;Forces the child to start in the TASK_STOPPED state.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="clone-fork-and-vfork"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id100"&gt;3.4.2&amp;nbsp;&amp;nbsp;&amp;nbsp;clone( ), fork( ), and vfork( )&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;clone 创建线程, 基本上就是上面sys_clone系统调用.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;fork: 用clone实现, 设置了SIGCHILD, 所有的flag都未设置 (TODO: ? 难道CLONE_SIGHAND也没设置?)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;它的chile_stack参数是父进程当前堆栈指针(所以创建完成后, 父子两个进程的堆栈指针是一样的.)&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;copy on write&lt;/tt&gt; 保证堆栈上有写操作的时候, 父子进程就会使用不同的堆栈.&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;vfork (create a child process and block parent)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;设置SIGCHILD, CLONE_VM, CLONE_VFORK,&lt;/li&gt;
&lt;li&gt;vfork 阻塞父进程的执行, 一直到子进程退出或执行一个新的程序为止.&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="man-clone"&gt;
&lt;h5&gt;&lt;a class="toc-backref" href="#id101"&gt;3.4.2.1&amp;nbsp;&amp;nbsp;&amp;nbsp;man clone(库函数)&lt;/a&gt;&lt;/h5&gt;
&lt;pre class="literal-block"&gt;
#define _GNU_SOURCE
#include &amp;lt;sched.h&amp;gt;

int clone(int (*fn)(void *), void *child_stack,
          int flags, void *arg, ...
          /* pid_t *ptid, struct user_desc *tls, pid_t *ctid */ );

 It is actually a library function layered on top of the underlying clone() system call, hereinafter referred to as sys_clone.
 (这个clone是一个library函数, 下层是通过sys_clone系统调用实现, sys_clone没有 fn, arg参数, 这两个参数是 clone这个库函数加上的.)

 这个clone是用于实现thread的. 允许设置共享内存, 栈空间, 栈位置等.
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="do-fork"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id102"&gt;3.4.3&amp;nbsp;&amp;nbsp;&amp;nbsp;do_fork() 函数&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;do_fork() 负责处理clone(), fork(), vfork() 系统调用.&lt;/p&gt;
&lt;p&gt;几个重要步骤:
1. 查找pidmap_array 位图, 为子进程分配新的pid
2. If the child will run on the &lt;strong&gt;same CPU&lt;/strong&gt; as the parent, and parent and child do not share the same set of page tables (CLONE_VM flag cleared), it then forces the child to run before the parent by inserting it into the parent’s runqueue right before the parent.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This simple step yields better performance if the child flushes its address space and executes a new program right after the forking. If we let the parent run first, the Copy On Write mechanism would give rise to a series of unnecessary page duplications.&lt;/p&gt;
&lt;p&gt;这种情况, 强迫 子进程先运行,&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id22"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id103"&gt;3.5&amp;nbsp;&amp;nbsp;&amp;nbsp;内核线程&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;内核中, 周期性执行, 只运行在内核态, 用kernel_thread() 函数创建.&lt;/p&gt;
&lt;p&gt;The function essentially invokes do_fork() as follows:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
do_fork(flags|CLONE_VM|CLONE_UNTRACED, 0, pregs, 0, NULL, NULL);
&lt;/pre&gt;
&lt;p&gt;常见的内核线程:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;keventd (also called events)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Executes the functions in the keventd_wq workqueue (see Chapter 4).&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;kapmd&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Handles the events related to the Advanced Power Management (APM).&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;kswapd&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Reclaims memory, as described in the section “Periodic Reclaiming” in Chapter 17.&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;pdflush&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Flushes “dirty” buffers to disk to reclaim memory, as described in the section “The pdflush Kernel Threads” in Chapter 15.&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;kblockd&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Executes the functions in the kblockd_workqueue workqueue. Essentially, it periodically activates the block device drivers, as described in the section “Activating the Block Device Driver” in Chapter 14.&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;ksoftirqd&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Runs the tasklets (see section “Softirqs and Tasklets” in Chapter 4); there is one of these kernel threads for each CPU in the system.&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="pdflush"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id104"&gt;3.5.1&amp;nbsp;&amp;nbsp;&amp;nbsp;pdflush&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;参考: &lt;a class="reference external" href="http://www.westnet.com/~gsmith/content/linux-pdflush.htm"&gt;http://www.westnet.com/~gsmith/content/linux-pdflush.htm&lt;/a&gt;
&lt;a class="reference external" href="http://www.linuxjournal.com/article/6931"&gt;http://www.linuxjournal.com/article/6931&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可能有 2 - 8 个pdflush threads.&lt;/p&gt;
&lt;p&gt;You can monitor how many are active by looking at /proc/sys/vm/nr_pdflush_threads.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Whenever all existing pdflush threads are busy for at least one second, an additional pdflush daemon is spawned.&lt;/li&gt;
&lt;li&gt;Each time a second has passed without any pdflush activity, one of the threads is removed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;调优:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;/proc/sys/vm/dirty_writeback_centisecs (default 500):&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;In hundredths of a second, this is how often pdflush wakes up to write data to disk.&lt;/li&gt;
&lt;li&gt;The default wakes up the two (or more) active threads every five seconds.&lt;/li&gt;
&lt;li&gt;减小这个值会让pdflush 更加激进.&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;/proc/sys/vm/dirty_expire_centiseconds (default 3000):&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;In hundredths of a second, how long data can be in the page cache before it's considered expired and must be written at the next opportunity. Note that this default is very long: a full 30 seconds. That means that under normal circumstances, unless you write enough to trigger the other pdflush method, Linux won't actually commit anything you write until 30 seconds later.&lt;/li&gt;
&lt;li&gt;多长时间以上的page需要flush&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;/proc/sys/vm/dirty_background_ratio (default 10):&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Maximum percentage of active that can be filled with dirty pages before pdflush begins to write them&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;/proc/sys/vm/dirty_ratio (default 40):&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Maximum percentage of total memory that can be filled with dirty pages before processes are forced to write dirty buffers themselves during their time slice instead of being allowed to do more writes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id23"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id105"&gt;3.6&amp;nbsp;&amp;nbsp;&amp;nbsp;进程0 &amp;amp; 进程1&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;进程0: 所有进程的祖先, (idle进程)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;是一个内核线程&lt;/li&gt;
&lt;li&gt;执行 &lt;tt class="docutils literal"&gt;cpu_idle()&lt;/tt&gt; 函数, 本质上是在开中断的情况下重复执行hlt指令&lt;/li&gt;
&lt;li&gt;只有当没有其它进程处于TASK_RUNNING 状态时, 调度程序才选择进程0&lt;/li&gt;
&lt;li&gt;多核系统中, 每个核都有一个进程0 (TODO: how)&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;进程1: init进程, 由进程0创建,&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;创建后调用 execve() 装载init二进制, 不是内核线程.&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="destorying-processes"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id106"&gt;3.7&amp;nbsp;&amp;nbsp;&amp;nbsp;Destorying Processes&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;exit_group() 系统调用, 终止整个线程组, 对应 &lt;tt class="docutils literal"&gt;c库函数exit()&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;exit() 系统调用, 终止一个线程          对应 &lt;tt class="docutils literal"&gt;pthread_exit()&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="c4-interrupts-and-exceptions"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id107"&gt;4&amp;nbsp;&amp;nbsp;&amp;nbsp;c4 Interrupts and Exceptions&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;strong&gt;Interrupts&lt;/strong&gt; Asynchronous interrupts: &lt;strong&gt;硬件&lt;/strong&gt; 发出的.&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;可屏蔽中断&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;不可屏蔽中断&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;极少数. Only a few critical events (such as hardware failures)&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;Exceptions&lt;/tt&gt; Synchronous interrupts: cpu执行完一个指令后发出的&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Processor-detected exceptions (怎么翻译)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Faults&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;如Page Fault Exception Handler&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Traps&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;如debugger&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Aborts&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Programmed exceptions(程序主动触发)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;int&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;int3&lt;/tt&gt; instructions&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;into&lt;/tt&gt; (check for overflow) and &lt;tt class="docutils literal"&gt;bound&lt;/tt&gt;  (check on address bound) instructions&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;exception 和interrupt 是intel的术语.&lt;/p&gt;
&lt;div class="section" id="interrupts-and-exceptions"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id108"&gt;4.1&amp;nbsp;&amp;nbsp;&amp;nbsp;Interrupts and Exceptions&lt;/a&gt;&lt;/h3&gt;
&lt;div class="section" id="interrupt"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id109"&gt;4.1.1&amp;nbsp;&amp;nbsp;&amp;nbsp;Interrupt&lt;/a&gt;&lt;/h4&gt;
&lt;div class="section" id="interrupt-handling"&gt;
&lt;h5&gt;&lt;a class="toc-backref" href="#id110"&gt;4.1.1.1&amp;nbsp;&amp;nbsp;&amp;nbsp;Interrupt handling&lt;/a&gt;&lt;/h5&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;非常轻量, 内核必须尽量处理尽量多的中断, 这样内核就必须把Interrupt Handler 做的很轻.
比如有数据ready时, 中断处理程序只是简单的做一个标记, 然后通知相应的程序, 而不会在中断处理程序里面拷贝数据到内存.&lt;/li&gt;
&lt;li&gt;可重入&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="irqs-interrupt-requests"&gt;
&lt;h5&gt;&lt;a class="toc-backref" href="#id111"&gt;4.1.1.2&amp;nbsp;&amp;nbsp;&amp;nbsp;IRQs (Interrupt ReQuests)&lt;/a&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;每个硬件都有一个 Interrupt ReQuest (IRQ) line 引脚&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;所有硬件的引脚 都连到 &lt;tt class="docutils literal"&gt;Programmable Interrupt Controller(PIC)&lt;/tt&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;PIC (Programmable Interrupt Controller)&lt;/dt&gt;
&lt;dd&gt;&lt;ol class="first last arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Monitors the IRQ lines, checking for raised signals. If two or more IRQ lines are raised, selects the one having the lower pin number.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;If a raised signal occurs on an IRQ line:&lt;/dt&gt;
&lt;dd&gt;&lt;ol class="first last loweralpha simple"&gt;
&lt;li&gt;Converts the raised signal received into a corresponding vector.&lt;/li&gt;
&lt;li&gt;Stores the vector in an Interrupt Controller I/O port, thus allowing the CPU to read it via the data bus.&lt;/li&gt;
&lt;li&gt;Sends a raised signal to the processor INTR pin—that is, issues an interrupt. (给CPU的INTR引脚发信号)&lt;/li&gt;
&lt;li&gt;Waits until the CPU acknowledges the interrupt signal by writing into one of the Programmable Interrupt Controllers (PIC) I/O ports; when this occurs, clears the INTR line.&lt;/li&gt;
&lt;/ol&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Goes back to step 1.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;IRQ线可以屏蔽.&lt;/p&gt;
&lt;div class="section" id="pic"&gt;
&lt;h6&gt;&lt;a class="toc-backref" href="#id112"&gt;4.1.1.2.1&amp;nbsp;&amp;nbsp;&amp;nbsp;老的PIC 的硬件结构&lt;/a&gt;&lt;/h6&gt;
&lt;p&gt;2个8259芯片, 第二个向上连在第一个的一个引脚, 可以处理15个IRQ线&lt;/p&gt;
&lt;p&gt;Traditional PICs are implemented by connecting “in cascade” two 8259A-style external chips. Each chip can handle up to eight different IRQ input lines. Because the INT output line of the slave PIC is connected to the IRQ2 pin of the master PIC, the number of available IRQ lines is limited to 15.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pic-the-advanced-programmable-interrupt-controller-apic"&gt;
&lt;h6&gt;&lt;a class="toc-backref" href="#id113"&gt;4.1.1.2.2&amp;nbsp;&amp;nbsp;&amp;nbsp;新的PIC 的硬件结构 The Advanced Programmable Interrupt Controller (APIC)&lt;/a&gt;&lt;/h6&gt;
&lt;p&gt;Pentium III 以后有APIC&lt;/p&gt;
&lt;p&gt;多核系统中, 每个核都应该可以处理中断, 所以有一个中断总线, APIC和CPU都连到这个总线上, 有总线仲裁/路由机制:&lt;/p&gt;
&lt;img alt="" src="/imgs/ulk-multi-apic.png" /&gt;
&lt;p&gt;硬件终端可以有两种处理方式:&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Static distribution&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;指定中断有某个CPU处理.&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Dynamic distribution&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;信号被分发到CPU 中 priority 最小的一个. (这个priority可以编程修改)&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;CPU之间也能发送中断.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="exceptions"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id114"&gt;4.1.2&amp;nbsp;&amp;nbsp;&amp;nbsp;Exceptions&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;0&lt;/tt&gt; “Divide error” (fault)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Raised when a program issues an integer division by 0.&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;1&lt;/tt&gt; “Debug” (trap or fault)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Raised when the TF flag of eflags is set (quite useful to implement single-step execution of a debugged program) or when the address of an instruction or operand falls within the range of an active debug register (see the section “Hardware Context” in Chapter 3).&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;3&lt;/tt&gt; “Breakpoint” (trap)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Caused by an int3 (breakpoint) instruction (usually inserted by a debugger).&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;4&lt;/tt&gt; “Overflow” (trap)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;An into (check for overflow) instruction has been executed while the OF (overflow) flag of eflags is set.&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;8&lt;/tt&gt; “Double fault”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;11&lt;/tt&gt; “Segment not present” (fault)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;12&lt;/tt&gt; “Stack segment fault” (fault)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;14&lt;/tt&gt; “Page Fault” (fault)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;内核收到中断后，通常会向进程发送信号(这就是我们段错误的时候是收到信号的原因)&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Table 4-1. Signals sent by the exception handlers

# Exception                         Exception handler                  Signal
0 Divide error                      divide_error( )                    SIGFPE
1 Debug                             debug( )                           SIGTRAP
2 NMI                               nmi( )                             None
3 Breakpoint                        int3( )                            SIGTRAP
4 Overflow                          overflow( )                        SIGSEGV
5 Bounds check                      bounds( )                          SIGSEGV
6 Invalid opcode                    invalid_op( )                      SIGILL
7 Device not available              device_not_available( )            None
8 Double fault                      doublefault_fn()                   None
9 Coprocessor segment overrun       coprocessor_segment_overrun( )     SIGFPE
10 Invalid TSS                      invalid_TSS( )                     SIGSEGV
11 Segment not present              segment_not_present( )             SIGBUS
12 Stack segment fault              stack_segment( )                   SIGBUS
13 General protection               general_protection( )              SIGSEGV
14 Page Fault                       page_fault( )                      SIGSEGV
15 Intel-reserved                   None                               None
16 Floating-point error             coprocessor_error( )               SIGFPE
17 Alignment check                  alignment_check( )                 SIGBUS
18 Machine check                    machine_check()                    None
19 SIMD floating point              simd_coprocessor_error()           SIGFPE
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="idt"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id115"&gt;4.1.3&amp;nbsp;&amp;nbsp;&amp;nbsp;中断描述符表IDT&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="nested-execution-of-exception-and-interrupt-handlers"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id116"&gt;4.2&amp;nbsp;&amp;nbsp;&amp;nbsp;Nested Execution of Exception and Interrupt Handlers&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="initializing-the-interrupt-descriptor-table"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id117"&gt;4.3&amp;nbsp;&amp;nbsp;&amp;nbsp;Initializing the Interrupt Descriptor Table&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Intel 提供三种 Interrupt, Trap, and System Gates, 权限不同, o, 比较复杂:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
set_trap_gate(0,&amp;amp;divide_error);
set_trap_gate(1,&amp;amp;debug);

set_intr_gate(2,&amp;amp;nmi);
set_system_intr_gate(3,&amp;amp;int3);
set_system_gate(4,&amp;amp;overflow);
set_system_gate(5,&amp;amp;bounds);
set_trap_gate(6,&amp;amp;invalid_op);
set_trap_gate(7,&amp;amp;device_not_available);
set_task_gate(8,31);
set_trap_gate(9,&amp;amp;coprocessor_segment_overrun);
set_trap_gate(10,&amp;amp;invalid_TSS);
set_trap_gate(11,&amp;amp;segment_not_present);
set_trap_gate(12,&amp;amp;stack_segment);
set_trap_gate(13,&amp;amp;general_protection);
set_intr_gate(14,&amp;amp;page_fault);
...
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="exception-handling"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id118"&gt;4.4&amp;nbsp;&amp;nbsp;&amp;nbsp;Exception Handling&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;通常是发信号到响应进程.&lt;/p&gt;
&lt;p&gt;Most exceptions issued by the CPU are interpreted by Linux as error conditions.
When one of them occurs, the kernel sends a signal to the process that caused the
exception to notify it of an anomalous condition.&lt;/p&gt;
&lt;p&gt;例如:&lt;/p&gt;
&lt;p&gt;If, for instance, a process performs
a division by zero, the CPU raises a “Divide error” exception, and the corresponding
exception handler sends a SIGFPE signal to the current process, which then takes the
necessary steps to recover or (if no signal handler is set for that signal) abort.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
current-&amp;gt;thread.error_code = error_code;
current-&amp;gt;thread.trap_no = vector;
force_sig(sig_number, current);
&lt;/pre&gt;
&lt;p&gt;The current process takes care of the signal right after the termination of the exception handler.&lt;/p&gt;
&lt;p&gt;The signal will be handled either in User Mode by the process’s own signal handler (if it exists) or in Kernel Mode. In the latter case, the kernel usually kills the process (see Chapter 11). The signals sent by the exception handlers are listed in Table 4-1.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id24"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id119"&gt;4.5&amp;nbsp;&amp;nbsp;&amp;nbsp;Interrupt Handling(硬件产生的)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;this approach does not hold for interrupts, because they frequently arrive long after the process to which they are related&lt;/p&gt;
&lt;p&gt;前面方法不适用, 因为当前进程和中断并没有关系.&lt;/p&gt;
&lt;p&gt;三种:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;I/O interrupts&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;An I/O device requires attention; the corresponding interrupt handler must query the device to determine the proper course of action. We cover this type of interrupt in the later section “I/O Interrupt Handling.”&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Timer interrupts&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Some timer, either a local APIC timer or an external timer, has issued an interrupt; this kind of interrupt tells the kernel that a fixed-time interval has elapsed.  These interrupts are handled mostly as I/O interrupts; we discuss the peculiar characteristics of timer interrupts in Chapter 6.&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Interprocessor interrupts&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;A CPU issued an interrupt to another CPU of a multiprocessor system. We cover such interrupts in the later section “Interprocessor Interrupt Handling.”&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Table 4-3. An example of IRQ assignment to I/O devices:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
IRQ INT     Hardware device
0   32      Timer  Timer 必须是0号IRQ线.
1   33      Keyboard
2   34      PIC cascading
3   35      Second serial port
4   36      First serial port
6   38      Floppy disk
8   40      System clock
10  42      Network interface
11  43      USB port, sound card
12  44      PS/2 mouse
13  45      Mathematical coprocessor
14  46      EIDE disk controller’s first chain
15  47      EIDE disk controller’s second chain
&lt;/pre&gt;
&lt;div class="section" id="irq"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id120"&gt;4.5.1&amp;nbsp;&amp;nbsp;&amp;nbsp;IRQ在多处理器系统上的分发&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Linux 遵守对称多处理器模型(SMP), 这意味着， 内核对每个CPU都不应该有偏爱.&lt;/p&gt;
&lt;p&gt;内核试图以轮转的方式把来自硬件的IRQ信号在多个CPU之间分发, 所有CPU服务于I/O中断的执行时间片几乎相同.&lt;/p&gt;
&lt;p&gt;这是由硬件完成的, 但是有的硬件存在问题, Linux 使用kirqd的特殊内核线程来纠正对CPU进行的IRQ自动分配&lt;/p&gt;
&lt;div class="section" id="cpuirq"&gt;
&lt;h5&gt;&lt;a class="toc-backref" href="#id121"&gt;4.5.1.1&amp;nbsp;&amp;nbsp;&amp;nbsp;CPU的IRQ亲和力&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;多APIC系统中, 通过修改APIC中断重定向表, 可以把指定中断发到特定的CPU上.&lt;/p&gt;
&lt;p&gt;kirqd内核线程定期执行 do_irq_balance() 函数, 它记录最近时间内每个cpu的终端次数, 如果发现负载不均衡, 就把IRQ从一个CPU转到另一个CPU.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id25"&gt;
&lt;h5&gt;&lt;a class="toc-backref" href="#id122"&gt;4.5.1.2&amp;nbsp;&amp;nbsp;&amp;nbsp;例子:网卡多队列的中断绑定&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;如果大家用的万兆网卡跑linux或者nginx做大规模的负载均衡，那么肯定会遇到网卡中断占耗尽一个CPU的情况，会发现有一个ksoftirqd进程耗CPU非常厉害。这个时候就需要把万兆网卡的多个队列分别绑定到不同的核上。简单的在自己的笔记本上测试一下把单个中断绑定到指定CPU的方式。&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ning&amp;#64;ning-laptop:~/test$ cat /proc/interrupts
           CPU0       CPU1       CPU2       CPU3
  0:       1120         78         73         89   IO-APIC-edge      timer
  1:       8372       8326       4485       1256   IO-APIC-edge      i8042
  8:          0          0          0          1   IO-APIC-edge      rtc0
  9:     919824     902422     945216     917506   IO-APIC-fasteoi   acpi
 12:      70724      74831      73671     130628   IO-APIC-edge      i8042
 14:    3836954     375689     389297     391612   IO-APIC-edge      ata_piix
 15:          0          0          0          0   IO-APIC-edge      ata_piix
 17:     228109        213     105882      40581   IO-APIC-fasteoi   ata_piix, HDA Intel
 19:    2129264    2483519    2266058    1798885   IO-APIC-fasteoi   ehci_hcd:usb2
 23:     548565     795696     859954     207891   IO-APIC-fasteoi   ehci_hcd:usb1
 27:        929      23923       1717       2311   PCI-MSI-edge      eth0
 28:   60226455    7787039    7893406    8392505   PCI-MSI-edge      iwlagn
 29:    1156981    1577957    3826559    1869343   PCI-MSI-edge      i915&amp;#64;pci:0000:00:02.0
NMI:          0          0          0          0   Non-maskable interrupts
LOC:   88922568   93984839  101969505   97218270   Local timer interrupts
SPU:          0          0          0          0   Spurious interrupts
PMI:          0          0          0          0   Performance monitoring interrupts
PND:          0          0          0          0   Performance pending work
RES:   15963006   16173515   13643964   13852799   Rescheduling interrupts
CAL:     264642     254329     620940     555868   Function call interrupts
TLB:    2069687    1882570    1553231    1561555   TLB shootdowns
TRM:          0          0          0          0   Thermal event interrupts
THR:          0          0          0          0   Threshold APIC interrupts
MCE:          0          0          0          0   Machine check exceptions
MCP:       1349       1345       1345       1345   Machine check polls
ERR:          0
MIS:          0
&lt;/pre&gt;
&lt;p&gt;通过两次cat:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ning&amp;#64;ning-laptop:~/test$ cat /proc/interrupts | grep iwl
 28:   60237470    7787039    7893406    8392505   PCI-MSI-edge      iwlagn
ning&amp;#64;ning-laptop:~/test$ cat /proc/interrupts | grep iwl
 28:   60237488    7787039    7893406    8392505   PCI-MSI-edge      iwlagn
ning&amp;#64;ning-laptop:~/test$ cat /proc/interrupts | grep iwl
 28:   60237512    7787039    7893406    8392505   PCI-MSI-edge      iwlagn
&lt;/pre&gt;
&lt;p&gt;这里发现28号中断(iwlagn) 只有CPU0这一列在增加, 说明28号中断绑定在CPU0上.&lt;/p&gt;
&lt;p&gt;比如要绑定到CPU3:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
echo 4 &amp;gt; /proc/irq/28/smp_affinity
&lt;/pre&gt;
&lt;p&gt;这里:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
1 : CPU0
2 : CPU1
4 : CPU2
8 : CPU3
&lt;/pre&gt;
&lt;p&gt;再观察, 发现只有CPU2这一列在增加:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ning&amp;#64;ning-laptop:~/test$ cat /proc/interrupts | grep iwl
 28:   60238491    7787039    7893707    8392505   PCI-MSI-edge      iwlagn
ning&amp;#64;ning-laptop:~/test$ cat /proc/interrupts | grep iwl
 28:   60238491    7787039    7893727    8392505   PCI-MSI-edge      iwlagn
ning&amp;#64;ning-laptop:~/test$ cat /proc/interrupts | grep iwl
 28:   60238491    7787039    7893740    8392505   PCI-MSI-edge      iwlagn
&lt;/pre&gt;
&lt;p&gt;一个核每秒能处理多少中断?&lt;/p&gt;
&lt;p&gt;我们的机器eth中断都绑定在CPU0上面:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cat /proc/interrupts | grep eth
  49:  273896202          0          0          0          0          0          0          0          0          0          0          0   PCI-MSI-edge      eth1-0
  50: 2839469681          0          0          0          0          0          0          0          0          0          0          0   PCI-MSI-edge      eth1-1
  51: 2443166700          0          0          0          0          0          0          0          0          0          0          0   PCI-MSI-edge      eth1-2
  52:  947194873          0          0          0          0          0          0          0          0          0          0          0   PCI-MSI-edge      eth1-3
  53: 3035084892          0          0          0          0          0          0          0          0          0          0          0   PCI-MSI-edge      eth1-4
  54: 2586224100          0          0          0          0          0          0          0          0          0          0          0   PCI-MSI-edge      eth1-5
  55: 1861561263          0          0          0          0          0          0          0          0          0          0          0   PCI-MSI-edge      eth1-6
  56: 4154271481          0          0          0          0          0          0          0          0          0          0          0   PCI-MSI-edge      eth1-7
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
$ cat /proc/interrupts | grep eth | awk '{A+=$2} END{print A}' &amp;amp;&amp;amp; sleep 10 &amp;amp;&amp;amp; cat /proc/interrupts | grep eth | awk '{A+=$2} END{print A}'
18144814547
18145846813 (10s)
&lt;/pre&gt;
&lt;p&gt;大约每秒10w个中断, 这个机器负载不重.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id26"&gt;
&lt;h5&gt;&lt;a class="toc-backref" href="#id123"&gt;4.5.1.3&amp;nbsp;&amp;nbsp;&amp;nbsp;把进程绑在核上&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;查看:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ taskset -p 40234
pid 40234's current affinity mask: fff
&lt;/pre&gt;
&lt;p&gt;说明每个核都可能运行.&lt;/p&gt;
&lt;p&gt;设置:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ning&amp;#64;ning-laptop ~/test$ taskset -p 7537
pid 7537's current affinity mask: f

ning&amp;#64;ning-laptop ~/test$ taskset -p e 7537
pid 7537's current affinity mask: f
pid 7537's new affinity mask: e

ning&amp;#64;ning-laptop ~/test$ taskset -p 7537
pid 7537's current affinity mask: e
&lt;/pre&gt;
&lt;p&gt;另外一种格式set:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
taskset -pc 0,3,7-11 700
&lt;/pre&gt;
&lt;p&gt;进程启动时指定CPU:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
taskset -c 1 ./redis-server ../redis.conf
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id27"&gt;
&lt;h5&gt;&lt;a class="toc-backref" href="#id124"&gt;4.5.1.4&amp;nbsp;&amp;nbsp;&amp;nbsp;网卡多队列&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;对于万兆网卡, 一把提供多个中断号(多队列), 如果中断都绑在一个核上, 就悲剧了.&lt;/p&gt;
&lt;p&gt;有多个RSS队列.&lt;/p&gt;
&lt;p&gt;英特尔 X520万兆网卡里，最大可以同时支持128个队列，足以满足当前主流的服务器CPU配置。&lt;/p&gt;
&lt;p&gt;开启多队列:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sed -i 's/e1000/igb/g' /etc/modprobe.conf
echo &amp;quot;options igb RSS=8,8&amp;quot; &amp;gt;&amp;gt; /etc/modprobe.conf
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id28"&gt;
&lt;h5&gt;&lt;a class="toc-backref" href="#id125"&gt;4.5.1.5&amp;nbsp;&amp;nbsp;&amp;nbsp;千兆网卡多队列&lt;/a&gt;&lt;/h5&gt;
&lt;div class="section" id="id29"&gt;
&lt;h6&gt;&lt;a class="toc-backref" href="#id126"&gt;4.5.1.5.1&amp;nbsp;&amp;nbsp;&amp;nbsp;是否支持&lt;/a&gt;&lt;/h6&gt;
&lt;p&gt;&lt;a class="reference external" href="http://blog.csdn.net/turkeyzhou/article/details/7528182"&gt;http://blog.csdn.net/turkeyzhou/article/details/7528182&lt;/a&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
#lspci -vvv
Ethernet controller的条目内容，如果有MSI-X &amp;amp;&amp;amp; Enable+ &amp;amp;&amp;amp; TabSize &amp;gt; 1，则该网卡是多队列网卡，如图4.4所示。

图4.4 lspci内容
Message Signaled Interrupts(MSI)是PCI规范的一个实现，可以突破CPU 256条interrupt的限制，使每个设备具有多个中断线变成可能，多队列网卡驱动给每个queue申请了MSI。MSI-X是MSI数组，Enable+指使能，TabSize是数组大小。

02:00.1 Ethernet controller: Intel Corporation: Unknown device 150e (rev 01)
        Subsystem: Intel Corporation: Unknown device 0000
        Control: I/O+ Mem+ BusMaster+ SpecCycle- MemWINV- VGASnoop- ParErr- Stepping- SERR- FastB2B-
        Status: Cap+ 66Mhz- UDF- FastB2B- ParErr- DEVSEL=fast &amp;gt;TAbort- &amp;lt;TAbort- &amp;lt;MAbort- &amp;gt;SERR- &amp;lt;PERR-
        Latency: 0, Cache Line Size 10
        Interrupt: pin B routed to IRQ 30
        Region 0: Memory at 94800000 (32-bit, non-prefetchable) [size=512K]
        Region 2: I/O ports at 5000 [size=32]
        Region 3: Memory at 94900000 (32-bit, non-prefetchable) [size=16K]
        Capabilities: [40] Power Management version 3
                Flags: PMEClk- DSI+ D1- D2- AuxCurrent=0mA PME(D0+,D1-,D2-,D3hot+,D3cold+)
                Status: D0 PME-Enable- DSel=0 DScale=1 PME-
        Capabilities: [50] Message Signalled Interrupts: 64bit+ Queue=0/0 Enable-
                Address: 0000000000000000  Data: 0000
        Capabilities: [70] MSI-X: Enable+ Mask- TabSize=10
                Vector table: BAR=3 offset=00000000
                PBA: BAR=3 offset=00002000
        Capabilities: [a0] Express Endpoint IRQ 0
                Device: Supported: MaxPayload 512 bytes, PhantFunc 0, ExtTag-
                Device: Latency L0s &amp;lt;512ns, L1 &amp;lt;64us
                Device: AtnBtn- AtnInd- PwrInd-
                Device: Errors: Correctable+ Non-Fatal+ Fatal+ Unsupported+
                Device: RlxdOrd+ ExtTag- PhantFunc- AuxPwr- NoSnoop+
                Device: MaxPayload 128 bytes, MaxReadReq 512 bytes
                Link: Supported Speed unknown, Width x4, ASPM L0s L1, Port 2
                Link: Latency L0s &amp;lt;4us, L1 &amp;lt;8us
                Link: ASPM Disabled RCB 64 bytes CommClk+ ExtSynch-
                Link: Speed unknown, Width x4
        Capabilities: [100] Advanced Error Reporting
        Capabilities: [140] Device Serial Number ab-fb-2b-ff-ff-c7-0b-20
        Capabilities: [1a0] Unknown (23)
&lt;/pre&gt;
&lt;p&gt;还有种通用的方式，直接查看 interrupts 文件，看关键字 MSI 就知道了:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# grep -i msi /proc/interrupts
&lt;/pre&gt;
&lt;p&gt;3.dmsg:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
#  dmesg  | grep -i msi
hpet: hpet2 irq 72 for MSI
hpet: hpet3 irq 73 for MSI
hpet: hpet4 irq 74 for MSI
hpet: hpet5 irq 75 for MSI
hpet: hpet6 irq 76 for MSI
hpet: hpet7 irq 77 for MSI
megaraid_sas 0000:03:00.0: irq 78 for MSI/MSI-X
ahci 0000:00:1f.2: irq 79 for MSI/MSI-X
igb 0000:02:00.0: irq 80 for MSI/MSI-X
igb 0000:02:00.0: irq 81 for MSI/MSI-X
igb 0000:02:00.0: Using MSI-X interrupts. 1 rx queue(s), 1 tx queue(s)
igb 0000:02:00.1: irq 82 for MSI/MSI-X
igb 0000:02:00.1: irq 83 for MSI/MSI-X
igb 0000:02:00.1: Using MSI-X interrupts. 1 rx queue(s), 1 tx queue(s)
isci 0000:04:00.0: irq 84 for MSI/MSI-X
isci 0000:04:00.0: irq 85 for MSI/MSI-X
&lt;/pre&gt;
&lt;ol class="arabic" start="4"&gt;
&lt;li&gt;&lt;p class="first"&gt;ethtool:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# ethtool -S eth0 | tail -20
     os2bmc_tx_by_bmc: 0
     os2bmc_tx_by_host: 0
     os2bmc_rx_by_host: 0
     rx_errors: 0
     tx_errors: 0
     tx_dropped: 0
     rx_length_errors: 0
     rx_over_errors: 0
     rx_frame_errors: 0
     rx_fifo_errors: 0
     tx_fifo_errors: 0
     tx_heartbeat_errors: 0
     tx_queue_0_packets: 0
     tx_queue_0_bytes: 0
     tx_queue_0_restart: 0
     rx_queue_0_packets: 0
     rx_queue_0_bytes: 0
     rx_queue_0_drops: 0
     rx_queue_0_csum_err: 0
     rx_queue_0_alloc_failed: 0
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="id30"&gt;
&lt;h6&gt;&lt;a class="toc-backref" href="#id127"&gt;4.5.1.5.2&amp;nbsp;&amp;nbsp;&amp;nbsp;开启多队列&lt;/a&gt;&lt;/h6&gt;
&lt;p&gt;首先要支持MSI-X (内核2.6.24+)&lt;/p&gt;
&lt;p&gt;Linux 网卡驱动一般只有两种 e1000 和 igb. (无线的是iwlagn):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
#下面来自
本发行版包括两个适用于英特尔® 网卡的 Linux 基础驱动程序。这两个驱动程序的名称是 e1000 和 igb。为支持任何基于 82575 的网卡，必须安装 igb 驱动程序。其它所有网卡要求 e1000 驱动程序。
&lt;/pre&gt;
&lt;p&gt;先通过lspci看看当前用的是什么驱动:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
06:00.2 Ethernet controller: Intel Corporation I350 Gigabit Network Connection (rev 01)
        Subsystem: Intel Corporation I350 Gigabit Network Connection
        Control: I/O+ Mem+ BusMaster+ SpecCycle- MemWINV- VGASnoop- ParErr+ Stepping- SERR- FastB2B- DisINTx+
        Status: Cap+ 66MHz- UDF- FastB2B- ParErr- DEVSEL=fast &amp;gt;TAbort- &amp;lt;TAbort- &amp;lt;MAbort- &amp;gt;SERR- &amp;lt;PERR- INTx-
        Latency: 0, Cache Line Size: 64 bytes
        Interrupt: pin C routed to IRQ 18
        Region 0: Memory at a9a20000 (32-bit, non-prefetchable) [size=128K]
        Region 2: I/O ports at 1020 [size=32]
        Region 3: Memory at a9a84000 (32-bit, non-prefetchable) [size=16K]
        Capabilities: &amp;lt;access denied&amp;gt;
        Kernel driver in use: igb
        Kernel modules: igb

06:00.3 Ethernet controller: Intel Corporation I350 Gigabit Network Connection (rev 01)
        Subsystem: Intel Corporation I350 Gigabit Network Connection
        Control: I/O+ Mem+ BusMaster+ SpecCycle- MemWINV- VGASnoop- ParErr+ Stepping- SERR- FastB2B- DisINTx+
        Status: Cap+ 66MHz- UDF- FastB2B- ParErr- DEVSEL=fast &amp;gt;TAbort- &amp;lt;TAbort- &amp;lt;MAbort- &amp;gt;SERR- &amp;lt;PERR- INTx-
        Latency: 0, Cache Line Size: 64 bytes
        Interrupt: pin D routed to IRQ 19
        Region 0: Memory at a9a00000 (32-bit, non-prefetchable) [size=128K]
        Region 2: I/O ports at 1000 [size=32]
        Region 3: Memory at a9a80000 (32-bit, non-prefetchable) [size=16K]
        Capabilities: &amp;lt;access denied&amp;gt;
        Kernel driver in use: igb
        Kernel modules: igb
&lt;/pre&gt;
&lt;p&gt;igb是一个内核mod:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ lsmod | grep igb
igb                   143886  0
&lt;/pre&gt;
&lt;p&gt;看看这个mod支持啥参数:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ modinfo igb
filename:       /lib/modules/2.6.32_1-12-0-0/kernel/drivers/net/igb/igb.ko
version:        4.0.17
license:        GPL
description:    Intel(R) Gigabit Ethernet Network Driver
author:         Intel Corporation, &amp;lt;e1000-devel&amp;#64;lists.sourceforge.net&amp;gt;
srcversion:     BCB38D2CABB33E0A1BA8385
...
depends:
vermagic:       2.6.32_1-12-0-0 SMP mod_unload modversions
parm:           InterruptThrottleRate:Maximum interrupts per second, per vector, (max 100000), default 3=adaptive (array of int)
parm:           IntMode:Change Interrupt Mode (0=Legacy, 1=MSI, 2=MSI-X), default 2 (array of int)
parm:           Node:set the starting node to allocate memory on, default -1 (array of int)
parm:           LLIPort:Low Latency Interrupt TCP Port (0-65535), default 0=off (array of int)
parm:           LLIPush:Low Latency Interrupt on TCP Push flag (0,1), default 0=off (array of int)
parm:           LLISize:Low Latency Interrupt on Packet Size (0-1500), default 0=off (array of int)
parm:           RSS:Number of Receive-Side Scaling Descriptor Queues (0-8), default 1, 0=number of cpus (array of int)
parm:           VMDQ:Number of Virtual Machine Device Queues: 0-1 = disable, 2-8 enable, default 0 (array of int)
parm:           max_vfs:Number of Virtual Functions: 0 = disable, 1-7 enable, default 0 (array of int)
parm:           MDD:Malicious Driver Detection (0/1), default 1 = enabled. Only available when max_vfs is greater than 0 (array of int)
parm:           QueuePairs:Enable Tx/Rx queue pairs for interrupt handling (0,1), default 1=on (array of int)
parm:           EEE:Enable/disable on parts that support the feature (array of int)
parm:           DMAC:Disable or set latency for DMA Coalescing ((0=off, 1000-10000(msec), 250, 500 (usec)) (array of int)
parm:           LRO:Large Receive Offload (0,1), default 0=off (array of int)
parm:           debug:Debug level (0=none, ..., 16=all) (int)
&lt;/pre&gt;
&lt;p&gt;通过调整IntMode, RSS, /etc/modules.conf or /etc/modprobe.conf&lt;/p&gt;
&lt;pre class="literal-block"&gt;
alias eth0 igb
alias eth1 igb
options igb IntMode=2,1 RSS=4,4
&lt;/pre&gt;
&lt;p&gt;On some kernels a reboot is required to switch between a single queue mode and multiqueue modes, or vice-versa.&lt;/p&gt;
&lt;p&gt;可以看这里的intel驱动文档:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
http://downloadmirror.intel.com/20927/eng/e1000.htm

IntMode:
    0-2 (0 = Legacy Int, 1 = MSI and 2 = MSI-X)
    IntMode controls allow load time control over the type of interrupt registered for by the driver. MSI-X is required for multiple queue support, and some kernels and combinations of kernel .config options will force a lower level of interrupt support. 'cat /proc/interrupts' will show different values for each type of interrupt.

RSS
    0-8:

    0 - Assign up to whichever is less, number of CPUS or number of queues
    X - Assign X queues where X is less than the maximum number of queues
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="proc-softirqs"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id128"&gt;4.5.2&amp;nbsp;&amp;nbsp;&amp;nbsp;/proc/softirqs&lt;/a&gt;&lt;/h4&gt;
&lt;pre class="literal-block"&gt;
ning&amp;#64;ning-laptop ~/test$ cat /proc/softirqs
                CPU0       CPU1       CPU2       CPU3
      HI:     185922     155733     322202     415150
   TIMER:  116015047  115689110  116242953  114220601
  NET_TX:  145507222    2411961    2579050    2645211
  NET_RX:   91563132   62827666   54938487   56726882
   BLOCK:   12582678     387007     389099     477301
BLOCK_IOPOLL:         39          0         14          1
 TASKLET:  268807160    8526283   10469002    7812433
   SCHED:   85717988   81576238   76344646   74394437
 HRTIMER:      38106      42778      28602      28957
     RCU:  110562375  107074305  102180377   98345842
&lt;/pre&gt;
&lt;div class="section" id="mpstat"&gt;
&lt;h5&gt;&lt;a class="toc-backref" href="#id129"&gt;4.5.2.1&amp;nbsp;&amp;nbsp;&amp;nbsp;mpstat&lt;/a&gt;&lt;/h5&gt;
&lt;pre class="literal-block"&gt;
mpstat [ -P { cpu | ALL } ] [ -V ] [ interval [ count ] ]

 CPU
        Processor number. The keyword all indicates that statistics  are
        calculated as averages among all processors.

 ...
 %iowait
        Show  the percentage of time that the CPU or CPUs were idle dur-
        ing which the system had an outstanding disk I/O request.
 %irq (有多少时间花在处理中断)
        Show the percentage of time spent by the CPU or CPUs to  service
        interrupts.
 %soft
        Show  the percentage of time spent by the CPU or CPUs to service
        softirqs.  A softirq (software interrupt) is one  of  up  to  32
        enumerated software interrupts which can run on multiple CPUs at
        once.
 %idle
        Show the percentage of time that the CPU or CPUs were  idle  and
        the system did not have an outstanding disk I/O request.
 intr/s
        Show  the  total number of interrupts received per second by the
        CPU or CPUs.
&lt;/pre&gt;
&lt;p&gt;两种用法:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
#看总体情况
mpstat 1
#看每个CPU情况.
mpstat -P ALL 1
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="vmstat"&gt;
&lt;h5&gt;&lt;a class="toc-backref" href="#id130"&gt;4.5.2.2&amp;nbsp;&amp;nbsp;&amp;nbsp;vmstat&lt;/a&gt;&lt;/h5&gt;
&lt;pre class="literal-block"&gt;
$ vmstat  1
procs -----------memory---------- ---swap-- -----io----    --system--    ----cpu----
 r  b   swpd   free   buff  cache   si   so    bi    bo        in    cs  us sy id wa
 5  0 975864 3730960 237268 30782988    0    0     1   110      0     0  13  7 80  0
 1  0 975864 3731720 237268 30783940    0    0     0   412 111381 93381  5 10 85  0
 3  0 975864 3731780 237268 30784904    0    0     0   356 110127 92617  5 10 86  0
 5  0 975864 3729672 237268 30785796    0    0     0   324 109500 90538  5  9 86  0

 system的in这一列, 就是说每秒多少中断.
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="softirqs-and-tasklets"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id131"&gt;4.6&amp;nbsp;&amp;nbsp;&amp;nbsp;Softirqs and Tasklets&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;TODO: SoftIRQ(软中断) 和中断/异常是什么关系??&lt;/p&gt;
&lt;p&gt;ksoftirqd/n 内核线程:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
for(;;) {
    set_current_state(TASK_INTERRUPTIBLE);
    schedule();
    /* now in TASK_RUNNING state */
    while (local_softirq_pending()) {
        preempt_disable();
        do_softirq();
        preempt_enable();
        cond_resched();
    }
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="work-queues"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id132"&gt;4.7&amp;nbsp;&amp;nbsp;&amp;nbsp;Work Queues&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;工作队列实际上是这样一种概念:
硬件中断发生时, 把中断对应的处理函数加到一个队列里面, 再由一个 &lt;tt class="docutils literal"&gt;内核线程&lt;/tt&gt; 来对这个队列里面的每个函数, 逐一调用, 可以简化中断处理例程.&lt;/p&gt;
&lt;p&gt;这种方法和lighttpd对请求有事件来时的处理很像.&lt;/p&gt;
&lt;p&gt;预定义的Work Queue: &lt;tt class="docutils literal"&gt;events&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;内核线程:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;keventd(通用)&lt;/li&gt;
&lt;li&gt;kblockd(块设备层使用)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="returning-from-interrupts-and-exceptions"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id133"&gt;4.8&amp;nbsp;&amp;nbsp;&amp;nbsp;Returning from Interrupts and Exceptions&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;ret_from_intr():        中断处理结束时&lt;/li&gt;
&lt;li&gt;ret_from_exception():   异常处理结束时&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="c5-kernel-synchronization"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id134"&gt;5&amp;nbsp;&amp;nbsp;&amp;nbsp;c5 Kernel Synchronization&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="how-the-kernel-services-requests"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id135"&gt;5.1&amp;nbsp;&amp;nbsp;&amp;nbsp;How the Kernel Services Requests&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;可以把内核看作不断对请求进行响应的服务器, 这些请求可能来自CPU上执行的进程, 也可能来自发出中断请求的外部设备.&lt;/p&gt;
&lt;div class="section" id="id31"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id136"&gt;5.1.1&amp;nbsp;&amp;nbsp;&amp;nbsp;内核抢占&lt;/a&gt;&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;抢占内核的主要特点是: 一个在内核台运行的进程, 可能在执行内核函数期间被另一个进程取代.&lt;/li&gt;
&lt;li&gt;比如一个执行异常处理程序的进程, 用完了它的时间片, 如果内核是抢占的, 进程会立即被取代.
如果内核不是抢占的, 进程继续执行直到它执行完异常处理程序或主动放弃CPU.&lt;/li&gt;
&lt;li&gt;使内核可抢占的目的是: 减少用户态进程的分派延迟.&lt;/li&gt;
&lt;li&gt;内核抢占会引起不容忽视的开销, 所以2.6内核允许用户在编译的时候设置是否开启内核抢占.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个界定其实不严格.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="synchronization-primitives"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id137"&gt;5.2&amp;nbsp;&amp;nbsp;&amp;nbsp;Synchronization Primitives(同步原语)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Table 5-2. Various types of synchronization techniques used by the kernel&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="21%" /&gt;
&lt;col width="14%" /&gt;
&lt;col width="47%" /&gt;
&lt;col width="18%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Technique&lt;/th&gt;
&lt;th class="head"&gt;&amp;nbsp;&lt;/th&gt;
&lt;th class="head"&gt;Description&lt;/th&gt;
&lt;th class="head"&gt;Scope&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Per-CPU variables&lt;/td&gt;
&lt;td&gt;每CPU变量&lt;/td&gt;
&lt;td&gt;Duplicate a data Structure among the CPUs&lt;/td&gt;
&lt;td&gt;All CPUs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Atomic operation&lt;/td&gt;
&lt;td&gt;原子操作&lt;/td&gt;
&lt;td&gt;Atomic read-modify-write instruction to a counter&lt;/td&gt;
&lt;td&gt;All CPUs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Memory barrier&lt;/td&gt;
&lt;td&gt;内存屏障&lt;/td&gt;
&lt;td&gt;Avoid instruction reordering(避免指令重排)&lt;/td&gt;
&lt;td&gt;Local CPU or All CPUs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Spin lock&lt;/td&gt;
&lt;td&gt;自旋锁&lt;/td&gt;
&lt;td&gt;Lock with busy wait&lt;/td&gt;
&lt;td&gt;All CPUs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Semaphore&lt;/td&gt;
&lt;td&gt;信号量&lt;/td&gt;
&lt;td&gt;Lock with blocking wait (sleep)&lt;/td&gt;
&lt;td&gt;All CPUs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Seqlocks&lt;/td&gt;
&lt;td&gt;顺序锁&lt;/td&gt;
&lt;td&gt;Lock based on an access counter&lt;/td&gt;
&lt;td&gt;All CPUs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Local interrupt disabling&lt;/td&gt;
&lt;td&gt;本地中断禁止&lt;/td&gt;
&lt;td&gt;Forbid interrupt handling on a single CPU&lt;/td&gt;
&lt;td&gt;Local CPU&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Local softirq disabling&lt;/td&gt;
&lt;td&gt;本地软中断禁止&lt;/td&gt;
&lt;td&gt;Forbid deferrable function handling on a single CPU&lt;/td&gt;
&lt;td&gt;Local CPU&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Read-copy-update (RCU)&lt;/td&gt;
&lt;td&gt;通过指针而不是锁&lt;/td&gt;
&lt;td&gt;Lock-free access to shared data structures through pointers&lt;/td&gt;
&lt;td&gt;All CPUs&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;RCU 应该是指一些无锁数据结构操作方式,&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Read-copy-update&lt;/span&gt;&lt;/tt&gt; 这个术语是针对 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;读-修改-写(read-modify-write)&lt;/span&gt;&lt;/tt&gt; 这种常见的操作模式来说的.&lt;/p&gt;
&lt;div class="section" id="cpu"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id138"&gt;5.2.1&amp;nbsp;&amp;nbsp;&amp;nbsp;每CPU变量&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;各个CPU的数据在硬件Cache中, 保证不会存放在同一个 &lt;tt class="docutils literal"&gt;Cache Line&lt;/tt&gt;, 对每CPU数组的并发访问不会导致Cache Line的窃用和失效.&lt;/p&gt;
&lt;p&gt;使用:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
DEFINE_PER_CPU(type, name) Statically allocates a per-CPU array called name of type data structures
per_cpu(name, cpu) Selects the element for CPU cpu of the per-CPU array name
&lt;/pre&gt;
&lt;p&gt;每个CPU的运行队列就是 &lt;tt class="docutils literal"&gt;每CPU变量&lt;/tt&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id32"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id139"&gt;5.2.2&amp;nbsp;&amp;nbsp;&amp;nbsp;原子操作&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;哪些操作是原子的&lt;/strong&gt; :&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;进行0次或1次 &lt;strong&gt;对齐&lt;/strong&gt; 内存访问的汇编指令(如int/指针赋值)
但是要注意, &lt;strong&gt;对齐&lt;/strong&gt; 很重要, 一个结构体中, 很容易不对齐, 静态堆/栈/malloc是否对齐 依赖编译器.&lt;/li&gt;
&lt;li&gt;如果读操作后, 写操作前没有其它处理器占用内存总线(如 &lt;tt class="docutils literal"&gt;inc&lt;/tt&gt; , &lt;tt class="docutils literal"&gt;dec&lt;/tt&gt; )&lt;/li&gt;
&lt;li&gt;操作码有lock前缀(控制单元此时锁定内存总线, 直到这条指令执行完成)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt; : C代码中, 不能保证编译器会将 &lt;tt class="docutils literal"&gt;a=a+1&lt;/tt&gt; 甚至 &lt;tt class="docutils literal"&gt;a++&lt;/tt&gt; 这样的操作使用一个原子指令 (但是赋值是)&lt;/p&gt;
&lt;p&gt;原子操作:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
atomic_read(v)
atomic_set(v)
atomic_add(v)
atomic_add_return(v)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id33"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id140"&gt;5.2.3&amp;nbsp;&amp;nbsp;&amp;nbsp;优化屏障&amp;amp;内存屏障&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;CPU的多发射会导致指令重排, 如果放在同步原语之后的一条指令在同步原语之前执行, 就悲剧了.&lt;/p&gt;
&lt;div class="section" id="optimization-barrier"&gt;
&lt;h5&gt;&lt;a class="toc-backref" href="#id141"&gt;5.2.3.1&amp;nbsp;&amp;nbsp;&amp;nbsp;优化屏障(optimization barrier) 原语保证编译程序不会混淆原语前后的汇编指令.&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;Linux中, 优化屏障:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
barrier()
&lt;/pre&gt;
&lt;p&gt;展开为:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
asm volatile(&amp;quot;&amp;quot;:::&amp;quot;memory&amp;quot;)
&lt;/pre&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;优化屏障&lt;/tt&gt; 并不保证不使当前CPU把汇编指令混在一起执行. -- 这是 &lt;tt class="docutils literal"&gt;内存屏障&lt;/tt&gt; 的作用&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id34"&gt;
&lt;h5&gt;&lt;a class="toc-backref" href="#id142"&gt;5.2.3.2&amp;nbsp;&amp;nbsp;&amp;nbsp;内存屏障确保原语之后的操作开始执行之前, 原语之前的操作已完成.&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;在80x86处理器中, 下列种类的汇编指令是串行的, 他们起到 &lt;tt class="docutils literal"&gt;内存屏障&lt;/tt&gt; 的作用:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;对I/O端口操作的所有指令&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;lock前缀的所有指令&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;写控制寄存器, 系统寄存器或调试寄存器的指令(cli, sti)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Pentium 4中引入的&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;lfence: 读内存屏障, 仅作用于读内存的指令&lt;/li&gt;
&lt;li&gt;sfence: 写内存屏障, 仅作用于写内存的指令&lt;/li&gt;
&lt;li&gt;mfence: 读-写内存屏障.&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;少数汇编指令, 如iret.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Linux使用6个内存屏障原语, 它们同时也被作为优化屏障:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
mb()        Memory barrier for MP and UP
rmb()       Read memory barrier for MP and UP
wmb()       Write memory barrier for MP and UP
smp_mb()    Memory barrier for MP only
smp_rmb()   Read memory barrier for MP only
smp_wmb()   Write memory barrier for MP only
&lt;/pre&gt;
&lt;p&gt;rmb 可能展开为:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
asm volatile(&amp;quot;lfence&amp;quot;)
asm volatile(&amp;quot;lock;addl $0,0(%%esp)&amp;quot;:::&amp;quot;memory&amp;quot;)
lock; addl $0,0(%%esp)
&lt;/pre&gt;
&lt;p&gt;wmb可能展开为:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
barrier()
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id35"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id143"&gt;5.2.4&amp;nbsp;&amp;nbsp;&amp;nbsp;自旋锁&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;锁里面最简单的一种, 忙等锁.&lt;/p&gt;
&lt;p&gt;很多自旋锁只会锁1ms时间, 所以, 自旋锁不会造成很大的浪费.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
spin_lock_init() Set the spin lock to 1 (unlocked)
spin_lock() Cycle until spin lock becomes 1 (unlocked), then set it to 0 (locked)
spin_unlock() Set the spin lock to 1 (unlocked)
spin_unlock_wait() Wait until the spin lock becomes 1 (unlocked)
spin_is_locked() Return 0 if the spin lock is set to 1 (unlocked); 1 otherwise
spin_trylock() Set the spin lock to 0 (locked), and return 1 if the previous value of the lock was 1; 0 oth- erwise
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id36"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id144"&gt;5.2.5&amp;nbsp;&amp;nbsp;&amp;nbsp;读/写自旋锁&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;目的是提高内核的并行能力.&lt;/p&gt;
&lt;p&gt;允许多个读并发.&lt;/p&gt;
&lt;p&gt;原来:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
-    读  写
读   0   0
写   0   0
&lt;/pre&gt;
&lt;p&gt;现在:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
-    读  写
读   1   0
写   0   0
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id37"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id145"&gt;5.2.6&amp;nbsp;&amp;nbsp;&amp;nbsp;顺序锁&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;SeqLock, 它和读写自旋锁很像, 只是它赋予写者更高的优先级,&lt;/p&gt;
&lt;p&gt;即使有读者正在读, 也允许写者继续写,&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;这种策略的好处是写者永远不会等待(除非有另一个写者正在写),&lt;/li&gt;
&lt;li&gt;缺点是读者必须反复读相同的数据, 直到它获得有效的副本.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每个读者在读前后两次读 &lt;tt class="docutils literal"&gt;顺序计数器&lt;/tt&gt; , 如果两次读到的值不相同, 说明新的写者已经开始写并增加了 &lt;tt class="docutils literal"&gt;顺序计数器&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;p237, 在内核更新Time的时候使用了顺序锁, 这时读者其实可以只读一次, 因为取到旧时间关系不大.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="rcu"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id146"&gt;5.2.7&amp;nbsp;&amp;nbsp;&amp;nbsp;读-拷贝-更新 (RCU通过指针而不是锁)&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;不用锁:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;RCU只保护被动态分配 通过指针引用的数据结构&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;读者几乎不做任何事情来防止竞争条件, 得靠写者.&lt;/p&gt;
&lt;p&gt;写着要更新数据结构时, 生成整个数据结构的副本, 写者修改这个副本, 修改完成后改变指针.&lt;/p&gt;
&lt;p&gt;改变指针是一个原子操作(我们在cruiser中需要动态加载配置的时候就是这样做的)&lt;/p&gt;
&lt;p&gt;写着修改指针后, 不能马上释放数据结构的旧副本, 因为写着修改时, 可能有读者拿着老指针呢.!!! &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--从前自己改这个模块的时候根本没意识到,&lt;/span&gt; 只是模仿了浩哥的代码&lt;/tt&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id38"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id147"&gt;5.2.8&amp;nbsp;&amp;nbsp;&amp;nbsp;信号量&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;类似于自旋锁, 但是在锁的时候不是自旋, 而是挂起.&lt;/p&gt;
&lt;p&gt;信号量结构:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
struct semphore{
    atomic_t count;
    wait: 等待队列
    sleepers: 是否有进程在信号量上睡眠
}
&lt;/pre&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;__up&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;__down&lt;/tt&gt;&lt;/p&gt;
&lt;div class="section" id="completion"&gt;
&lt;h5&gt;&lt;a class="toc-backref" href="#id148"&gt;5.2.8.1&amp;nbsp;&amp;nbsp;&amp;nbsp;补充原语(completion)&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;类似信号量,&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id39"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id149"&gt;5.2.9&amp;nbsp;&amp;nbsp;&amp;nbsp;本地中断禁止&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;div class="section" id="id40"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id150"&gt;5.2.10&amp;nbsp;&amp;nbsp;&amp;nbsp;本地软中断禁止&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="synchronizing-accesses-to-kernel-data-structures"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id151"&gt;5.3&amp;nbsp;&amp;nbsp;&amp;nbsp;Synchronizing Accesses to Kernel Data Structures&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;链表例子.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="examples-of-race-condition-prevention"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id152"&gt;5.4&amp;nbsp;&amp;nbsp;&amp;nbsp;Examples of Race Condition Prevention&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;大内核锁.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="c6-timing-measurements"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id153"&gt;6&amp;nbsp;&amp;nbsp;&amp;nbsp;c6 Timing Measurements&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="clock-and-timer-circuits"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id154"&gt;6.1&amp;nbsp;&amp;nbsp;&amp;nbsp;Clock and Timer Circuits (几种硬件计时器)&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;实时时钟 RTC (CMOS时间 )&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;和CMOS在一个芯片上, 自带电池&lt;/li&gt;
&lt;li&gt;频率在2-8192Hz之间.&lt;/li&gt;
&lt;li&gt;IRQ8&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;时间戳计数器 TSC&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;64位&lt;/li&gt;
&lt;li&gt;每个时钟信号来加1&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;可编程间隔定时器 PIT (8254芯片)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Linux编程为 &lt;tt class="docutils literal"&gt;大约&lt;/tt&gt; 1000Hz, 向IRQ0发中断.&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;CPU本地定时器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;高精度事件定时器 HPET&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;8个32/64位独立计数器, 硬件中还不普遍.&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;PCPI电源管理定时器&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;内核启动时会选择最好的一个计时器&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-linux-timekeeping-architecture"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id155"&gt;6.2&amp;nbsp;&amp;nbsp;&amp;nbsp;The Linux Timekeeping Architecture&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;内核使用两个函数:&lt;/p&gt;
&lt;p&gt;time()
gettimeofday()&lt;/p&gt;
&lt;p&gt;数据结构:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;timer_opts&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;描述硬件定时器(每种硬件一个这个结构)&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;jiffies&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;每个时钟中断加一, &lt;strong&gt;内核就是设置为1000Hz&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;80x86中是32位, (2**32/80000*1000)大约50天回绕到0, 内核处理了溢出.&lt;/li&gt;
&lt;li&gt;jiffies 被初始化为0xfffb6c20(-300,000) 系统启动5分钟后回到0(使得哪些不对jiffies做校验的bug及早发现)&lt;/li&gt;
&lt;li&gt;jiffies通过连接器被转换为一个64为计数器的低32位, 这个64位计数器: jiffies_64&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;xtime (timespec类型 )&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;tv_sec (timestamp的秒数)&lt;/li&gt;
&lt;li&gt;tv_nsec (纳秒)&lt;/li&gt;
&lt;li&gt;初始化时用get_coms_time() 函数从 实时时钟读取.&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id41"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id156"&gt;6.2.1&amp;nbsp;&amp;nbsp;&amp;nbsp;时钟中断时处理&lt;/a&gt;&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;需要判断是否丢失时钟中断.&lt;/li&gt;
&lt;li&gt;计算当前系统的负载(Load)&lt;/li&gt;
&lt;li&gt;更新xtime&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id42"&gt;
&lt;h5&gt;&lt;a class="toc-backref" href="#id157"&gt;6.2.1.1&amp;nbsp;&amp;nbsp;&amp;nbsp;系统负载&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;单处理器: 0意味着没有活跃的进程(除了idle), 1意味着一个单独的进程100%占有cpu.&lt;/p&gt;
&lt;p&gt;大于1说明有几个进程处于running, 共享CPU.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id43"&gt;
&lt;h5&gt;&lt;a class="toc-backref" href="#id158"&gt;6.2.1.2&amp;nbsp;&amp;nbsp;&amp;nbsp;监管内核代码&lt;/a&gt;&lt;/h5&gt;
&lt;div class="section" id="readprofiler-hot-spot"&gt;
&lt;h6&gt;&lt;a class="toc-backref" href="#id159"&gt;6.2.1.2.1&amp;nbsp;&amp;nbsp;&amp;nbsp;readprofiler, 用于确定内核热点(hot spot).&lt;/a&gt;&lt;/h6&gt;
&lt;p&gt;监管器基于非常简单的 &lt;tt class="docutils literal"&gt;蒙特卡洛算法&lt;/tt&gt;, 每次时钟中断发生时, 内核确定中断是否发生在内核态, 如果是, 内核从堆栈取出eip寄存器值, 从而确定中断发生前内核正在做什么. 形成采样数据.&lt;/p&gt;
&lt;p&gt;启动内核时需要用 profile=N来开启prifile&lt;/p&gt;
&lt;p&gt;数据可以从 &lt;tt class="docutils literal"&gt;/proc/profile&lt;/tt&gt; 读取, 用 &lt;tt class="docutils literal"&gt;readprofile&lt;/tt&gt; 命令更方便&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="oprofile"&gt;
&lt;h6&gt;&lt;a class="toc-backref" href="#id160"&gt;6.2.1.2.2&amp;nbsp;&amp;nbsp;&amp;nbsp;oprofile&lt;/a&gt;&lt;/h6&gt;
&lt;p&gt;此外, 内核提供另一个监管器: &lt;tt class="docutils literal"&gt;oprofile&lt;/tt&gt;, 还可一监控用户态程序热点.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id44"&gt;
&lt;h6&gt;&lt;a class="toc-backref" href="#id161"&gt;6.2.1.2.3&amp;nbsp;&amp;nbsp;&amp;nbsp;检测死锁&lt;/a&gt;&lt;/h6&gt;
&lt;p&gt;通过非屏蔽中断NMI.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id45"&gt;
&lt;h6&gt;&lt;a class="toc-backref" href="#id162"&gt;6.2.1.2.4&amp;nbsp;&amp;nbsp;&amp;nbsp;蒙特卡洛:&lt;/a&gt;&lt;/h6&gt;
&lt;p&gt;蒙特卡罗方法又称统计模拟法、随机抽样技术，是一种随机模拟方法，以概率和统计理论方法为基础的一种计算方法，是使用随机数（或更常见的伪随机数）来解决很多计算问题的方法。&lt;/p&gt;
&lt;p&gt;这个词构忽悠,其实就是随机采样的意思.&lt;/p&gt;
&lt;p&gt;提出：&lt;/p&gt;
&lt;p&gt;蒙特卡罗方法于20世纪40年代美国在第二次世界大战中研制原子弹的“曼哈顿计划”计划的成员S.M.乌拉姆和J.冯·诺伊曼首先提出。数学家冯·诺伊曼用驰名世界的赌城—摩纳哥的Monte Carlo—来命名这种方法，为它蒙上了一层神秘色彩。在这之前，蒙特卡罗方法就已经存在。1777年，法国数学家布丰（Georges Louis Leclere de Buffon，1707—1788）提出用投针实验的方法求圆周率π。这被认为是蒙特卡罗方法的起源。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="updating-the-time-and-date"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id163"&gt;6.3&amp;nbsp;&amp;nbsp;&amp;nbsp;Updating the Time and Date&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="updating-system-statistics"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id164"&gt;6.4&amp;nbsp;&amp;nbsp;&amp;nbsp;Updating System Statistics&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="software-timers-and-delay-functions"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id165"&gt;6.5&amp;nbsp;&amp;nbsp;&amp;nbsp;Software Timers and Delay Functions&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="system-calls-related-to-timing-measurements"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id166"&gt;6.6&amp;nbsp;&amp;nbsp;&amp;nbsp;System Calls Related to Timing Measurements&lt;/a&gt;&lt;/h3&gt;
&lt;pre class="literal-block"&gt;
time()
gettimeofday()
adjtimex()
settimer() / alarm()
&lt;/pre&gt;
&lt;p&gt;posix 相关系统调用:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
clock_gettime()
...
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="c7-process-scheduling"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id167"&gt;7&amp;nbsp;&amp;nbsp;&amp;nbsp;c7 Process Scheduling&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;亲和性:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sched_setaffinity()
sched_getaffinity()
&lt;/pre&gt;
&lt;div class="section" id="scheduling-policy"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id168"&gt;7.1&amp;nbsp;&amp;nbsp;&amp;nbsp;Scheduling Policy&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="the-scheduling-algorithm"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id169"&gt;7.2&amp;nbsp;&amp;nbsp;&amp;nbsp;The Scheduling Algorithm&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="data-structures-used-by-the-scheduler"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id170"&gt;7.3&amp;nbsp;&amp;nbsp;&amp;nbsp;Data Structures Used by the Scheduler&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;140个双向链表, 代表140个优先级,&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="functions-used-by-the-scheduler-schedule"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id171"&gt;7.4&amp;nbsp;&amp;nbsp;&amp;nbsp;Functions Used by the Scheduler(schedule)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;schedule 执行的前半部分和后半部分在两个进程中, 中间还有一段时间不属于任何一个进程.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id46"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id172"&gt;7.5&amp;nbsp;&amp;nbsp;&amp;nbsp;多处理器系统中 执行队列的平衡&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Linux 一直使用对称多处理器模型(), 内核不应该对任何一个CPU有偏好(有点分布式系统中无master的意思)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;超线程:&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;当前线程在访问内存的间隙, 处理器可以利用机器周期去执行另外一个线程,&lt;/li&gt;
&lt;li&gt;一个超线程的物理CPU可以被linux看作是几个逻辑CPU&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;NUMA&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;把CPU和RAM以本地节点为单位分组(通常一个节点包括一个CPU和几个RAM芯片)&lt;/li&gt;
&lt;li&gt;CPU访问本地RAM非常快, 防伪其它节点就非常慢.&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;一般来说, 一个进程总是在一个CPU上执行, 但是也会在CPU之间迁移.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;任何一个可运行的进程都不会同时出现在两个或多个CPU的运行队列中, 一个保持可运行状态的进程通常被限制在一个固定的CPU上.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;内核周期性的检查运行队列是否平衡, 必要时迁移.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="system-calls-related-to-scheduling"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id173"&gt;7.6&amp;nbsp;&amp;nbsp;&amp;nbsp;System Calls Related to Scheduling&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="c8-memory-management"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id174"&gt;8&amp;nbsp;&amp;nbsp;&amp;nbsp;c8 Memory Management&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="page-frame-management"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id175"&gt;8.1&amp;nbsp;&amp;nbsp;&amp;nbsp;Page Frame Management&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;页描述符大小为32字节(放在mem_map中), 用于描述一个4k大小的页, 所以内存的(32/4k=0.8%)  的内存用于存放页描述符(被内核使用)&lt;/p&gt;
&lt;div class="section" id="numa"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id176"&gt;8.1.1&amp;nbsp;&amp;nbsp;&amp;nbsp;非一致内存访问(NUMA)&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Non-Uniform Memory Access, 对比与80x86体系结构的UMA模型(一致性内存访问)&lt;/p&gt;
&lt;p&gt;NUMA中, 某个CPU对不同内存单元的访问时间可能不一样, 系统中的CPU和内存被划分为几个节点. 一个节点内的cpu访问自己节点的内存很快, 跨节点访问就很慢.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="memory-area-management"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id177"&gt;8.2&amp;nbsp;&amp;nbsp;&amp;nbsp;Memory Area Management&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;slab分配器: 类似于 预分配/对象池 的概念&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;把内存去看作对象, 有构造/析构函数.&lt;/li&gt;
&lt;li&gt;内核反复申请同一类型的内存区.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;slab着色 - 解决高速缓存颠簸的问题.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="noncontiguous-memory-area-management"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id178"&gt;8.3&amp;nbsp;&amp;nbsp;&amp;nbsp;Noncontiguous Memory Area Management&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="c9-process-address-space"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id179"&gt;9&amp;nbsp;&amp;nbsp;&amp;nbsp;c9. Process Address Space&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="the-processs-address-space"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id180"&gt;9.1&amp;nbsp;&amp;nbsp;&amp;nbsp;The Process’s Address Space&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="the-memory-descriptor"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id181"&gt;9.2&amp;nbsp;&amp;nbsp;&amp;nbsp;The Memory Descriptor&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="memory-regions"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id182"&gt;9.3&amp;nbsp;&amp;nbsp;&amp;nbsp;Memory Regions&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="page-fault-exception-handler"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id183"&gt;9.4&amp;nbsp;&amp;nbsp;&amp;nbsp;Page Fault Exception Handler&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="creating-and-deleting-a-process-address-space"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id184"&gt;9.5&amp;nbsp;&amp;nbsp;&amp;nbsp;Creating and Deleting a Process Address Space&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="managing-the-heap"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id185"&gt;9.6&amp;nbsp;&amp;nbsp;&amp;nbsp;Managing the Heap&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="c10-system-calls"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id186"&gt;10&amp;nbsp;&amp;nbsp;&amp;nbsp;c10 System Calls&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="posix-apis-and-system-calls"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id187"&gt;10.1&amp;nbsp;&amp;nbsp;&amp;nbsp;POSIX APIs and System Calls&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="system-call-handler-and-service-routines"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id188"&gt;10.2&amp;nbsp;&amp;nbsp;&amp;nbsp;System Call Handler and Service Routines&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="entering-and-exiting-a-system-call"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id189"&gt;10.3&amp;nbsp;&amp;nbsp;&amp;nbsp;Entering and Exiting a System Call&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="parameter-passing"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id190"&gt;10.4&amp;nbsp;&amp;nbsp;&amp;nbsp;Parameter Passing&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="kernel-wrapper-routines"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id191"&gt;10.5&amp;nbsp;&amp;nbsp;&amp;nbsp;Kernel Wrapper Routines&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="c11-signals"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id192"&gt;11&amp;nbsp;&amp;nbsp;&amp;nbsp;c11. Signals&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="the-role-of-signals"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id193"&gt;11.1&amp;nbsp;&amp;nbsp;&amp;nbsp;The Role of Signals&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="generating-a-signal"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id194"&gt;11.2&amp;nbsp;&amp;nbsp;&amp;nbsp;Generating a Signal&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="delivering-a-signal"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id195"&gt;11.3&amp;nbsp;&amp;nbsp;&amp;nbsp;Delivering a Signal&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="system-calls-related-to-signal-handling"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id196"&gt;11.4&amp;nbsp;&amp;nbsp;&amp;nbsp;System Calls Related to Signal Handling&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="c12-the-virtual-filesystem"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id197"&gt;12&amp;nbsp;&amp;nbsp;&amp;nbsp;c12 The Virtual Filesystem&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="the-role-of-the-virtual-filesystem-vfs"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id198"&gt;12.1&amp;nbsp;&amp;nbsp;&amp;nbsp;The Role of the Virtual Filesystem (VFS)&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="vfs-data-structures"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id199"&gt;12.2&amp;nbsp;&amp;nbsp;&amp;nbsp;VFS Data Structures&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="filesystem-types"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id200"&gt;12.3&amp;nbsp;&amp;nbsp;&amp;nbsp;Filesystem Types&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="filesystem-handling"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id201"&gt;12.4&amp;nbsp;&amp;nbsp;&amp;nbsp;Filesystem Handling&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="pathname-lookup"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id202"&gt;12.5&amp;nbsp;&amp;nbsp;&amp;nbsp;Pathname Lookup&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="implementations-of-vfs-system-calls"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id203"&gt;12.6&amp;nbsp;&amp;nbsp;&amp;nbsp;Implementations of VFS System Calls&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="file-locking"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id204"&gt;12.7&amp;nbsp;&amp;nbsp;&amp;nbsp;File Locking&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="c13-i-o-architecture-and-device-drivers"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id205"&gt;13&amp;nbsp;&amp;nbsp;&amp;nbsp;c13. I/O Architecture and Device Drivers&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="i-o-architecture"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id206"&gt;13.1&amp;nbsp;&amp;nbsp;&amp;nbsp;I/O Architecture&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="the-device-driver-model"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id207"&gt;13.2&amp;nbsp;&amp;nbsp;&amp;nbsp;The Device Driver Model&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="device-files"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id208"&gt;13.3&amp;nbsp;&amp;nbsp;&amp;nbsp;Device Files&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="device-drivers"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id209"&gt;13.4&amp;nbsp;&amp;nbsp;&amp;nbsp;Device Drivers&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="character-device-drivers"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id210"&gt;13.5&amp;nbsp;&amp;nbsp;&amp;nbsp;Character Device Drivers&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="c14-block-device-drivers"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id211"&gt;14&amp;nbsp;&amp;nbsp;&amp;nbsp;c14. Block Device Drivers&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="block-devices-handling"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id212"&gt;14.1&amp;nbsp;&amp;nbsp;&amp;nbsp;Block Devices Handling&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="the-generic-block-layer"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id213"&gt;14.2&amp;nbsp;&amp;nbsp;&amp;nbsp;The Generic Block Layer&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="the-i-o-scheduler"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id214"&gt;14.3&amp;nbsp;&amp;nbsp;&amp;nbsp;The I/O Scheduler&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="block-device-drivers"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id215"&gt;14.4&amp;nbsp;&amp;nbsp;&amp;nbsp;Block Device Drivers&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="opening-a-block-device-file"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id216"&gt;14.5&amp;nbsp;&amp;nbsp;&amp;nbsp;Opening a Block Device File&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="c15-the-page-cache"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id217"&gt;15&amp;nbsp;&amp;nbsp;&amp;nbsp;c15. The Page Cache&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="the-page-cache"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id218"&gt;15.1&amp;nbsp;&amp;nbsp;&amp;nbsp;The Page Cache&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="storing-blocks-in-the-page-cache"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id219"&gt;15.2&amp;nbsp;&amp;nbsp;&amp;nbsp;Storing Blocks in the Page Cache&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="writing-dirty-pages-to-disk"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id220"&gt;15.3&amp;nbsp;&amp;nbsp;&amp;nbsp;Writing Dirty Pages to Disk&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="the-sync-fsync-and-fdatasync-system-calls"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id221"&gt;15.4&amp;nbsp;&amp;nbsp;&amp;nbsp;The sync( ), fsync( ), and fdatasync() System Calls&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="c16-accessing-files"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id222"&gt;16&amp;nbsp;&amp;nbsp;&amp;nbsp;c16. Accessing Files&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="reading-and-writing-a-file"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id223"&gt;16.1&amp;nbsp;&amp;nbsp;&amp;nbsp;Reading and Writing a File&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="memory-mapping"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id224"&gt;16.2&amp;nbsp;&amp;nbsp;&amp;nbsp;Memory Mapping&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="direct-i-o-transfers"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id225"&gt;16.3&amp;nbsp;&amp;nbsp;&amp;nbsp;Direct I/O Transfers&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="asynchronous-i-o"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id226"&gt;16.4&amp;nbsp;&amp;nbsp;&amp;nbsp;Asynchronous I/O&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="c17-page-frame-reclaiming"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id227"&gt;17&amp;nbsp;&amp;nbsp;&amp;nbsp;c17. Page Frame Reclaiming&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="the-page-frame-reclaiming-algorithm"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id228"&gt;17.1&amp;nbsp;&amp;nbsp;&amp;nbsp;The Page Frame Reclaiming Algorithm&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="reverse-mapping"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id229"&gt;17.2&amp;nbsp;&amp;nbsp;&amp;nbsp;Reverse Mapping&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="implementing-the-pfra"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id230"&gt;17.3&amp;nbsp;&amp;nbsp;&amp;nbsp;Implementing the PFRA&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="swapping"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id231"&gt;17.4&amp;nbsp;&amp;nbsp;&amp;nbsp;Swapping&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="c18-the-ext2-and-ext3-filesystems"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id232"&gt;18&amp;nbsp;&amp;nbsp;&amp;nbsp;c18. The Ext2 and Ext3 Filesystems&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="general-characteristics-of-ext2"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id233"&gt;18.1&amp;nbsp;&amp;nbsp;&amp;nbsp;General Characteristics of Ext2&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="ext2-disk-data-structures"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id234"&gt;18.2&amp;nbsp;&amp;nbsp;&amp;nbsp;Ext2 Disk Data Structures&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="ext2-memory-data-structures"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id235"&gt;18.3&amp;nbsp;&amp;nbsp;&amp;nbsp;Ext2 Memory Data Structures&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="creating-the-ext2-filesystem"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id236"&gt;18.4&amp;nbsp;&amp;nbsp;&amp;nbsp;Creating the Ext2 Filesystem&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="ext2-methods"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id237"&gt;18.5&amp;nbsp;&amp;nbsp;&amp;nbsp;Ext2 Methods&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="managing-ext2-disk-space"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id238"&gt;18.6&amp;nbsp;&amp;nbsp;&amp;nbsp;Managing Ext2 Disk Space&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="the-ext3-filesystem"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id239"&gt;18.7&amp;nbsp;&amp;nbsp;&amp;nbsp;The Ext3 Filesystem&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="c19-process-communication"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id240"&gt;19&amp;nbsp;&amp;nbsp;&amp;nbsp;c19. Process Communication&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="pipes"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id241"&gt;19.1&amp;nbsp;&amp;nbsp;&amp;nbsp;Pipes&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="fifos"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id242"&gt;19.2&amp;nbsp;&amp;nbsp;&amp;nbsp;FIFOs&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="system-v-ipc"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id243"&gt;19.3&amp;nbsp;&amp;nbsp;&amp;nbsp;System V IPC&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="posix-message-queues"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id244"&gt;19.4&amp;nbsp;&amp;nbsp;&amp;nbsp;POSIX Message Queues&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="c20-program-execution"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id245"&gt;20&amp;nbsp;&amp;nbsp;&amp;nbsp;c20. Program Execution&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="executable-files"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id246"&gt;20.1&amp;nbsp;&amp;nbsp;&amp;nbsp;Executable Files&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="executable-formats"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id247"&gt;20.2&amp;nbsp;&amp;nbsp;&amp;nbsp;Executable Formats&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="execution-domains"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id248"&gt;20.3&amp;nbsp;&amp;nbsp;&amp;nbsp;Execution Domains&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="the-exec-functions"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id249"&gt;20.4&amp;nbsp;&amp;nbsp;&amp;nbsp;The exec Functions&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id47"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id250"&gt;21&amp;nbsp;&amp;nbsp;&amp;nbsp;总结&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;其实中文版翻译还算可以, 中文看不懂的地方, 去看英文版, 发现一样看不懂.&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;不过看英文版映像深一些.&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;读这本书, 需要和源码一起看&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;比如c2 内存寻址 里面详细列出了页表操作的宏定义, 读的时候就每必要细究.&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;之前一致理解有内核和用户进程这两种东西&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;&lt;p class="first"&gt;实际上, 应该是一个进程, 可以运行在用户态, 也可以运行在内核态&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;当发起系统调用的时候, 进入内核态, 切换栈为内核栈,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;用户态只能访问本进程的部分线性地址空间.&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;进入内核态后, 可以访问全部线性地址空间.&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;还有一些进程是只在内核态运行的&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;内核在运行中的代码形态(CPU执行内核代码的时候)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;初始化系统&lt;/li&gt;
&lt;li&gt;普通进程调用系统调用, 进入内核态, 用该进程的内核堆栈执行.&lt;/li&gt;
&lt;li&gt;几个内核线程&lt;/li&gt;
&lt;li&gt;中断处理&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;c5 Kernel Synchronization&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;对各种锁的介绍挺全面.&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;自旋锁是锁里面最简单的一种,&lt;/li&gt;
&lt;li&gt;信号量是自旋锁的一种改进&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;对内存屏障的介绍, 看一遍就懂了&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="all"></category></entry><entry><title>vimcasts笔记</title><link href="/vim-vimcasts.html" rel="alternate"></link><updated>2013-12-05T11:13:53+08:00</updated><author><name>ning</name></author><id>tag:,2013-12-05:vim-vimcasts.html</id><summary type="html">&lt;div class="contents topic" id="table-of-contents"&gt;
&lt;p class="topic-title first"&gt;Table of Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id1" id="id7"&gt;关于&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#show-invisibles" id="id8"&gt;#1.Show invisibles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#tabs-and-spaces" id="id9"&gt;#2.Tabs and Spaces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#whitespace-preferences-and-filetypes" id="id10"&gt;#3.Whitespace preferences and filetypes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#tidying-whitespace" id="id11"&gt;#4.Tidying whitespace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#indentation-commands" id="id12"&gt;#5.Indentation commands&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id2" id="id13"&gt;缩进规则&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#working-with-buffers" id="id14"&gt;#6.Working with buffers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#working-with-windows-5-32" id="id15"&gt;#7 Working with windows (5:32)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#working-with-tabs-3-17" id="id16"&gt;#8 Working with tabs (3:17)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#how-to-use-tabs-5-28" id="id17"&gt;#9 How to use tabs (5:28)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#nice-demo-creating-the-vimcasts-logo-as-ascii-art-5-47" id="id18"&gt;#10 &amp;lt;nice-demo&amp;gt;Creating the Vimcasts logo as ASCII art (5:47)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#using-the-changelist-and-jumplist-3-21" id="id19"&gt;#11 Using the changelist and jumplist (3:21)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#modal-editing-undo-redo-and-repeat-5-26" id="id20"&gt;#12 Modal editing: undo, redo and repeat (5:26)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#cleaning-up-with-vim-0-36" id="id21"&gt;#13 Cleaning up with Vim (0:36)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#the-edit-command-3-50" id="id22"&gt;#14 The :edit command (3:50)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#the-file-explorer-5-36" id="id23"&gt;#15 The file explorer (5:36)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#soft-wrapping-text-4-54" id="id24"&gt;#16 Soft wrapping text (4:54)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#hard-wrapping-text-5-23" id="id25"&gt;#17 Hard wrapping text (5:23)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#formatting-text-with-par-5-12" id="id26"&gt;#18 Formatting text with par (5:12)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#spell-checking-5-42" id="id27"&gt;#19 Spell checking (5:42)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#running-vim-within-irb-4-35" id="id28"&gt;#20 Running Vim within IRB (4:35)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#nice-demo-converting-markdown-to-struct-ured-html-with-a-macro-9-25" id="id29"&gt;#21 &amp;lt;nice-demo&amp;gt;Converting markdown to struct_ured HTML with a macro (9:25)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#nice-demo-selecting-columns-with-visual-block-mode-4-21" id="id30"&gt;#22 &amp;lt;nice-demo&amp;gt;Selecting columns with visual block mode (4:21)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#converting-haml-to-erb-with-vim-macros-7-36" id="id31"&gt;#23 Converting HAML to ERB with Vim macros (7:36)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#updating-your-vimrc-file-on-the-fly-2-51" id="id32"&gt;#24 Updating your vimrc file on the fly (2:51)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#creating-colorschemes-for-vim-9-44" id="id33"&gt;#25 Creating colorschemes for Vim (9:44)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#bubbling-text-6-23" id="id34"&gt;#26 Bubbling text (6:23)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#synchronizing-plugins-with-git-submodules-and-pathogen-9-24" id="id35"&gt;#27 Synchronizing plugins with git submodules and pathogen (9:24)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#refining-search-patterns-with-the-command-line-window-7-51" id="id36"&gt;#28 Refining search patterns with the command-line window (7:51)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#aligning-text-with-tabular-vim-5-11" id="id37"&gt;#29 Aligning text with Tabular.vim (5:11)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#undo-branching-and-gundo-vim-6-30" id="id38"&gt;#30 Undo branching and Gundo.vim (6:30)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id3" id="id39"&gt;例1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id4" id="id40"&gt;例2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#undo-branch" id="id41"&gt;undo branch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#gundo" id="id42"&gt;gundo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#fugitive-vim-a-complement-to-command-line-git-8-27" id="id43"&gt;#31 Fugitive.vim - a complement to command line git (8:27)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#fugitive-vim-working-with-the-git-index-11-41" id="id44"&gt;#32 Fugitive.vim - working with the git index (11:41)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#fugitive-vim-resolving-merge-conflicts-with-vimdiff-11-35" id="id45"&gt;#33 Fugitive.vim - resolving merge conflicts with vimdiff (11:35)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#fugitive-vim-browsing-the-git-object-database-9-45" id="id46"&gt;#34 Fugitive.vim - browsing the git object database (9:45)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#fugitive-vim-exploring-the-history-of-a-git-repository-10-04" id="id47"&gt;#35 Fugitive.vim - exploring the history of a git repository (10:04)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#vimgolf-prime-numbers-6-53" id="id48"&gt;#36 VimGolf - Prime Numbers (6:53)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#how-to-fold-8-49" id="id49"&gt;#37 How to fold (8:49)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#writing-a-custom-fold-expression-12-07" id="id50"&gt;#38 Writing a custom fold expression (12:07)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#profiling-vimscript-performance-8-09" id="id51"&gt;#39 Profiling Vimscript performance (8:09)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#long-range-line-duplication-6-31" id="id52"&gt;#40 Long-range line duplication (6:31)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#meet-the-arglist-4-57" id="id53"&gt;#41 Meet the arglist (4:57)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#populating-the-arglist-5-31" id="id54"&gt;#42 Populating the arglist (5:31)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#using-argdo-to-change-multiple-files-5-40" id="id55"&gt;#43 Using :argdo to change multiple files (5:40)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#search-multiple-files-with-vimgrep-7-25" id="id56"&gt;#44 Search multiple files with :vimgrep (7:25)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#project-wide-find-and-replace-6-25" id="id57"&gt;#45 Project-wide find and replace (6:25)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#search-for-the-selected-text-4-39" id="id58"&gt;#46 Search for the selected text (4:39)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#smart-search-with-subvert-5-33" id="id59"&gt;&amp;#64;47 Smart search with :Subvert (5:33)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#supercharged-substitution-with-subvert-7-09" id="id60"&gt;&amp;#64;48 Supercharged substitution with :Subvert (7:09)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#enhanced-abbreviations-with-abolish-3-09" id="id61"&gt;&amp;#64;49 Enhanced abbreviations with :Abolish (3:09)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#an-introduction-to-vspec-7-15" id="id62"&gt;#50 An introduction to vspec (7:15)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#simple-operations-using-the-default-register-4-07" id="id63"&gt;#51 Simple operations using the default register (4:07)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#meet-the-yank-register-4-29" id="id64"&gt;#52 Meet the yank register (4:29)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#using-vim-s-named-registers-3-29" id="id65"&gt;#53 Using Vim's named registers (3:29)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#pasting-from-visual-mode-3-33" id="id66"&gt;#54 Pasting from Visual mode (3:33)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#pasting-from-insert-mode-4-15" id="id67"&gt;#55 Pasting from Insert mode (4:15)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#simple-calculations-with-vim-s-expression-register-4-02" id="id68"&gt;#56 Simple calculations with Vim's expression register (4:02)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#evaluating-scripts-with-vim-s-expression-register-3-56" id="id69"&gt;#57 Evaluating scripts with Vim's expression register (3:56)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#accessing-the-system-clipboard-from-vim-4-48" id="id70"&gt;#58 Accessing the system clipboard from Vim (4:48)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#using-vim-s-paste-mode-with-the-system-paste-command-4-25" id="id71"&gt;#59 Using Vim's paste mode with the system paste command (4:25)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#comparing-buffers-with-vimdiff-4-16" id="id72"&gt;#60 Comparing buffers with vimdiff (4:16)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#creating-repeatable-mappings-with-repeat-vim-4-33" id="id73"&gt;#61 Creating repeatable mappings with repeat.vim (4:33)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id5" id="id74"&gt;关于&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#ning-vim-modline" id="id75"&gt;ning: vim modline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id6" id="id76"&gt;总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;关于&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这个系列视频来自:
&lt;a class="reference external" href="http://vimcasts.org/episodes/archive"&gt;http://vimcasts.org/episodes/archive&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;作者每个月会录1-5个视频放出来.从2010年坚持到现在.&lt;/p&gt;
&lt;p&gt;这个网站的作者经常进行 vim 课程, $250 每次.(4小时)
他也是 &amp;lt;Practical Vim&amp;gt; 的作者(&lt;strong&gt;豆瓣8.9分&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;对tabstop 不熟悉的, 建议观看1,2,4&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="show-invisibles"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;#1.Show invisibles&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;显示不可见字符:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
set list
set nolist
&lt;/pre&gt;
&lt;p&gt;修改使用的不可见字符样式:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;quot; Use the same symbols as TextMate for tabstops and EOLs
set listchars=tab:▸\ ,eol:¬
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="tabs-and-spaces"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;#2.Tabs and Spaces&lt;/a&gt;&lt;/h2&gt;
&lt;table class="docutils field-list" frame="void" rules="none"&gt;
&lt;col class="field-name" /&gt;
&lt;col class="field-body" /&gt;
&lt;tbody valign="top"&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;tabstop:&lt;/th&gt;&lt;td class="field-body"&gt;tab符宽度&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;softtabstop:&lt;/th&gt;&lt;td class="field-body"&gt;使用&amp;lt;-键删除的时候, 删除多少宽度&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;shiftwidth:&lt;/th&gt;&lt;td class="field-body"&gt;用&amp;gt;, &amp;lt;缩进的时候, 插入多宽.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;expandtab:&lt;/th&gt;&lt;td class="field-body"&gt;输入的tab, shift 时, 都替换为空格.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;默认值:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
tabstop = 8
softtabstop = 0
shiftwidth = 8
no expandtab
&lt;/pre&gt;
&lt;p&gt;不一样会很混乱&lt;/p&gt;
&lt;p&gt;结论:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;保证 tabstop == softtabstop == shiftwidth&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;retab&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="whitespace-preferences-and-filetypes"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;#3.Whitespace preferences and filetypes&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;用autocommand实现对python 和Makefile 不同的缩进设置.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
autocmd FileType html setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType css setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType javascript setlocal ts=4 sts=4 sw=4 noexpandtab
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="tidying-whitespace"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;#4.Tidying whitespace&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;convert between tabs and spaces.&lt;/li&gt;
&lt;li&gt;strip trailing whitespace,&lt;/li&gt;
&lt;li&gt;how to remove blank lines from a file.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;noexpandtab 的时候, &lt;cite&gt;retab&lt;/cite&gt; 把space 变成tab,
expandtab 的时候  &lt;cite&gt;retab&lt;/cite&gt; 把tab变成space.&lt;/p&gt;
&lt;p&gt;不错的函数例子, 保存当前位置:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
function! &amp;lt;SID&amp;gt;StripTrailingWhitespaces()
    &amp;quot; Preparation: save last search, and cursor position.
    let _s=&amp;#64;/
    let l = line(&amp;quot;.&amp;quot;)
    let c = col(&amp;quot;.&amp;quot;)
    &amp;quot; Do the business:
    %s/\s\+$//e
    &amp;quot; Clean up: restore previous search history, and cursor position
    let &amp;#64;/=_s
    call cursor(l, c)
endfunction
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;删除空白行&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
:g/^$/d
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;g命令&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;:g 表示范围 &lt;tt class="docutils literal"&gt;global command&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;d 是一个Ex command&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="indentation-commands"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id12"&gt;#5.Indentation commands&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;就是讲&amp;gt;&amp;gt; 和 &amp;lt;&amp;lt;
还有:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
vmap &amp;lt;D-[&amp;gt; &amp;lt;gv (我用tab和shift-tab)
vmap &amp;lt;D-]&amp;gt; &amp;gt;gv
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;N模式下用 &lt;tt class="docutils literal"&gt;==&lt;/tt&gt;, V模式下用 &lt;tt class="docutils literal"&gt;=&lt;/tt&gt; 格式化,&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;vi}&lt;/tt&gt; 选择{}中的代码.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;=i}&lt;/tt&gt; 格式化{}中的代码&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id13"&gt;缩进规则&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;~/.vim/indent/python.vim&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="working-with-buffers"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id14"&gt;#6.Working with buffers&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;讲的不错:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
:buffers
1 #    &amp;quot;.recent&amp;quot;                      line 2        # 是上一个活跃buffer
2      &amp;quot;./notes/misc/vim_usage.rst&amp;quot;   line 217
3 %a   &amp;quot;./notes/misc/vim-vimcasts.rst&amp;quot; line 123     %a是active buffer
&lt;/pre&gt;
&lt;p&gt;如果修改了一下 .recent. 就需要 bn! 才能切到下一个buffer:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
:ls
1 #h + &amp;quot;.recent&amp;quot;                      line 3            +表示有modify,  h 表示hidden
2 %a   &amp;quot;./notes/misc/vim_usage.rst&amp;quot;   line 217
3  a   &amp;quot;./notes/misc/vim-vimcasts.rst&amp;quot; line 0
&lt;/pre&gt;
&lt;p&gt;bn时不要求buffer 一定要写入:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
:set hidden
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;:ls&lt;/tt&gt;     show the buffer list&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;:bn&lt;/tt&gt;     open the next buffer in t        he current window (cycles from the end of the list to the beginning).&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;:bp&lt;/tt&gt;     open the previous buffer in the current window (cycles from the start of the  list to the end).&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;CTRL-^&lt;/span&gt;&lt;/tt&gt;   switch to the alternate file&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="working-with-windows-5-32"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id15"&gt;#7 Working with windows (5:32)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;知识通过读 &lt;tt class="docutils literal"&gt;window&lt;/tt&gt; 一节, 已经知道, 演示的例子不错.&lt;/p&gt;
&lt;p&gt;移动焦点:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ctrl-w hjkl
&lt;/pre&gt;
&lt;p&gt;移动窗口:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ctrl-w HJKL
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="working-with-tabs-3-17"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id16"&gt;#8 Working with tabs (3:17)&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="literal-block"&gt;
:tabedit xxx.txt

:tabonly

:3gt, 直接到第几个tab.
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
map &amp;lt;C-1&amp;gt; 1gt
map &amp;lt;C-2&amp;gt; 2gt
map &amp;lt;C-3&amp;gt; 3gt
map &amp;lt;C-4&amp;gt; 4gt
map &amp;lt;C-5&amp;gt; 5gt
map &amp;lt;C-6&amp;gt; 6gt
map &amp;lt;C-7&amp;gt; 7gt
map &amp;lt;C-8&amp;gt; 8gt
map &amp;lt;C-9&amp;gt; 9gt
map &amp;lt;C-0&amp;gt; :tablast&amp;lt;CR&amp;gt;
&lt;/pre&gt;
&lt;p&gt;可惜在我这用不了&lt;/p&gt;
&lt;pre class="literal-block"&gt;
tabmove
tabmove 1
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="how-to-use-tabs-5-28"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id17"&gt;#9 How to use tabs (5:28)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这一节基本没有什么内容..&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="nice-demo-creating-the-vimcasts-logo-as-ascii-art-5-47"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id18"&gt;#10 &amp;lt;nice-demo&amp;gt;Creating the Vimcasts logo as ASCII art (5:47)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ASCII art&lt;/p&gt;
&lt;p&gt;在线工具: &lt;a class="reference external" href="http://patorjk.com/software/taag/#p=display&amp;amp;v=0&amp;amp;f=Bulbhead&amp;amp;t=hello"&gt;http://patorjk.com/software/taag/#p=display&amp;amp;v=0&amp;amp;f=Bulbhead&amp;amp;t=hello&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;宏:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
qavwr_jq
q      q  两个q作为起始和结束
 a        表示放在a这个寄存器.
&lt;/pre&gt;
&lt;p&gt;这一节对vim 的:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;V模式,&lt;/li&gt;
&lt;li&gt;ctrl+v 模式,&lt;/li&gt;
&lt;li&gt;拷贝,&lt;/li&gt;
&lt;li&gt;replace&lt;/li&gt;
&lt;li&gt;宏&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;等的介绍, 对初学者是 &lt;strong&gt;很好的例子&lt;/strong&gt; .&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;有用hint&lt;/strong&gt;, 如何在ctrl+v (C-V)模式下, 只替换选中的内容:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
aaxxxaaaaaabbbbbb
aaxxxaaaaaabbbbbb
aaxxxaaaaaabbbbbb
aaxxxaaaaaabbbbbb
aaxxxaaaaaabbbbbb
&lt;/pre&gt;
&lt;p&gt;选中后 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;'&amp;lt;,'&amp;gt;s/./x/g&lt;/span&gt;&lt;/tt&gt;, 替换是在整个行上的. 会把ab都替换&lt;/p&gt;
&lt;p&gt;需要加上 &lt;tt class="docutils literal"&gt;\%V&lt;/tt&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
:'&amp;lt;,'&amp;gt;s/\%V./x/g
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="using-the-changelist-and-jumplist-3-21"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id19"&gt;#11 Using the changelist and jumplist (3:21)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;changelist:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
:changes
g;  到上一个编辑点.
g,
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
10g;  到倒数第10个编辑点.

   10   269    0 ============================
    9   197    8 #10 &amp;lt;nice&amp;gt;Creating the Vimcasts logo as ASCII art (5:47)
    8   269    0 ============================
    7   232    0
    6   269    0 ============================
    5   235    0
    4   269    0 ============================
    3   269    0 ============================
    2   238    4 :changes
    1   242    0
&amp;gt;   0   250    0
    1   247    9 ctrl+I
    2   269    0 ============================
    3   248    0
    4   269    0 ============================
    5   239   29 g;  到上一个编辑点.
    6   269    0 ============================
    7   269    0 ============================
    8   240   36 10g;  到倒数第10个编辑点.
    9   269    0 ============================
   10   269    0 ============================
&lt;/pre&gt;
&lt;p&gt;jumplist, 比较熟悉了:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
:jumps
ctrl+O
ctrl+I
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="modal-editing-undo-redo-and-repeat-5-26"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id20"&gt;#12 Modal editing: undo, redo and repeat (5:26)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;.是对编辑命令重复, 不会对移动命令.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;有用&lt;/strong&gt; :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;cw&lt;/tt&gt;  相当于 &lt;tt class="docutils literal"&gt;dwi&lt;/tt&gt;  (之后进入insert模式)&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;I&lt;/tt&gt;  相当于 &lt;tt class="docutils literal"&gt;^i&lt;/tt&gt;    (到行首insert)&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;A&lt;/tt&gt;  相当于 &lt;tt class="docutils literal"&gt;$i&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;o&lt;/tt&gt;  想当于 &lt;tt class="docutils literal"&gt;$a&amp;lt;CR&amp;gt;&lt;/tt&gt; (这个习惯了)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="cleaning-up-with-vim-0-36"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id21"&gt;#13 Cleaning up with Vim (0:36)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;搞笑的.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-edit-command-3-50"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id22"&gt;#14 The :edit command (3:50)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;:e&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;:help expand&lt;/tt&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
map &amp;lt;leader&amp;gt;ew :e &amp;lt;C-R&amp;gt;=expand(&amp;quot;%:p:h&amp;quot;) . &amp;quot;/&amp;quot; &amp;lt;CR&amp;gt;
&lt;/pre&gt;
&lt;p&gt;后, 通过,ew, 就可以:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
e /home/ning/idning/blog_and_notes/notes/misc/
&lt;/pre&gt;
&lt;p&gt;有点用处, 不过不大, 下面这个更有用些:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Thanks to Gary Bernhardt, here is a less horrible way of creating the same mappings:

cnoremap %% &amp;lt;C-R&amp;gt;=fnameescape(expand('%:h')).'/'&amp;lt;cr&amp;gt;

this allows you to expand the directory of the current file anywhere at the command line by pressing %%. A top tip from Max Cantor!
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;cmap&lt;/strong&gt;  是命令行的map, 可以在命令行里面, 用%%表示当前文件路径, &lt;strong&gt;这个收入我的.vimrc&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-file-explorer-5-36"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id23"&gt;#15 The file explorer (5:36)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;用 &lt;tt class="docutils literal"&gt;:E&lt;/tt&gt;, 用原生的目录管理器打开 一个目录, 支持排序，创建文件/目录, 删除, 重命名等:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;quot; Netrw Directory Listing                                        (netrw v149)
&amp;quot;   /home/ning/idning/blog_and_notes
&amp;quot;   Sorted by time
&amp;quot;   Quick Help: &amp;lt;F1&amp;gt;:help  -:go up dir  D:delete  R:rename  s:sort-by  x:exec

%   create a new file
d   create a new directory
R   rename the file/directory under the cursor
D   Delete the file/directory under the cursor
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="soft-wrapping-text-4-54"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id24"&gt;#16 Soft wrapping text (4:54)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;关于:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
set wrap
set linebreak
set showbreak=◀  (在被wrap的行前面加个符号)
&lt;/pre&gt;
&lt;p&gt;关闭wrap:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
set nowrap (此时可以用zl来向右滚动)
&lt;/pre&gt;
&lt;p&gt;开启wrap:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
set wrap
&lt;/pre&gt;
&lt;p&gt;此时默认是会断开单词的, 可以用 &lt;tt class="docutils literal"&gt;:set linebreak&lt;/tt&gt;, 设置为不断开单词, (这和 &lt;tt class="docutils literal"&gt;:set list&lt;/tt&gt; 是冲突的)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;有用: 有wrap时候的移动&lt;/strong&gt; :&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;0&lt;/tt&gt; ,  &lt;tt class="docutils literal"&gt;$&lt;/tt&gt; ,  &lt;tt class="docutils literal"&gt;k&lt;/tt&gt; ,  &lt;tt class="docutils literal"&gt;j&lt;/tt&gt;  等前面加上 &lt;tt class="docutils literal"&gt;g&lt;/tt&gt; , 就是按照break后的行来移动了(按照显示行移动)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="hard-wrapping-text-5-23"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id25"&gt;#17 Hard wrapping text (5:23)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;未看&lt;/p&gt;
&lt;p&gt;强制断行.&lt;/p&gt;
&lt;p&gt;选中一段``gq``就是按照80列格式化,&lt;/p&gt;
&lt;p&gt;the textwidth setting is a number representing the maximum allowed width of a
line. when set to zero, which is the default, vim will use the full width of
the window up to a maximum of 80 characters. when set to a value above zero,
vim will format lines of text so as not to exceed the value of textwidth.&lt;/p&gt;
&lt;p&gt;相关设置:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
set textwidth=xx &amp;quot; 一行最多多宽
默认 textwidth=0, 表示按照当前窗口宽度(但是得小于80)来做断行.

set wrapmargin=xx &amp;quot; 断行的时候, 右边空多少个字符(set nu后就需要这个了) 如果设置了textwidth, 则这个选项没有用
默认wrapmargin=0,
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
::set formatoptions=tcq
默认: formatoptions=tcroql

:set formatoptions+=a &amp;quot; 在输入的时候自动断行. 会比较奇怪. 不要设
&lt;/pre&gt;
&lt;p&gt;两个format engine: formatexpr vs formatprg.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="formatting-text-with-par-5-12"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id26"&gt;#18 Formatting text with par (5:12)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;设置外部fromat engine:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
:set formatprg=par
&lt;/pre&gt;
&lt;p&gt;par 输出更好看, 能处理注释格式.&lt;/p&gt;
&lt;p&gt;太复杂, 木有必要&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="spell-checking-5-42"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id27"&gt;#19 Spell checking (5:42)&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="literal-block"&gt;
:set spell
对txt文件有用, 写代码用不着.

~/.vim/spell/LL.EEE.add
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="running-vim-within-irb-4-35"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id28"&gt;#20 Running Vim within IRB (4:35)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;IRB: interactive ruby shell&lt;/p&gt;
&lt;p&gt;在irb解释器里面调用vim来编辑代码(比如定义一个多行的函数),  &lt;strong&gt;确实不错的特性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;python 要有这个多好&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="nice-demo-converting-markdown-to-struct-ured-html-with-a-macro-9-25"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id29"&gt;#21 &amp;lt;nice-demo&amp;gt;Converting markdown to struct_ured HTML with a macro (9:25)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;surround.vim 插件&lt;/p&gt;
&lt;p&gt;用例子讲解.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;非常好的例子, 应该再看一遍&lt;/strong&gt; , 虽然不是很常用, 而且可以用脚本实现, 但是用的多了, 还是很有效率!!&lt;/p&gt;
&lt;p&gt;比如 &lt;tt class="docutils literal"&gt;&amp;quot;zdw&lt;/tt&gt;  剪切到 &lt;tt class="docutils literal"&gt;z&lt;/tt&gt; 寄存器 &lt;tt class="docutils literal"&gt;&amp;quot;zP&lt;/tt&gt; 粘贴出来, 这样的寄存器, 一般多用在宏里面.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="nice-demo-selecting-columns-with-visual-block-mode-4-21"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id30"&gt;#22 &amp;lt;nice-demo&amp;gt;Selecting columns with visual block mode (4:21)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;对 &lt;tt class="docutils literal"&gt;ctrl+v&lt;/tt&gt; 非常好的例子, 自己已经用习惯了:)&lt;/p&gt;
&lt;p&gt;textmate 也有这个功能.&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;ctrl+v&lt;/tt&gt;
可以用&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;I&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;A&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;r&lt;/tt&gt; 替换&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;d&lt;/tt&gt; 删&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;p&lt;/tt&gt; 粘贴&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;c&lt;/tt&gt; &lt;strong&gt;这个有用&lt;/strong&gt; , 删掉选中的, 再进入插入模式&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;C&lt;/tt&gt; 这相当于按了 &lt;tt class="docutils literal"&gt;$&lt;/tt&gt; .&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;o&lt;/tt&gt; &lt;strong&gt;有用&lt;/strong&gt; 到选中方块的对角.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;o9&lt;/tt&gt; 固定到块尾,(对V模式都一样)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例子:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
############################
# nihao ,wo hao            #
#                          #
############################
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="converting-haml-to-erb-with-vim-macros-7-36"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id31"&gt;#23 Converting HAML to ERB with Vim macros (7:36)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;也是例子, 没有特别的东东, 例子需要对ruby 熟悉才比较好懂.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="updating-your-vimrc-file-on-the-fly-2-51"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id32"&gt;#24 Updating your vimrc file on the fly (2:51)&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="literal-block"&gt;
:source $MYVIMRC
autocmd bufwritepost .vimrc source $MYVIMRC
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="creating-colorschemes-for-vim-9-44"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id33"&gt;#25 Creating colorschemes for Vim (9:44)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;默认放在~/.vim/colors/下面:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
highlight Todo guifg=#990000 guibg=NONE gui=NONE
highlight link Comment Todo
&lt;/pre&gt;
&lt;p&gt;对颜色没有特殊癖好.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bubbling-text-6-23"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id34"&gt;#26 Bubbling text (6:23)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;类似Eclise &amp;lt;ctrl+up&amp;gt; &amp;lt;ctrl-down&amp;gt; 之类的功能:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;quot; Bubble single lines
nmap &amp;lt;C-Up&amp;gt; ddkP
nmap &amp;lt;C-Down&amp;gt; ddp
&amp;quot; Bubble multiple lines
vmap &amp;lt;C-Up&amp;gt; xkP`[V`]
vmap &amp;lt;C-Down&amp;gt; xp`[V`]
&lt;/pre&gt;
&lt;p&gt;虽然自己基本不用, 不过还是 &lt;strong&gt;不错的tip&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;下面这个很有用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;gV&lt;/tt&gt; 选择刚编辑的地方:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;quot; Visually select the text that was last edited/pasted
nmap gV `[v`]
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="synchronizing-plugins-with-git-submodules-and-pathogen-9-24"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id35"&gt;#27 Synchronizing plugins with git submodules and pathogen (9:24)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;用这种方法管理模块:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Installation:

    git clone git://github.com/nelstrom/dotvim.git ~/.vim

Create symlinks:

    ln -s ~/.vim/vimrc ~/.vimrc
    ln -s ~/.vim/gvimrc ~/.gvimrc

Switch to the `~/.vim` directory, and fetch submodules:

    cd ~/.vim
    git submodule init
    git submodule update
&lt;/pre&gt;
&lt;p&gt;附带了一个简单的github用法介绍.&lt;/p&gt;
&lt;p&gt;Pathgon: 10年10月就有了的, 现在已然3年过去了.&lt;/p&gt;
&lt;p&gt;我用svn+vundle.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="refining-search-patterns-with-the-command-line-window-7-51"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id36"&gt;#28 Refining search patterns with the command-line window (7:51)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Refining 是提炼的意思&lt;/p&gt;
&lt;p&gt;When you press : or / in Vim, you go into commandline mode. 此时:&lt;/p&gt;
&lt;table class="docutils field-list" frame="void" rules="none"&gt;
&lt;col class="field-name" /&gt;
&lt;col class="field-body" /&gt;
&lt;tbody valign="top"&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;ctrl-p:&lt;/th&gt;&lt;td class="field-body"&gt;Show previous historical command/search&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;ctrl-n:&lt;/th&gt;&lt;td class="field-body"&gt;Show next         historical command/search&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;ctrl-f:&lt;/th&gt;&lt;td class="field-body"&gt;Switch from commandline mode to the co    mmandline window&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;在normal模式下:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;q/&lt;/tt&gt;:  Open the commandline window with history of searches&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;q:&lt;/tt&gt;:  Open the commandline window with history of commands&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;command-line window, 需要练习, 对正则式来说也是不错的例子&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在写command的时候, 可以用 &lt;tt class="docutils literal"&gt;ctrl+n&lt;/tt&gt; 自动提示.&lt;/p&gt;
&lt;p&gt;例子:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
\v'.+'
\v'[^']+'
\v'('\w|[^'])+'
\v'(('\w|[^'])+)'
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="aligning-text-with-tabular-vim-5-11"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id37"&gt;#29 Aligning text with Tabular.vim (5:11)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;练习&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
:Tab /=
:Tab /:
&lt;/pre&gt;
&lt;p&gt;下面这个如果用在输入等号的时候格式化应该不错:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
inoremap &amp;lt;silent&amp;gt; &amp;lt;Bar&amp;gt;   &amp;lt;Bar&amp;gt;&amp;lt;Esc&amp;gt;:call &amp;lt;SID&amp;gt;align()&amp;lt;CR&amp;gt;a

function! s:align()
  let p = '^\s*|\s.*\s|\s*$'
  if exists(':Tabularize') &amp;amp;&amp;amp; getline('.') =~# '^\s*|' &amp;amp;&amp;amp; (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
    let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
    let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
    Tabularize/|/l1
    normal! 0
    call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
  endif
endfunction
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="undo-branching-and-gundo-vim-6-30"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id38"&gt;#30 Undo branching and Gundo.vim (6:30)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;每次回到normal 状态的时候, 记录一个undo record, 这很重要!!&lt;/p&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id39"&gt;例1&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在riv.vim插件里面, 如果设置了:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
let s:default.buf_imaps = {
    \'&amp;lt;BS&amp;gt;'         : 'riv#action#ins_backspace()',
    \'&amp;lt;CR&amp;gt;'         : 'riv#action#ins_enter()'   ,
    \'&amp;lt;KEnter&amp;gt;'     : 'riv#action#ins_enter()'   ,
    ...
}
&lt;/pre&gt;
&lt;p&gt;这里粘贴一段多行文字的时候, 每次遇到&amp;lt;CR&amp;gt;都会切入normal模式, 造成多个undo history&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id40"&gt;例2&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;自己的修改LastModified 字段的插件, 每次保存的时候, 都会生成两个undo history, undo 的时候会跳到文件头.&lt;/p&gt;
&lt;p&gt;不少人遇到这个问题:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/12741977/prevent-vim-from-updating-its-undo-tree"&gt;http://stackoverflow.com/questions/12741977/prevent-vim-from-updating-its-undo-tree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/17969784/vim-temporary-disable-undo"&gt;http://stackoverflow.com/questions/17969784/vim-temporary-disable-undo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;都没有很好解决.&lt;/p&gt;
&lt;p&gt;我通过在python里面判断, 如果last modify 正好是当天, 就不做update, 来减少undo history&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="undo-branch"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id41"&gt;undo branch&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;vim 7.0的特性&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这里讲解非常好!!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;因为undo, redo 只能在一个分支上走, 不能到一个已经被丢弃的分支,
但是可以通过 &lt;tt class="docutils literal"&gt;g+&lt;/tt&gt; , &lt;tt class="docutils literal"&gt;g-&lt;/tt&gt; 回到上一个状态(可以在undo branch之间切换!) 类似时光机.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
:earlier {count}    Go to older text state {count} times.
:earlier {N}s       Go to older text state about {N} seconds before.
:earlier {N}m       Go to older text state about {N} minutes before.
:earlier {N}h       Go to older text state about {N} hours before.
:earlier {N}d       Go to older text state about {N} days before.
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="gundo"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id42"&gt;gundo&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;这个插件, 可以展示undo branch的分支, 还能显示两次变换之间的diff.&lt;/p&gt;
&lt;p&gt;也是用python做的!&lt;/p&gt;
&lt;p&gt;很赞: &lt;a class="reference external" href="https://github.com/sjl/gundo.vim"&gt;https://github.com/sjl/gundo.vim&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="fugitive-vim-a-complement-to-command-line-git-8-27"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id43"&gt;#31 Fugitive.vim - a complement to command line git (8:27)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Git run任何git命令:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
:Git log
:Git lg

:Gwrite
:Gread
:Gremove
:Gmove
&lt;/pre&gt;
&lt;p&gt;感觉没有必要&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="fugitive-vim-working-with-the-git-index-11-41"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id44"&gt;#32 Fugitive.vim - working with the git index (11:41)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;Gstatus&lt;/tt&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;之后用 &lt;tt class="docutils literal"&gt;-&lt;/tt&gt; 来修改是否要stage 一个文件, 很赞&lt;/li&gt;
&lt;li&gt;之后用 &lt;tt class="docutils literal"&gt;C&lt;/tt&gt; 来开始commit&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;Gblame&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;Gdiff&lt;/tt&gt; 是有点用.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="fugitive-vim-resolving-merge-conflicts-with-vimdiff-11-35"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id45"&gt;#33 Fugitive.vim - resolving merge conflicts with vimdiff (11:35)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Gdiff 3路merge , 太复杂.&lt;/p&gt;
&lt;p&gt;diffput, diffget 太夫在, &lt;tt class="docutils literal"&gt;dp&lt;/tt&gt; 还好&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="fugitive-vim-browsing-the-git-object-database-9-45"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id46"&gt;#34 Fugitive.vim - browsing the git object database (9:45)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Gbrowser挺强大和方便, &lt;em&gt;但是少用&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;statusline显示git branch:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
set statusline=%&amp;lt;%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %P
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="fugitive-vim-exploring-the-history-of-a-git-repository-10-04"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id47"&gt;#35 Fugitive.vim - exploring the history of a git repository (10:04)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Fugitive.vim这个插件挺强大和方便, 但是这些功能太少用了 -- 很多人几乎一年浏览一下某个项目的历史项目, 就不错了.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="vimgolf-prime-numbers-6-53"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id48"&gt;#36 VimGolf - Prime Numbers (6:53)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;VimGolf是一个Vim挑战网站, 从获得Prime Numbers这个例子上, 可以学习宏/正则式.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-to-fold-8-49"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id49"&gt;#37 How to fold (8:49)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;:help fold-methods&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;zi&lt;/tt&gt; switch folding on or off&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;za&lt;/tt&gt; toggle current fold open/closed&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;zc&lt;/tt&gt;          close current fold&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;zR&lt;/tt&gt; open all folds&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;zM&lt;/tt&gt; close all folds&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;zv&lt;/tt&gt; expand folds           to reveal cursor&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;zo&lt;/tt&gt;  open current fold&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;zO&lt;/tt&gt;  recursively open current fold&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;zc&lt;/tt&gt;  close current fold&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;zC&lt;/tt&gt;  recursively close current fold&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;za&lt;/tt&gt;  toggle current fold                           有用, 可以换掉zc, zo&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;zA&lt;/tt&gt;  recursively open/close current fold&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;zm&lt;/tt&gt;  reduce &lt;cite&gt;foldlevel&lt;/cite&gt; by one&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;zM&lt;/tt&gt;  close all folds&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;zr&lt;/tt&gt;  increase &lt;cite&gt;foldlevel&lt;/cite&gt; by one&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;zR&lt;/tt&gt;  open all folds&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;nnoremap &amp;lt;Space&amp;gt; za&lt;/tt&gt; 不错, 很方便.&lt;/p&gt;
&lt;p&gt;知识点不多, 基本都用惯了.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="writing-a-custom-fold-expression-12-07"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id50"&gt;#38 Writing a custom fold expression (12:07)&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;foldcolumn&lt;/tt&gt; 是说左边有几个列是放fold标记的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;使用foldmethod=marker 时, 可以用:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{{{
{{{1  这里1表示级别
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here’s the boilerplate fold expression that we used to begin with:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
function! MarkdownFolds()
  return &amp;quot;0&amp;quot;
endfunction
setlocal foldmethod=expr
setlocal foldexpr=MarkdownFolds()
&lt;/pre&gt;
&lt;p&gt;返回值:&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;0&amp;quot; the line is not in a fold
&amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;, ...   the line is in a fold with this level
&amp;quot;=&amp;quot; use fold level from the previous line
&amp;quot;&amp;gt;1&amp;quot;, &amp;quot;&amp;gt;2&amp;quot;  a fold with this level starts at this line&lt;/blockquote&gt;
&lt;p&gt;可以通过这个函数, 设置fold的区域显示什么:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
function! MarkdownFoldText()
  return getline(v:foldstart)
endfunction
setlocal foldtext=MarkdownFoldText()
&lt;/pre&gt;
&lt;p&gt;有用但是不重要&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="profiling-vimscript-performance-8-09"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id51"&gt;#39 Profiling Vimscript performance (8:09)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;vim --cmd 'profile start vimrc.profile' --cmd 'profile! file ~/.vimrc'&lt;/p&gt;
&lt;p&gt;会把profile结果记录在vimrc.profile 里面&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;赞&lt;/strong&gt; , 有用技巧&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="long-range-line-duplication-6-31"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id52"&gt;#40 Long-range line duplication (6:31)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;没用, 不方便, 把第9行拷贝到16行:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
:9copy16
&lt;/pre&gt;
&lt;p&gt;拷贝到当前行:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
:9t.
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
set relativenumber, 显示相对行号

:-7t.
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="meet-the-arglist-4-57"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id53"&gt;#41 Meet the arglist (4:57)&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="literal-block"&gt;
:args
&lt;/pre&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;.&lt;/tt&gt; 是重复上一个编辑命令
&lt;tt class="docutils literal"&gt;&amp;#64;:&lt;/tt&gt; 是重复上一个命令模式的命令&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;buffer list&lt;/tt&gt; 包含 &lt;tt class="docutils literal"&gt;argument list&lt;/tt&gt;, 比如我用 &lt;tt class="docutils literal"&gt;lsrecent&lt;/tt&gt; 打开一个文件后, &lt;tt class="docutils literal"&gt;:args&lt;/tt&gt; 显示:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[.recent]
&lt;/pre&gt;
&lt;p&gt;并不显示当前文件.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="populating-the-arglist-5-31"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id54"&gt;#42 Populating the arglist (5:31)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;how to set the contents of the arglist using the :args command, which can receive filepaths, globs, or even backtick expressions.&lt;/p&gt;
&lt;p&gt;比如:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
:args notes/misc/vim-ctags-vs-cscope.rst
&lt;/pre&gt;
&lt;p&gt;会打开这个文件.&lt;/p&gt;
&lt;p&gt;args 有点像用 &lt;tt class="docutils literal"&gt;vim *.rst&lt;/tt&gt; 这样的命令打开多个文件的时候, 带的参数 &lt;tt class="docutils literal"&gt;*.rst&lt;/tt&gt;, 可以传shell 命令给args:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
args `cat a.txt`
&lt;/pre&gt;
&lt;img alt="" src="/imgs/vim_buffer_list_vs_arglist.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="using-argdo-to-change-multiple-files-5-40"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id55"&gt;#43 Using :argdo to change multiple files (5:40)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这个没啥可说的&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="search-multiple-files-with-vimgrep-7-25"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id56"&gt;#44 Search multiple files with :vimgrep (7:25)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;vimgrep is Vim’s built-in command for searching across multiple files. It’s not so fast as external tools like ack and git-grep, but it has its uses. vimgrep uses Vim’s built-in regex engine, so you can reuse the patterns that work with Vim’s standard search command.&lt;/p&gt;
&lt;p&gt;不如:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ack
git-grep
ag
&lt;/pre&gt;
&lt;p&gt;快.&lt;/p&gt;
&lt;p&gt;grep 一个东西:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
:Ack ensureIndex
:grep ensureIndex * -r  会把svn 之类的grep出来.

在当前文件中找:
:vimgrep /ensureIndex/g %

:vimgrep /ensureIndex/g *

:vimgrep /ensureIndex/g `find . -type f`

在arglist 里面搜索
:vimgrep /ensureIndex/g ##
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
:vim /pattern1/ `find . -type f`
:vim /pattern2/ `find . -type f`
:vim /pattern3/ `find . -type f`
&lt;/pre&gt;
&lt;p&gt;可以换成:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
:args `find . -type f`
:vim /pattern1/ ##
:vim /pattern2/ ##
:vim /pattern3/ ##
&lt;/pre&gt;
&lt;p&gt;vimgrep 的优势只有: 和vim使用同样的正则.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="project-wide-find-and-replace-6-25"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id57"&gt;#45 Project-wide find and replace (6:25)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;把quickfix 窗口里面的文件名, 放到arglist里面去, &lt;strong&gt;非常有用&lt;/strong&gt;, 但是用到这种全局替换的case不多:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
command! -nargs=0 -bar Qargs execute 'args' QuickfixFilenames()
function! QuickfixFilenames()
  &amp;quot; Building a hash ensures we get each buffer only once
  let buffer_numbers = {}
  for quickfix_item in getqflist()
    let buffer_numbers[quickfix_item['bufnr']] = bufname(quickfix_item['bufnr'])
  endfor
  return join(map(values(buffer_numbers), 'fnameescape(v:val)'))
endfunction
&lt;/pre&gt;
&lt;p&gt;这样, 流程变为:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;vimgrep 找出需要替换的单词&lt;/li&gt;
&lt;li&gt;Qargs&lt;/li&gt;
&lt;li&gt;:argdo %s/xxx/xxxxx/ge&lt;/li&gt;
&lt;li&gt;:argdo w&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="search-for-the-selected-text-4-39"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id58"&gt;#46 Search for the selected text (4:39)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;用内置功能:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
:vmap X y/&amp;lt;C-R&amp;gt;&amp;quot;&amp;lt;CR&amp;gt;
&lt;/pre&gt;
&lt;p&gt;用插件:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
visual-star-search plugin from github,
&lt;/pre&gt;
&lt;p&gt;非常有用, 效果比之前用的 &lt;tt class="docutils literal"&gt;UtilVisualSelection&lt;/tt&gt; 好.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;某些时候可以替代ack&lt;/strong&gt; 也不错:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;quot; recursively vimgrep for word under cursor or selection if you hit leader-star
nnoremap &amp;lt;leader&amp;gt;* :execute 'noautocmd vimgrep /\V' . substitute(escape(expand(&amp;quot;&amp;lt;cword&amp;gt;&amp;quot;), '\'), '\n', '\\n', 'g') . '/ **'&amp;lt;CR&amp;gt;
vnoremap &amp;lt;leader&amp;gt;* :&amp;lt;C-u&amp;gt;call &amp;lt;SID&amp;gt;VSetSearch()&amp;lt;CR&amp;gt;:execute 'noautocmd vimgrep /' . &amp;#64;/ . '/ **'&amp;lt;CR&amp;gt;
&lt;/pre&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;,*&lt;/tt&gt; 这个map比 &lt;tt class="docutils literal"&gt;F3&lt;/tt&gt; 也更好&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="smart-search-with-subvert-5-33"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id59"&gt;&amp;#64;47 Smart search with :Subvert (5:33)&lt;/a&gt;&lt;/h2&gt;
&lt;/div&gt;
&lt;div class="section" id="supercharged-substitution-with-subvert-7-09"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id60"&gt;&amp;#64;48 Supercharged substitution with :Subvert (7:09)&lt;/a&gt;&lt;/h2&gt;
&lt;/div&gt;
&lt;div class="section" id="enhanced-abbreviations-with-abolish-3-09"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id61"&gt;&amp;#64;49 Enhanced abbreviations with :Abolish (3:09)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;abolish插件对我应该不太有用.&lt;/p&gt;
&lt;p&gt;Abolish's killer feature is that it handles the fight between logical names &amp;amp; the English language.
在替换的时候能自动处理单复数, 大小写, 前后缀:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
:%s/Notes/Entries/g
:%s/Note/Entry/g
:%s/notes/entries/g
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="an-introduction-to-vspec-7-15"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id62"&gt;#50 An introduction to vspec (7:15)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;Vspec&lt;/tt&gt; is a library that allows you to test-drive your Vimscript code. In this tutorial, we’ll cover the basics: how to inspect the contents of a buffer, how to simulate the actions of a user, and how to invoke user-defined mappings.&lt;/p&gt;
&lt;p&gt;可以给vim 插件写测试:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
nnoremap x daw

describe 'vspec'

  before
    new
    put! = 'Welcome to Vimcasts'
  end

  after
    close!
  end

  it 'can read the contents of the buffer'                  #一个case
    Expect getline(1) == &amp;quot;Welcome to Vimcasts&amp;quot;
  end

  it 'feels just like operating Vim!'                       #一个case
    normal gg$
    normal daw
    Expect getline(1) == 'Welcome to'
    Expect getreg('&amp;quot;') == ' Vimcasts'
  end

  it 'can exercise user-defined mappings'                   #一个case
    normal gg$
    normal x
    Expect getline(1) == 'Welcome to'
    Expect getreg('&amp;quot;') == ' Vimcasts'
  end

end
&lt;/pre&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;把如上脚本转换为vimscrip (excommand)&lt;/li&gt;
&lt;li&gt;用Ex模式调用vim(不会出现gui), 并执行excommand&lt;/li&gt;
&lt;li&gt;可以用excommand &lt;tt class="docutils literal"&gt;normal d&lt;/tt&gt; 模拟normal 模式下按一下 &lt;tt class="docutils literal"&gt;d&lt;/tt&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;非常赞&lt;/strong&gt; .&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="simple-operations-using-the-default-register-4-07"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id63"&gt;#51 Simple operations using the default register (4:07)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;讲ddp交换两行.&lt;/p&gt;
&lt;p&gt;比较简单&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="meet-the-yank-register-4-29"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id64"&gt;#52 Meet the yank register (4:29)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;已知, 比较简单&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="using-vim-s-named-registers-3-29"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id65"&gt;#53 Using Vim's named registers (3:29)&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&amp;quot;ayy&lt;/tt&gt; 是把当前行放入 &lt;tt class="docutils literal"&gt;寄存器a&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&amp;quot;Ayy&lt;/tt&gt; 是把当前行append 到 &lt;tt class="docutils literal"&gt;寄存器a&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比较简单&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pasting-from-visual-mode-3-33"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id66"&gt;#54 Pasting from Visual mode (3:33)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;比较简单&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pasting-from-insert-mode-4-15"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id67"&gt;#55 Pasting from Insert mode (4:15)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;insert下/命令模式下, 按 &lt;tt class="docutils literal"&gt;crtl+r 0&lt;/tt&gt;, 粘贴0号寄存器.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="simple-calculations-with-vim-s-expression-register-4-02"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id68"&gt;#56 Simple calculations with Vim's expression register (4:02)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;表达式寄存器: &lt;tt class="docutils literal"&gt;&amp;quot;=&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;有用&lt;/strong&gt; : 编辑模式下: &lt;tt class="docutils literal"&gt;ctrl+r =&lt;/tt&gt; 输入 &lt;tt class="docutils literal"&gt;3*5&lt;/tt&gt; , 插入结果&lt;/p&gt;
&lt;p&gt;用下面这个map:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
nnoremap Q 0yt=A&amp;lt;C-r&amp;gt;=&amp;lt;C-r&amp;gt;&amp;quot;&amp;lt;CR&amp;gt;&amp;lt;Esc&amp;gt;
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
3*2 =
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="evaluating-scripts-with-vim-s-expression-register-3-56"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id69"&gt;#57 Evaluating scripts with Vim's expression register (3:56)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;system()&lt;/tt&gt; 函数&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&amp;quot;=&lt;/tt&gt; 下可以用 abs(), round(), system()之类函数&lt;/p&gt;
&lt;pre class="literal-block"&gt;
:help function-list
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
:put = 3+3
:put =system('echo $RANDOM')
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="accessing-the-system-clipboard-from-vim-4-48"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id70"&gt;#58 Accessing the system clipboard from Vim (4:48)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&amp;quot;+y
粘贴, 不需要设置set paste:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;quot;+gp
:put +
&lt;/pre&gt;
&lt;p&gt;If you’d like to make it easier to interact with the system clipboard, try out this setting,&lt;/p&gt;
&lt;pre class="literal-block"&gt;
:set clipboard=unnamed,unnamedplus
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;有用&lt;/strong&gt;, 但是会破坏我在 &lt;tt class="docutils literal"&gt;rst_bold_it&lt;/tt&gt; 的ctrl+c, ctrl+b, 因为这里我用了默认寄存器 &lt;tt class="docutils literal"&gt;&amp;quot;&lt;/tt&gt; , 我换成命名寄存器 &lt;tt class="docutils literal"&gt;n&lt;/tt&gt; 就好了&lt;/p&gt;
&lt;p&gt;上面这个行为想当于 在d, x, y, p 命令前都加了&amp;quot;*&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="using-vim-s-paste-mode-with-the-system-paste-command-4-25"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id71"&gt;#59 Using Vim's paste mode with the system paste command (4:25)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;set paste 之后 ， imap都失效了.&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;unimpaired&lt;/tt&gt; 这个插件, 可以在我想要粘贴的时候, 按 &lt;tt class="docutils literal"&gt;yo&lt;/tt&gt; , 此时会自动 &lt;tt class="docutils literal"&gt;set paste&lt;/tt&gt; 贴完之后, 会自动 &lt;tt class="docutils literal"&gt;set nopaste&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;-对我基本没用&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="comparing-buffers-with-vimdiff-4-16"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id72"&gt;#60 Comparing buffers with vimdiff (4:16)&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="literal-block"&gt;
:windo diffthis 比较两个win.
:windo diffoff
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="creating-repeatable-mappings-with-repeat-vim-4-33"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id73"&gt;#61 Creating repeatable mappings with repeat.vim (4:33)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;基本没用.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id74"&gt;关于&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;作者:&lt;a class="reference external" href="https://github.com/nelstrom/"&gt;https://github.com/nelstrom/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ning-vim-modline"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id75"&gt;ning: vim modline&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;比如写在文件头:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;quot;vim: foldmethod=marker
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id76"&gt;总结&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;前30个非常好, 后面知识较少.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="all"></category></entry><entry><title>增大tcp init_cwnd</title><link href="/tcp_ip_increasing_init_cwnd.html" rel="alternate"></link><updated>2012-12-14T10:32:15+08:00</updated><author><name>ning</name></author><id>tag:,2012-12-14:tcp_ip_increasing_init_cwnd.html</id><summary type="html">&lt;div class="contents topic" id="table-of-contents"&gt;
&lt;p class="topic-title first"&gt;Table of Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#an-argument-for-increasing-tcps-initial-congestion-window" id="id7"&gt;An Argument for Increasing TCP’s Initial Congestion Window&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id1" id="id8"&gt;理论&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id2" id="id9"&gt;效果&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id3" id="id10"&gt;其它方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id4" id="id11"&gt;负面影响&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#initcwnd-settings-of-major-cdn-providers" id="id12"&gt;Initcwnd settings of major CDN providers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#tuning-initcwnd-for-optimum-performance" id="id13"&gt;Tuning initcwnd for optimum performance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#zetatcp" id="id14"&gt;zetaTCP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id5" id="id15"&gt;工具&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#init-cwnd" id="id16"&gt;修改init_cwnd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#initcwnd-check" id="id17"&gt;initcwnd_check&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#case" id="id18"&gt;case&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#case-win" id="id19"&gt;case win&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#case-tso" id="id20"&gt;case tso&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id6" id="id21"&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="an-argument-for-increasing-tcps-initial-congestion-window"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;An Argument for Increasing TCP’s Initial Congestion Window&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://code.google.com/speed/articles/tcp_initcwnd_paper.pdf"&gt;http://code.google.com/speed/articles/tcp_initcwnd_paper.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;init_cwnd=10 =&amp;gt; 提升10%&lt;/p&gt;
&lt;p&gt;慢启动阶段, 拥塞窗口一直增加, 直到丢包, 丢包通常是由于 路由器buffer overflow&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;平均网页大小384KB.&lt;/li&gt;
&lt;li&gt;大多数连接，都是短连接.&lt;/li&gt;
&lt;li&gt;使用iptables 命令可以修改init_cwnd.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id1"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id8"&gt;理论&lt;/a&gt;&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;90%的网页在 网页 在16KB 以内.
所以改为10, 90%的网页都可以在一个RTT内发出&lt;/li&gt;
&lt;li&gt;init_cwnd 比较大, 如果拥塞, 能够尽快的快速重传, 而不是等待超时.
一下发送10个包, 如果丢了5个, 发送方很可能收到dup ack, 所以出发 Fast Restransmit.&lt;/li&gt;
&lt;/ol&gt;
&lt;img alt="" src="/imgs/google_init_cwnd1.png" /&gt;
&lt;p&gt;注意 除了init_cwnd 之外, client 的通告窗口(rwnd)如果太小, 也不能一下发送很多包,&lt;/p&gt;
&lt;img alt="" src="/imgs/google_init_cwnd_rwnd.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id9"&gt;效果&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;提升8%-16%&lt;/p&gt;
&lt;img alt="" src="/imgs/google_init_cwnd_improve.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id10"&gt;其它方法&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;cached cwnd. (可能是记录每个client ip 的最佳cwnd)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id11"&gt;负面影响&lt;/a&gt;&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;重传增加 (增加很少)&lt;/li&gt;
&lt;li&gt;浏览器本身会并发访问, 通常并发是3-6.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="initcwnd-settings-of-major-cdn-providers"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id12"&gt;Initcwnd settings of major CDN providers&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.cdnplanet.com/blog/initcwnd-settings-major-cdn-providers/"&gt;http://www.cdnplanet.com/blog/initcwnd-settings-major-cdn-providers/&lt;/a&gt;&lt;/p&gt;
&lt;img alt="" src="/imgs/initcwnd-cdns-may2012_12.png" /&gt;
&lt;p&gt;多数cdn 厂商的cwnd 都调高了.&lt;/p&gt;
&lt;p&gt;测试脚本: &lt;a class="reference external" href="http://www.cdnplanet.com/static/uploads/probe.py"&gt;http://www.cdnplanet.com/static/uploads/probe.py&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tuning-initcwnd-for-optimum-performance"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id13"&gt;Tuning initcwnd for optimum performance&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.cdnplanet.com/blog/tune-tcp-initcwnd-for-optimum-performance/"&gt;http://www.cdnplanet.com/blog/tune-tcp-initcwnd-for-optimum-performance/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;图不错:&lt;/p&gt;
&lt;img alt="" src="/imgs/init_cwnd_TCP1.png" /&gt;
&lt;img alt="" src="/imgs/init_cwnd_TCP2.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="zetatcp"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id14"&gt;zetaTCP&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;对于小公司, 网页下载, 不需要这种技术, 直接调大init_cwnd 就行.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id15"&gt;工具&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="init-cwnd"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id16"&gt;修改init_cwnd&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Step 1: check route settings.:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sajal&amp;#64;sajal-desktop:~$ ip route show
192.168.1.0/24 dev eth0  proto kernel  scope link  src 192.168.1.100  metric 1
169.254.0.0/16 dev eth0  scope link  metric 1000
default via 192.168.1.1 dev eth0  proto static
sajal&amp;#64;sajal-desktop:~$
Make a note of the line starting with default.
&lt;/pre&gt;
&lt;p&gt;Step 2: Change the default settings:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Paste the current settings for default and add initcwnd 10 to it.

sajal&amp;#64;sajal-desktop:~$ sudo ip route change default via 192.168.1.1 dev eth0  proto static initcwnd 10
&lt;/pre&gt;
&lt;p&gt;Step 3: Verify:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sajal&amp;#64;sajal-desktop:~$ ip route show
192.168.1.0/24 dev eth0  proto kernel  scope link  src 192.168.1.100  metric 1
169.254.0.0/16 dev eth0  scope link  metric 1000
default via 192.168.1.1 dev eth0  proto static  initcwnd 10
&lt;/pre&gt;
&lt;p&gt;我试试:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# ip route show
10.26.140.0/24 dev eth1  proto kernel  scope link  src 10.26.140.32
169.254.0.0/16 dev eth1  scope link  metric 1003
192.168.0.0/16 via 10.26.140.1 dev eth1
172.16.0.0/12 via 10.26.140.1 dev eth1  initcwnd 10
10.0.0.0/8 via 10.26.140.1 dev eth1

# ip route change 172.16.0.0/12 via 10.26.140.1 dev eth1 initcwnd 20

# ip route show
10.26.140.0/24 dev eth1  proto kernel  scope link  src 10.26.140.32
169.254.0.0/16 dev eth1  scope link  metric 1003
192.168.0.0/16 via 10.26.140.1 dev eth1
172.16.0.0/12 via 10.26.140.1 dev eth1  initcwnd 20
10.0.0.0/8 via 10.26.140.1 dev eth1
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="initcwnd-check"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id17"&gt;initcwnd_check&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;需要apt-get 安装&lt;/p&gt;
&lt;pre class="literal-block"&gt;
libnetpacket-perl, libnet-pcap-perl, libnet-rawip-perl
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
(ENV)ning&amp;#64;ning-laptop ~/test/initcwnd_check$ sudo ./initcwnd_check.pl wlan0 http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
+ connected from 172.22.146.48:6031 to 74.125.31.95:80
* ajax.googleapis.com (74.125.31.95) - init_cwnd: 10 (13800 byte), init_rwnd: 10 (14300 byte)

(ENV)ning&amp;#64;ning-laptop ~/test/initcwnd_check$ sudo ./initcwnd_check.pl wlan0 http://10.26.140.32:8080/500K.data
+ connected from 172.22.146.48:4648 to 10.26.140.32:8080
* 10.26.140.32 (10.26.140.32) - init_cwnd: 10 (14280 byte), init_rwnd: 10 (14600 byte)

(ENV)ning&amp;#64;ning-laptop ~/test/initcwnd_check$ sudo ./initcwnd_check.pl wlan0 http://10.26.138.25:8080/500K.data
+ connected from 172.22.146.48:6988 to 10.26.138.25:8080
* 10.26.138.25 (10.26.138.25) - init_cwnd: 44 (62832 byte), init_rwnd: 44 (63443 byte)                                                  //44.
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="case"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id18"&gt;case&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="case-win"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id19"&gt;case win&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;虽然调大了，但是下面这个case 的还是只能发送4个, 因为接收放说win 5840:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
(ENV)ning&amp;#64;ning-laptop ~/test/initcwnd_check$ sudo tcpdump -i wlan0 -nn 'host 123.125.115.254'
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on wlan0, link-type EN10MB (Ethernet), capture size 96 bytes

19:36:42.621338 IP 172.22.146.48.41102 &amp;gt; 123.125.115.254.80: Flags [S], seq 2478746345, win 5840, options [mss 1460,sackOK,TS val 19574584 ecr 0,nop,wscale 7], length 0
19:36:42.638841 IP 123.125.115.254.80 &amp;gt; 172.22.146.48.41102: Flags [S.], seq 3088442681, ack 2478746346, win 5840, options [mss 1380,sackOK,nop,nop,nop,nop,nop,nop,nop,nop,nop,nop,nop,nop,nop,nop], length 0
19:36:42.638883 IP 172.22.146.48.41102 &amp;gt; 123.125.115.254.80: Flags [.], ack 1, win 5840, length 0
19:36:42.639081 IP 172.22.146.48.41102 &amp;gt; 123.125.115.254.80: Flags [P.], seq 1:122, ack 1, win 5840, length 121
19:36:42.642216 IP 123.125.115.254.80 &amp;gt; 172.22.146.48.41102: Flags [.], ack 122, win 14600, length 0
19:36:42.642969 IP 123.125.115.254.80 &amp;gt; 172.22.146.48.41102: Flags [.], seq 1:1025, ack 122, win 14600, length 1024
19:36:42.642999 IP 172.22.146.48.41102 &amp;gt; 123.125.115.254.80: Flags [.], ack 1025, win 7168, length 0
19:36:42.644692 IP 123.125.115.254.80 &amp;gt; 172.22.146.48.41102: Flags [.], seq 1025:2049, ack 122, win 14600, length 1024
19:36:42.644720 IP 172.22.146.48.41102 &amp;gt; 123.125.115.254.80: Flags [.], ack 2049, win 9216, length 0
19:36:42.645531 IP 123.125.115.254.80 &amp;gt; 172.22.146.48.41102: Flags [.], seq 2049:3073, ack 122, win 14600, length 1024
19:36:42.645548 IP 172.22.146.48.41102 &amp;gt; 123.125.115.254.80: Flags [.], ack 3073, win 11264, length 0
19:36:42.648202 IP 123.125.115.254.80 &amp;gt; 172.22.146.48.41102: Flags [P.], seq 3073:4097, ack 122, win 14600, length 1024
19:36:42.648229 IP 172.22.146.48.41102 &amp;gt; 123.125.115.254.80: Flags [.], ack 4097, win 13312, length 0

19:36:42.654387 IP 123.125.115.254.80 &amp;gt; 172.22.146.48.41102: Flags [.], seq 4097:5121, ack 122, win 14600, length 1024
19:36:42.654416 IP 172.22.146.48.41102 &amp;gt; 123.125.115.254.80: Flags [.], ack 5121, win 15360, length 0
19:36:42.659431 IP 123.125.115.254.80 &amp;gt; 172.22.146.48.41102: Flags [.], seq 5121:6145, ack 122, win 14600, length 1024
19:36:42.659455 IP 172.22.146.48.41102 &amp;gt; 123.125.115.254.80: Flags [.], ack 6145, win 17408, length 0
19:36:42.660544 IP 123.125.115.254.80 &amp;gt; 172.22.146.48.41102: Flags [P.], seq 6145:7169, ack 122, win 14600, length 1024
19:36:42.660558 IP 172.22.146.48.41102 &amp;gt; 123.125.115.254.80: Flags [.], ack 7169, win 19456, length 0
19:36:42.677194 IP 123.125.115.254.80 &amp;gt; 172.22.146.48.41102: Flags [.], seq 7169:8193, ack 122, win 14600, length 1024
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="case-tso"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id20"&gt;case tso&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;我们在使用 x工具 之后, 关闭它之后. 用上面的initcwnd_check 工具查看，发现init_cwnd变成了6，很奇怪:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
(ENV)ning&amp;#64;ning-laptop ~/test/initcwnd_check$ sudo ./initcwnd_check.pl wlan0 http://10.26.138.25:8080/50K.data
+ connected from 172.22.146.48:3832 to 10.26.138.25:8080
* 10.26.138.25 (10.26.138.25) - init_cwnd: 6 (8568 byte), init_rwnd: 10 (14600 byte)
&lt;/pre&gt;
&lt;p&gt;抓包看:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# tcpdump -nn 'host 172.22.146.48'
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth1, link-type EN10MB (Ethernet), capture size 65535 bytes

17:28:32.410069 IP 172.22.146.48.2608 &amp;gt; 10.26.138.25.8080: Flags [S], seq 2380923257:2380923262, win 65535, options [mss 1460], length 5
17:28:32.410108 IP 10.26.138.25.8080 &amp;gt; 172.22.146.48.2608: Flags [S.], seq 1345408678, ack 2380923258, win 14600, options [mss 1460], length 0
17:28:32.411585 IP 172.22.146.48.2608 &amp;gt; 10.26.138.25.8080: Flags [.], ack 1, win 65535, options [mss 1460], length 0
17:28:32.412577 IP 172.22.146.48.2608 &amp;gt; 10.26.138.25.8080: Flags [P.], seq 1:218, ack 1, win 65535, options [mss 1460], length 217
17:28:32.412611 IP 10.26.138.25.8080 &amp;gt; 172.22.146.48.2608: Flags [.], ack 218, win 15544, length 0
17:28:32.412969 IP 10.26.138.25.8080 &amp;gt; 172.22.146.48.2608: Flags [.], seq 1:1461, ack 218, win 15544, length 1460
17:28:32.412983 IP 10.26.138.25.8080 &amp;gt; 172.22.146.48.2608: Flags [.], seq 1461:2921, ack 218, win 15544, length 1460
17:28:32.412991 IP 10.26.138.25.8080 &amp;gt; 172.22.146.48.2608: Flags [.], seq 2921:4381, ack 218, win 15544, length 1460
17:28:32.412999 IP 10.26.138.25.8080 &amp;gt; 172.22.146.48.2608: Flags [.], seq 4381:5841, ack 218, win 15544, length 1460
17:28:32.413005 IP 10.26.138.25.8080 &amp;gt; 172.22.146.48.2608: Flags [.], seq 5841:7301, ack 218, win 15544, length 1460
17:28:32.413012 IP 10.26.138.25.8080 &amp;gt; 172.22.146.48.2608: Flags [.], seq 7301:8761, ack 218, win 15544, length 1460
17:28:32.614498 IP 10.26.138.25.8080 &amp;gt; 172.22.146.48.2608: Flags [.], seq 1:1461, ack 218, win 15544, length 1460
17:28:32.622373 IP 172.22.146.48.2608 &amp;gt; 10.26.138.25.8080: Flags [R], seq 2380923475, win 65535, options [mss 1460], length 0
&lt;/pre&gt;
&lt;p&gt;和一台正常机器对比:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# tcpdump -nn 'host 172.22.146.48'
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth1, link-type EN10MB (Ethernet), capture size 65535 bytes
17:28:30.780922 IP 172.22.146.48.1634 &amp;gt; 10.26.140.32.8080: Flags [S], seq 1797559918:1797559923, win 65535, options [mss 1460], length 5
17:28:30.780961 IP 10.26.140.32.8080 &amp;gt; 172.22.146.48.1634: Flags [S.], seq 1660446299, ack 1797559919, win 14600, options [mss 1460], length 0
17:28:30.782374 IP 172.22.146.48.1634 &amp;gt; 10.26.140.32.8080: Flags [.], ack 1, win 65535, options [mss 1460], length 0
17:28:30.783062 IP 172.22.146.48.1634 &amp;gt; 10.26.140.32.8080: Flags [P.], seq 1:219, ack 1, win 65535, options [mss 1460], length 218
17:28:30.783096 IP 10.26.140.32.8080 &amp;gt; 172.22.146.48.1634: Flags [.], ack 219, win 15544, length 0
17:28:30.783548 IP 10.26.140.32.8080 &amp;gt; 172.22.146.48.1634: Flags [.], seq 1:2921, ack 219, win 15544, length 2920
17:28:30.783567 IP 10.26.140.32.8080 &amp;gt; 172.22.146.48.1634: Flags [.], seq 2921:7301, ack 219, win 15544, length 4380
17:28:30.783576 IP 10.26.140.32.8080 &amp;gt; 172.22.146.48.1634: Flags [.], seq 7301:11681, ack 219, win 15544, length 4380
17:28:30.783589 IP 10.26.140.32.8080 &amp;gt; 172.22.146.48.1634: Flags [.], seq 11681:14601, ack 219, win 15544, length 2920
17:28:30.985323 IP 10.26.140.32.8080 &amp;gt; 172.22.146.48.1634: Flags [.], seq 1:1461, ack 219, win 15544, length 1460
17:28:30.991513 IP 172.22.146.48.1634 &amp;gt; 10.26.140.32.8080: Flags [R], seq 1797560137, win 65535, options [mss 1460], length 0
&lt;/pre&gt;
&lt;p&gt;同样是发了6个包. 客户端认为一个是6, 一个是10.  正常机器有大包, 怀疑是tso, 果然是两台机器tso 都开启:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# sudo ethtool -k eth0
Offload parameters for eth0:
rx-checksumming: on
tx-checksumming: on
scatter-gather: on
tcp-segmentation-offload: on            *****
udp-fragmentation-offload: off
generic-segmentation-offload: on
generic-receive-offload: on
large-receive-offload: off
&lt;/pre&gt;
&lt;p&gt;怀疑是x工具把tso 状态搞坏了.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id21"&gt;参考&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.cdnplanet.com/blog/tune-tcp-initcwnd-for-optimum-performance/"&gt;http://www.cdnplanet.com/blog/tune-tcp-initcwnd-for-optimum-performance/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="all"></category></entry><entry><title>tcp cwnd 作用</title><link href="/tcpip-cwnd.html" rel="alternate"></link><updated>2012-10-14T21:45:47+08:00</updated><author><name>ning</name></author><id>tag:,2012-10-14:tcpip-cwnd.html</id><summary type="html">&lt;div class="contents topic" id="table-of-contents"&gt;
&lt;p class="topic-title first"&gt;Table of Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#cwnd" id="id9"&gt;关于cwnd 默认参数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#s" id="id10"&gt;3s 延迟&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id1" id="id11"&gt;5s 延迟&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#bdp" id="id12"&gt;高BDP(带宽时延积)网络&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id2" id="id13"&gt;带宽时延积&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#rtt" id="id14"&gt;高rtt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#rttbdp" id="id15"&gt;高rtt情况根据BDP计算带宽:&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#case" id="id16"&gt;case&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#case1" id="id17"&gt;case1 - 短连接&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id3" id="id18"&gt;case1 分析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id4" id="id19"&gt;case1 注意&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#case2" id="id20"&gt;case2 - 长连接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#xxxxxxxxxxxxxxx" id="id21"&gt;xxxxxxxxxxxxxxx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id5" id="id22"&gt;方法&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id6" id="id23"&gt;增加发送方初始cwnd(对短连接有效)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id7" id="id24"&gt;使用长连接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id8" id="id25"&gt;增加接收方接收窗口.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#vegas" id="id26"&gt;修改vegas 算法参数&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#reference" id="id27"&gt;Reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="cwnd"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;关于cwnd 默认参数&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;初始cwnd 为2:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ning&amp;#64;ning-laptop ~/idning-source/kernel/linux-2.6.6/net/ipv4$ ack cwnd
tcp_ipv4.c
2071:   tp-&amp;gt;snd_cwnd = 2;
&lt;/pre&gt;
&lt;p&gt;初始rto 为3s, 所以我们经常看见3s延迟  /home/ning/idning-source/kernel/linux-3.6.2/Documentation/networking/ip-sysctl.txt:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
rto_initial - INTEGER
    The initial round trip timeout value in milliseconds that will be used
    in calculating round trip times.  This is the initial time interval
    for retransmissions.

    Default: 3000

#define TCP_TIMEOUT_INIT ((unsigned)(3*HZ)) /* RFC 1122 initial RTO value   */

rto_max - INTEGER
    The maximum value (in milliseconds) of the round trip timeout.  This
    is the largest time interval that can elapse between retransmissions.

    Default: 60000

rto_min - INTEGER
    The minimum value (in milliseconds) of the round trip timeout.  This
    is the smallest time interval the can elapse between retransmissions.

    Default: 1000
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="s"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;3s 延迟&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;看代码:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
#重传时x2
icsk-&amp;gt;icsk_rto = min(icsk-&amp;gt;icsk_rto &amp;lt;&amp;lt; 1, TCP_RTO_MAX);

/* Calculate rto without backoff.  This is the second half of Van Jacobson's
 * routine referred to above.
 */
static inline void tcp_set_rto(struct sock *sk)
{
    const struct tcp_sock *tp = tcp_sk(sk);
    /* Old crap is replaced with new one. 8)
     *
     * More seriously:
     * 1. If rtt variance happened to be less 50msec, it is hallucination.
     *    It cannot be less due to utterly erratic ACK generation made
     *    at least by solaris and freebsd. &amp;quot;Erratic ACKs&amp;quot; has _nothing_
     *    to do with delayed acks, because at cwnd&amp;gt;2 true delack timeout
     *    is invisible. Actually, Linux-2.4 also generates erratic
     *    ACKs in some circumstances.
     */
    inet_csk(sk)-&amp;gt;icsk_rto = __tcp_set_rto(tp);

    /* 2. Fixups made earlier cannot be right.
     *    If we do not estimate RTO correctly without them,
     *    all the algo is pure shit and should be replaced
     *    with correct one. It is exactly, which we pretend to do.
     */

    /* NOTE: clamping at TCP_RTO_MIN is not required, current algo
     * guarantees that rto is higher.
     */
    tcp_bound_rto(sk);
}
&lt;/pre&gt;
&lt;p&gt;计算当前rto:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
static inline u32 __tcp_set_rto(const struct tcp_sock *tp)
{
    return (tp-&amp;gt;srtt &amp;gt;&amp;gt; 3) + tp-&amp;gt;rttvar;
}
&lt;/pre&gt;
&lt;p&gt;下面这里调用了tcp_set_rto:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
static void tcp_valid_rtt_meas(struct sock *sk, u32 seq_rtt)
{
    tcp_rtt_estimator(sk, seq_rtt);
    tcp_set_rto(sk);
    inet_csk(sk)-&amp;gt;icsk_backoff = 0;
}

/* Read draft-ietf-tcplw-high-performance before mucking
 * with this code. (Supersedes RFC1323)
 */
static void tcp_ack_saw_tstamp(struct sock *sk, int flag)
{
    /* RTTM Rule: A TSecr value received in a segment is used to
     * update the averaged RTT measurement only if the segment
     * acknowledges some new data, i.e., only if it advances the
     * left edge of the send window.
     *
     * See draft-ietf-tcplw-high-performance-00, section 3.3.
     * 1998/04/10 Andrey V. Savochkin &amp;lt;saw&amp;#64;msu.ru&amp;gt;
     *
     * Changed: reset backoff as soon as we see the first valid sample.
     * If we do not, we get strongly overestimated rto. With timestamps
     * samples are accepted even from very old segments: f.e., when rtt=1
     * increases to 8, we retransmit 5 times and after 8 seconds delayed
     * answer arrives rto becomes 120 seconds! If at least one of segments
     * in window is lost... Voila.                          --ANK (010210)
     */
    struct tcp_sock *tp = tcp_sk(sk);

    tcp_valid_rtt_meas(sk, tcp_time_stamp - tp-&amp;gt;rx_opt.rcv_tsecr);
}
&lt;/pre&gt;
&lt;p&gt;注意:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
/* RTTM Rule: A TSecr value received in a segment is used to
 * update the averaged RTT measurement only if the segment
 * acknowledges some new data, i.e., only if it advances the
 * left edge of the send window.
&lt;/pre&gt;
&lt;p&gt;这就是说:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
A =SYN=&amp;gt; B
B =SYN=&amp;gt; A
A =PSH=&amp;gt; B
B =ack=&amp;gt; A
A =PSH=&amp;gt; B
B =ack=&amp;gt; A

这时候B第一次向A发数据, 如果这个包丢了, 此时的rtt也是3s::
B =PSH=&amp;gt; A
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;5s 延迟&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Do the 5-second pauses correspond with Zero Window announcements from the client?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bdp"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id12"&gt;高BDP(带宽时延积)网络&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id13"&gt;带宽时延积&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Bandwidth Delay Product（BDP）即带宽 x RTT&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="rtt"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id14"&gt;高rtt&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;通常，同机房内ping 命令输出:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ ping 10.65.19.52
PING 10.65.19.52 (10.65.19.52) 56(84) bytes of data.
64 bytes from 10.65.19.52: icmp_seq=0 ttl=59 time=0.766 ms
64 bytes from 10.65.19.52: icmp_seq=1 ttl=59 time=0.746 ms
64 bytes from 10.65.19.52: icmp_seq=2 ttl=59 time=0.884 ms
64 bytes from 10.65.19.52: icmp_seq=3 ttl=59 time=0.747 ms
&lt;/pre&gt;
&lt;p&gt;跨机房:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ ping 10.220.109.45
PING 10.220.109.45 (10.220.109.45) 56(84) bytes of data.
64 bytes from 10.220.109.45: icmp_seq=0 ttl=58 time=28.8 ms
64 bytes from 10.220.109.45: icmp_seq=1 ttl=58 time=28.7 ms
64 bytes from 10.220.109.45: icmp_seq=2 ttl=58 time=28.6 ms
64 bytes from 10.220.109.45: icmp_seq=3 ttl=58 time=28.6 ms
&lt;/pre&gt;
&lt;p&gt;跨机房场景，就是典型的高延迟.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="rttbdp"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id15"&gt;高rtt情况根据BDP计算带宽:&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;公式1:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
BDP = link_bandwidth * RTT
&lt;/pre&gt;
&lt;p&gt;tcp window_size 大小应该设置为BDP 或2 x BDP.  假设window_size = BDP, 则得到公式2:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
throughput = window_size / RTT
&lt;/pre&gt;
&lt;p&gt;对于上面case来说, 千兆网络, 带宽为125MB/s&lt;/p&gt;
&lt;pre class="literal-block"&gt;
BDP = 1000Mbps * 0.030 sec / 8 = 3.7MB (所以应该设置为3.7MB左右)

Linux 2.6 上默认的 TCP 窗口大小是 110KB, 根据公式1, 得到 throughput = window_size/RTT = 110KB/0.03 = 3.6MB.
如果设置为3.7MB                          根据公式1, 得到 throughput = window_size/RTT = 3.7MB/0.03 = 125MB.
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="case"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id16"&gt;case&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="case1"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id17"&gt;case1 - 短连接&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;短连接是指，传输数据量较小
很多时候slow start还没有结束, 连接就关闭了.&lt;/p&gt;
&lt;p&gt;在10.220.109.45.8080开启一个webserver, 从10.36.115.52下载一个256K的文件.&lt;/p&gt;
&lt;p&gt;发送方 10.220.109.45.8080   (被动打开)
接收放 10.36.115.52         (主动打开)&lt;/p&gt;
&lt;p&gt;发送方抓包(被动打开, 第一个包是接收到的syn):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
11:12:08.045299 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: S 2126508121:2126508121(0) win 5840 &amp;lt;mss 1460,sackOK,timestamp 1890669490 0,nop,wscale 7&amp;gt;
11:12:08.045376 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: S 2227406332:2227406332(0) ack 2126508122 win 5792 &amp;lt;mss 1460,sackOK,timestamp 1396920409 1890669490,nop,wscale 7&amp;gt;
11:12:08.074157 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 1 win 46 &amp;lt;nop,nop,timestamp 1890669518 1396920409&amp;gt;
11:12:08.074233 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: P 1:213(212) ack 1 win 46 &amp;lt;nop,nop,timestamp 1890669518 1396920409&amp;gt;             : 客户端发来请求GET xxx
11:12:08.074239 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920438 1890669518&amp;gt;                      : server表示收到请求
11:12:08.074647 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 1:1449(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920439 1890669518&amp;gt;
11:12:08.074652 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 1449:2897(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920439 1890669518&amp;gt;
11:12:08.074655 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: P 2897:4345(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920439 1890669518&amp;gt;      : 连发3个包, 因为init_cwnd=3, 此时等待

11:12:08.103542 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 1449 win 69 &amp;lt;nop,nop,timestamp 1890669548 1396920439&amp;gt;                     : 等到了1个ack , cwnd+=1 =&amp;gt; 4
11:12:08.103548 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 4345:5793(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920468 1890669548&amp;gt;
11:12:08.103550 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 5793:7241(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920468 1890669548&amp;gt;
11:12:08.103591 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 2897 win 91 &amp;lt;nop,nop,timestamp 1890669548 1396920439&amp;gt;                     : 等到了1个ack , cwnd+=1 =&amp;gt; 5
11:12:08.103595 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: P 7241:8689(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920468 1890669548&amp;gt;
11:12:08.103598 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 8689:10137(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920468 1890669548&amp;gt;
11:12:08.103639 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 4345 win 114 &amp;lt;nop,nop,timestamp 1890669548 1396920439&amp;gt;                    : 等到了1个ack , cwnd+=1 =&amp;gt; 6
11:12:08.103643 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 10137:11585(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920468 1890669548&amp;gt;
11:12:08.103645 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: P 11585:13033(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920468 1890669548&amp;gt;     : 连发6个包

11:12:08.132462 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 5793 win 137 &amp;lt;nop,nop,timestamp 1890669577 1396920468&amp;gt;                    : 等到了1个ack , cwnd+=1 =&amp;gt; 7
11:12:08.132467 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 13033:14481(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920497 1890669577&amp;gt;
11:12:08.132469 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 14481:15929(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920497 1890669577&amp;gt;
11:12:08.132558 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 7241 win 159 &amp;lt;nop,nop,timestamp 1890669577 1396920468&amp;gt;                    : 等到了1个ack , cwnd+=1 =&amp;gt; 8
11:12:08.132563 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: P 15929:17377(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920497 1890669577&amp;gt;
11:12:08.132565 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 17377:18825(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920497 1890669577&amp;gt;
11:12:08.132654 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 8689 win 182 &amp;lt;nop,nop,timestamp 1890669577 1396920468&amp;gt;                    : 等到了1个ack , cwnd+=1 =&amp;gt; 9
11:12:08.132658 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 18825:20273(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920497 1890669577&amp;gt;
11:12:08.132661 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: P 20273:21721(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920497 1890669577&amp;gt;
11:12:08.132663 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 10137 win 204 &amp;lt;nop,nop,timestamp 1890669577 1396920468&amp;gt;                    : 等到了1个ack , cwnd+=1 =&amp;gt; 10
11:12:08.132666 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 21721:23169(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920497 1890669577&amp;gt;
11:12:08.132668 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 23169:24617(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920497 1890669577&amp;gt;
11:12:08.132670 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 11585 win 227 &amp;lt;nop,nop,timestamp 1890669577 1396920468&amp;gt;                    : 等到了1个ack , cwnd+=1 =&amp;gt; 11
11:12:08.132673 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: P 24617:26065(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920497 1890669577&amp;gt;
11:12:08.132675 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 26065:27513(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920497 1890669577&amp;gt;
11:12:08.132678 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 13033 win 250 &amp;lt;nop,nop,timestamp 1890669577 1396920468&amp;gt;                    : 等到了1个ack , cwnd+=1 =&amp;gt; 12
11:12:08.132680 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 27513:28961(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920497 1890669577&amp;gt;
11:12:08.132683 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: P 28961:30409(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920497 1890669577&amp;gt;     : 2ms内 连发12个包

11:12:08.161358 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 14481 win 272 &amp;lt;nop,nop,timestamp 1890669606 1396920497&amp;gt;
11:12:08.161362 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 30409:31857(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920525 1890669606&amp;gt;
11:12:08.161365 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 31857:33305(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920525 1890669606&amp;gt;
11:12:08.161406 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 15929 win 295 &amp;lt;nop,nop,timestamp 1890669606 1396920497&amp;gt;
11:12:08.161409 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: P 33305:34753(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920526 1890669606&amp;gt;
11:12:08.161412 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 34753:36201(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920526 1890669606&amp;gt;
11:12:08.161502 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 17377 win 318 &amp;lt;nop,nop,timestamp 1890669606 1396920497&amp;gt;
11:12:08.161506 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 36201:37649(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920526 1890669606&amp;gt;
11:12:08.161509 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: P 37649:39097(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920526 1890669606&amp;gt;
11:12:08.161511 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 18825 win 340 &amp;lt;nop,nop,timestamp 1890669606 1396920497&amp;gt;
11:12:08.161514 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 39097:40545(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920526 1890669606&amp;gt;
11:12:08.161516 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 40545:41993(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920526 1890669606&amp;gt;
11:12:08.161597 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 20273 win 363 &amp;lt;nop,nop,timestamp 1890669606 1396920497&amp;gt;
11:12:08.161602 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: P 41993:43441(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920526 1890669606&amp;gt;
11:12:08.161604 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 43441:44889(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920526 1890669606&amp;gt;
11:12:08.161606 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 21721 win 385 &amp;lt;nop,nop,timestamp 1890669606 1396920497&amp;gt;
11:12:08.161609 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 44889:46337(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920526 1890669606&amp;gt;
11:12:08.161611 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: P 46337:47785(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920526 1890669606&amp;gt;
11:12:08.161693 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 23169 win 408 &amp;lt;nop,nop,timestamp 1890669606 1396920497&amp;gt;
11:12:08.161697 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 47785:49233(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920526 1890669606&amp;gt;
11:12:08.161700 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 49233:50681(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920526 1890669606&amp;gt;
11:12:08.161702 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 24617 win 431 &amp;lt;nop,nop,timestamp 1890669606 1396920497&amp;gt;
11:12:08.161705 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: P 50681:52129(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920526 1890669606&amp;gt;
11:12:08.161708 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 52129:53577(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920526 1890669606&amp;gt;
11:12:08.161710 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 26065 win 453 &amp;lt;nop,nop,timestamp 1890669606 1396920497&amp;gt;
11:12:08.161713 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 53577:55025(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920526 1890669606&amp;gt;
11:12:08.161715 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: P 55025:56473(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920526 1890669606&amp;gt;
11:12:08.161717 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 27513 win 476 &amp;lt;nop,nop,timestamp 1890669606 1396920497&amp;gt;
11:12:08.161720 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 56473:57921(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920526 1890669606&amp;gt;
11:12:08.161722 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 57921:59369(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920526 1890669606&amp;gt;
11:12:08.161725 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 28961 win 499 &amp;lt;nop,nop,timestamp 1890669606 1396920497&amp;gt;
11:12:08.161727 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: P 59369:60817(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920526 1890669606&amp;gt;
11:12:08.161730 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 60817:62265(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920526 1890669606&amp;gt;
11:12:08.161732 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 30409 win 521 &amp;lt;nop,nop,timestamp 1890669606 1396920497&amp;gt;
11:12:08.161735 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 62265:63713(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920526 1890669606&amp;gt;
11:12:08.161737 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: P 63713:65161(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920526 1890669606&amp;gt;    : 4ms内连发24个包.

11:12:08.190703 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 31857 win 544 &amp;lt;nop,nop,timestamp 1890669635 1396920525&amp;gt;
11:12:08.190708 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 65161:66609(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920555 1890669635&amp;gt;
...
&lt;/pre&gt;
&lt;p&gt;接收端抓包(主动打开, 先发syn):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
11:12:08.060202 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: S 2126508121:2126508121(0) win 5840 &amp;lt;mss 1460,sackOK,timestamp 1890669490 0,nop,wscale 7&amp;gt;
11:12:08.089056 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: S 2227406332:2227406332(0) ack 2126508122 win 5792 &amp;lt;mss 1460,sackOK,timestamp 1396920409 1890669490,nop,wscale 7&amp;gt;
11:12:08.089069 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 1 win 46 &amp;lt;nop,nop,timestamp 1890669518 1396920409&amp;gt;
11:12:08.089133 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: P 1:213(212) ack 1 win 46 &amp;lt;nop,nop,timestamp 1890669518 1396920409&amp;gt;         : 请求发过去了

11:12:08.118014 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920438 1890669518&amp;gt;                  : 一个rtt后，收到ack
11:12:08.118448 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 1:1449(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920439 1890669518&amp;gt;     : 同时收到响应.
11:12:08.118452 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 1449 win 69 &amp;lt;nop,nop,timestamp 1890669548 1396920439&amp;gt;                 : 收到一个马上就回复ack, 但是对方需要15ms以后才能收到
11:12:08.118493 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 1449:2897(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920439 1890669518&amp;gt;
11:12:08.118497 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 2897 win 91 &amp;lt;nop,nop,timestamp 1890669548 1396920439&amp;gt;
11:12:08.118529 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: P 2897:4345(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920439 1890669518&amp;gt;  :收3个包
11:12:08.118532 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 4345 win 114 &amp;lt;nop,nop,timestamp 1890669548 1396920439&amp;gt;

11:12:08.147370 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 4345:5793(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920468 1890669548&amp;gt;
11:12:08.147378 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 5793 win 137 &amp;lt;nop,nop,timestamp 1890669577 1396920468&amp;gt;
11:12:08.147444 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 5793:7241(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920468 1890669548&amp;gt;
11:12:08.147446 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 7241 win 159 &amp;lt;nop,nop,timestamp 1890669577 1396920468&amp;gt;
11:12:08.147499 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: P 7241:8689(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920468 1890669548&amp;gt;
11:12:08.147516 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 8689:10137(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920468 1890669548&amp;gt;
11:12:08.147520 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 8689 win 182 &amp;lt;nop,nop,timestamp 1890669577 1396920468&amp;gt;
11:12:08.147522 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 10137 win 204 &amp;lt;nop,nop,timestamp 1890669577 1396920468&amp;gt;
11:12:08.147563 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 10137:11585(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920468 1890669548&amp;gt;
11:12:08.147566 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 11585 win 227 &amp;lt;nop,nop,timestamp 1890669577 1396920468&amp;gt;
11:12:08.147569 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: P 11585:13033(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920468 1890669548&amp;gt;    :收6个包
11:12:08.147572 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 13033 win 250 &amp;lt;nop,nop,timestamp 1890669577 1396920468&amp;gt;

11:12:08.176267 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 13033:14481(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920497 1890669577&amp;gt;
11:12:08.176274 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 14481 win 272 &amp;lt;nop,nop,timestamp 1890669606 1396920497&amp;gt;
11:12:08.176308 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 14481:15929(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920497 1890669577&amp;gt;
11:12:08.176311 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 15929 win 295 &amp;lt;nop,nop,timestamp 1890669606 1396920497&amp;gt;
11:12:08.176384 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: P 15929:17377(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920497 1890669577&amp;gt;
11:12:08.176388 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 17377 win 318 &amp;lt;nop,nop,timestamp 1890669606 1396920497&amp;gt;
11:12:08.176391 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 17377:18825(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920497 1890669577&amp;gt;
11:12:08.176393 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 18825 win 340 &amp;lt;nop,nop,timestamp 1890669606 1396920497&amp;gt;
11:12:08.176460 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 18825:20273(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920497 1890669577&amp;gt;
11:12:08.176463 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 20273 win 363 &amp;lt;nop,nop,timestamp 1890669606 1396920497&amp;gt;
11:12:08.176493 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: P 20273:21721(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920497 1890669577&amp;gt;
11:12:08.176496 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 21721 win 385 &amp;lt;nop,nop,timestamp 1890669606 1396920497&amp;gt;
11:12:08.176581 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 21721:23169(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920497 1890669577&amp;gt;
11:12:08.176584 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 23169 win 408 &amp;lt;nop,nop,timestamp 1890669606 1396920497&amp;gt;
11:12:08.176587 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 23169:24617(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920497 1890669577&amp;gt;
11:12:08.176589 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 24617 win 431 &amp;lt;nop,nop,timestamp 1890669606 1396920497&amp;gt;
11:12:08.176592 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: P 24617:26065(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920497 1890669577&amp;gt;
11:12:08.176595 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 26065 win 453 &amp;lt;nop,nop,timestamp 1890669606 1396920497&amp;gt;
11:12:08.176597 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 26065:27513(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920497 1890669577&amp;gt;
11:12:08.176599 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 27513 win 476 &amp;lt;nop,nop,timestamp 1890669606 1396920497&amp;gt;
11:12:08.176602 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 27513:28961(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920497 1890669577&amp;gt;
11:12:08.176604 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 28961 win 499 &amp;lt;nop,nop,timestamp 1890669606 1396920497&amp;gt;
11:12:08.176607 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: P 28961:30409(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920497 1890669577&amp;gt;    : 收12个包
11:12:08.176609 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 30409 win 521 &amp;lt;nop,nop,timestamp 1890669606 1396920497&amp;gt;

11:12:08.205168 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 30409:31857(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920525 1890669606&amp;gt;
11:12:08.205174 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 31857 win 544 &amp;lt;nop,nop,timestamp 1890669635 1396920525&amp;gt;
11:12:08.205226 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 31857:33305(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920525 1890669606&amp;gt;
11:12:08.205230 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 33305 win 566 &amp;lt;nop,nop,timestamp 1890669635 1396920525&amp;gt;
11:12:08.205248 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: P 33305:34753(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920526 1890669606&amp;gt;
11:12:08.205250 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 34753 win 589 &amp;lt;nop,nop,timestamp 1890669635 1396920526&amp;gt;
11:12:08.205293 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 34753:36201(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920526 1890669606&amp;gt;
11:12:08.205296 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 36201 win 612 &amp;lt;nop,nop,timestamp 1890669635 1396920526&amp;gt;
11:12:08.205312 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 36201:37649(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920526 1890669606&amp;gt;
11:12:08.205315 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 37649 win 634 &amp;lt;nop,nop,timestamp 1890669635 1396920526&amp;gt;
11:12:08.205367 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: P 37649:39097(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920526 1890669606&amp;gt;
11:12:08.205369 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 39097 win 657 &amp;lt;nop,nop,timestamp 1890669635 1396920526&amp;gt;
11:12:08.205372 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 39097:40545(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920526 1890669606&amp;gt;
11:12:08.205374 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 40545 win 680 &amp;lt;nop,nop,timestamp 1890669635 1396920526&amp;gt;
11:12:08.205376 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 40545:41993(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920526 1890669606&amp;gt;
11:12:08.205378 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 41993 win 702 &amp;lt;nop,nop,timestamp 1890669635 1396920526&amp;gt;
11:12:08.205423 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: P 41993:43441(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920526 1890669606&amp;gt;
11:12:08.205425 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 43441 win 725 &amp;lt;nop,nop,timestamp 1890669635 1396920526&amp;gt;
11:12:08.205433 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 43441:44889(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920526 1890669606&amp;gt;
11:12:08.205436 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 44889 win 747 &amp;lt;nop,nop,timestamp 1890669635 1396920526&amp;gt;
11:12:08.205481 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 44889:46337(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920526 1890669606&amp;gt;
11:12:08.205484 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 46337 win 770 &amp;lt;nop,nop,timestamp 1890669635 1396920526&amp;gt;
11:12:08.205542 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: P 46337:47785(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920526 1890669606&amp;gt;
11:12:08.205545 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 47785 win 793 &amp;lt;nop,nop,timestamp 1890669635 1396920526&amp;gt;
11:12:08.205547 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 47785:49233(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920526 1890669606&amp;gt;
11:12:08.205549 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 49233 win 815 &amp;lt;nop,nop,timestamp 1890669635 1396920526&amp;gt;
11:12:08.205569 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 49233:50681(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920526 1890669606&amp;gt;
11:12:08.205572 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 50681 win 838 &amp;lt;nop,nop,timestamp 1890669635 1396920526&amp;gt;
11:12:08.205574 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: P 50681:52129(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920526 1890669606&amp;gt;
11:12:08.205576 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 52129 win 861 &amp;lt;nop,nop,timestamp 1890669635 1396920526&amp;gt;
11:12:08.205579 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 52129:53577(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920526 1890669606&amp;gt;
11:12:08.205581 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 53577 win 883 &amp;lt;nop,nop,timestamp 1890669635 1396920526&amp;gt;
11:12:08.205616 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 53577:55025(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920526 1890669606&amp;gt;
11:12:08.205618 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 55025 win 906 &amp;lt;nop,nop,timestamp 1890669635 1396920526&amp;gt;
11:12:08.205661 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: P 55025:56473(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920526 1890669606&amp;gt;
11:12:08.205664 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 56473 win 928 &amp;lt;nop,nop,timestamp 1890669635 1396920526&amp;gt;
11:12:08.205667 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 56473:57921(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920526 1890669606&amp;gt;
11:12:08.205669 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 57921 win 951 &amp;lt;nop,nop,timestamp 1890669635 1396920526&amp;gt;
11:12:08.205671 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 57921:59369(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920526 1890669606&amp;gt;
11:12:08.205674 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 59369 win 974 &amp;lt;nop,nop,timestamp 1890669635 1396920526&amp;gt;
11:12:08.205676 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: P 59369:60817(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920526 1890669606&amp;gt;
11:12:08.205678 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 60817 win 996 &amp;lt;nop,nop,timestamp 1890669635 1396920526&amp;gt;
11:12:08.205680 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 60817:62265(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920526 1890669606&amp;gt;
11:12:08.205683 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 62265 win 1019 &amp;lt;nop,nop,timestamp 1890669635 1396920526&amp;gt;
11:12:08.205685 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 62265:63713(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920526 1890669606&amp;gt;
11:12:08.205687 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 63713 win 1042 &amp;lt;nop,nop,timestamp 1890669635 1396920526&amp;gt;
11:12:08.205723 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: P 63713:65161(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920526 1890669606&amp;gt;    : 收24个包
11:12:08.205725 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 65161 win 1064 &amp;lt;nop,nop,timestamp 1890669635 1396920526&amp;gt;

11:12:08.234511 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 65161:66609(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920555 1890669635&amp;gt;
11:12:08.234517 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 66609 win 1087 &amp;lt;nop,nop,timestamp 1890669664 1396920555&amp;gt;
11:12:08.234552 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: . 66609:68057(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920555 1890669635&amp;gt;
11:12:08.234554 IP 10.36.115.52.55281 &amp;gt; 10.220.109.45.8080: . ack 68057 win 1109 &amp;lt;nop,nop,timestamp 1890669664 1396920555&amp;gt;
11:12:08.234619 IP 10.220.109.45.8080 &amp;gt; 10.36.115.52.55281: P 68057:69505(1448) ack 213 win 54 &amp;lt;nop,nop,timestamp 1396920555 1890669635&amp;gt;
&lt;/pre&gt;
&lt;div class="section" id="id3"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id18"&gt;case1 分析&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;平均1ms内发包6个, 假设拥塞窗口不受限的话, 30ms 可以发送:red:&lt;cite&gt;6*30=180个包&lt;/cite&gt;, 相当于`1448*180=260640(约260K)`&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id19"&gt;case1 注意&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;上面tcpdump输出中的win 都是54左右, 实际上这是因为wscale, 在第一个SYN包可以看见: wscale 7, 表示scale 为2^7 = 128
即54*128 = 6912&lt;/p&gt;
&lt;img alt="" src="/imgs/5M.pcap-win.png" /&gt;
&lt;p&gt;我们发现图中的win值刚开始是5888,后面逐渐增大.&lt;/p&gt;
&lt;p&gt;问题1: 这个win初始值和 tcp_rmem大小有啥关系?, 我们设的rmem默认值为2.5M.(程序可以通过setsockopt(SO_RCVBUF修改), 但是目前看curl 没有该设置)&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cat /proc/sys/net/ipv4/tcp_rmem
4096    2500000 5000000
&lt;/pre&gt;
&lt;p&gt;问题1.1  /proc/sys/net/ipv4/tcp_rmem /proc/sys/net/core/rmem_default 有啥关系?&lt;/p&gt;
&lt;p&gt;看到说该值覆盖 net.core.rmem_default:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
tcp_rmem - vector of 3 INTEGERs: min, default, max
    min: Minimal size of receive buffer used by TCP sockets.
    It is guaranteed to each TCP socket, even under moderate memory
    pressure.
    Default: 1 page

    default: initial size of receive buffer used by TCP sockets.
    This value overrides net.core.rmem_default used by other protocols.
    Default: 87380 bytes. This value results in window of 65535 with
    default setting of tcp_adv_win_scale and tcp_app_win:0 and a bit
    less for default tcp_app_win. See below about these variables.
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
ning&amp;#64;ning-laptop ~/idning-source/kernel/linux-2.6.9/net/ipv4$ ack tcp_rmem
tcp_ipv4.c
2086:   sk-&amp;gt;sk_rcvbuf = sysctl_tcp_rmem[1];
2621:   .sysctl_rmem        = sysctl_tcp_rmem,

tcp.c
281:int sysctl_tcp_rmem[3] = { 4 * 1024, 87380, 87380 * 2 };
284:EXPORT_SYMBOL(sysctl_tcp_rmem);
2296:       sysctl_tcp_rmem[0] = PAGE_SIZE;
2297:       sysctl_tcp_rmem[1] = 43689;
2298:       sysctl_tcp_rmem[2] = 2 * 43689;

sysctl_net_ipv4.c
526:        .procname   = &amp;quot;tcp_rmem&amp;quot;,
527:        .data       = &amp;amp;sysctl_tcp_rmem,
528:        .maxlen     = sizeof(sysctl_tcp_rmem),
&lt;/pre&gt;
&lt;p&gt;问题2: 为什么它有逐渐增加的趋势.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="case2"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id20"&gt;case2 - 长连接&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;我们发现256K 的时候, 平均速度远小于传输大文件的 平均速度:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ time wget  'http://10.220.109.45:8080/30M.data'
real    0m1.228s
user    0m0.008s
sys     0m0.093s
                speed = 30M/1.228 = 24MB/s

$ time wget  'http://10.220.109.45:8080/256K.data'
real    0m0.208s
user    0m0.001s
sys     0m0.004s
                speed= 256K/0.2 = 1.28MB/s
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="xxxxxxxxxxxxxxx"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id21"&gt;xxxxxxxxxxxxxxx&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;短连接:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
时间  发送方              接收方
00ms  发送syn
15ms                      收到syn, 发回syn
30ms  收到syn 发请求:
45ms                      收到请求，发回数据 (初始3个包)
60ms  收到3个包
90ms  收到6个包
120ms 收到12个包
150ms 收到24个包
180ms 收到48个包
210ms 收到89个包

182个包收完.
&lt;/pre&gt;
&lt;p&gt;长连接:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
时间  发送方              接收方
00ms  收到syn 发请求:
15ms                      收到请求，发回数据 (初始假设为96个包)
30ms  收到96个包
60ms  收到96个包

接收完成.
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id22"&gt;方法&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id23"&gt;增加发送方初始cwnd(对短连接有效)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;当cwnd 慢启动满了以后，速度又会稳定在某个值.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id24"&gt;使用长连接&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
(要注意如果发生超时重传，就进入慢启动了 ) (只有发生超时重传才会进入慢启动，连接上长时间没有传送数据也会重新开始慢启动)&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id25"&gt;增加接收方接收窗口.&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="vegas"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id26"&gt;修改vegas 算法参数&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
/proc/sys/net/ipv4/tcp_vegas_alpha
/proc/sys/net/ipv4/tcp_vegas_beta
/proc/sys/net/ipv4/tcp_vegas_cong_avoid
/proc/sys/net/ipv4/tcp_vegas_gamma&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="reference"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id27"&gt;Reference&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;soso 的一个&amp;lt;&amp;lt;linux tcp 优化案例详解&amp;gt;&amp;gt; &lt;a class="reference external" href="http://wenku.Baidu.com/view/f587d2e90975f46527d3e11d"&gt;http://wenku.Baidu.com/view/f587d2e90975f46527d3e11d&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[PDF] GSS：针对高带宽时延积网络的温和慢启动方法&lt;/li&gt;
&lt;li&gt;google 的一个论文，论证对于http 来说，平均页面大小通常是300K , cwnd初始值最好定为10, (第一次发送 15K) &lt;a class="reference external" href="http://code.google.com/speed/articles/tcp_initcwnd_paper.pdf"&gt;http://code.google.com/speed/articles/tcp_initcwnd_paper.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="all"></category></entry><entry><title>gcc/gdb/gprof/gcov/valgrind使用</title><link href="/gcc_gdb_gprof_gcov_valgrind.html" rel="alternate"></link><updated>2012-10-05T23:44:06+08:00</updated><author><name>ning</name></author><id>tag:,2012-10-05:gcc_gdb_gprof_gcov_valgrind.html</id><summary type="html">&lt;div class="contents topic" id="table-of-contents"&gt;
&lt;p class="topic-title first"&gt;Table of Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#gcc" id="id20"&gt;gcc编译带符号&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#gdb" id="id21"&gt;gdb 启动参数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id1" id="id22"&gt;gdb 查看结构体，格式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#some-ppt-for-gdb" id="id23"&gt;some ppt for gdb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#core-dump" id="id24"&gt;core dump&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id2" id="id25"&gt;gdb 基本使用&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id3" id="id26"&gt;修改代码查找路径&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#run" id="id27"&gt;run&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#continue" id="id28"&gt;continue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#bt" id="id29"&gt;bt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#list" id="id30"&gt;list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#break" id="id31"&gt;break&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#watch" id="id32"&gt;watch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#info" id="id33"&gt;info&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#info-locals" id="id34"&gt;info locals&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#next-over" id="id35"&gt;next&amp;lt;over&amp;gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#step-into" id="id36"&gt;step &amp;lt;into&amp;gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#print" id="id37"&gt;print&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#x" id="id38"&gt;x&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#set" id="id39"&gt;set&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#call" id="id40"&gt;call&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#watch-rwatch" id="id41"&gt;watch &amp;amp; rwatch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#nexti-and-stepi" id="id42"&gt;nexti and stepi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#disassemble" id="id43"&gt;disassemble&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#trace-stack-control" id="id44"&gt;trace stack control&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#gdb-tui" id="id45"&gt;gdb TUI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#cgdb" id="id46"&gt;cgdb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#vimgdb" id="id47"&gt;vimgdb ?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#xxgdb-gui" id="id48"&gt;xxgdb (gui)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#ddd-gui" id="id49"&gt;DDD (gui)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#gdb-scripts" id="id50"&gt;gdb scripts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id4" id="id51"&gt;高级使用&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#load" id="id52"&gt;启动load一个脚本&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id5" id="id53"&gt;获得某个地址对应的代码::&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id6" id="id54"&gt;gcc&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#gcc-warn" id="id55"&gt;gcc warn 选项&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id7" id="id56"&gt;gcc编译生成汇编：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#i-l-l" id="id57"&gt;-I, -L -l&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id8" id="id58"&gt;静态链接指定的库&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#gcc-object" id="id59"&gt;gcc 产生 object文件（只编译）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#shared-libraries" id="id60"&gt;关于shared-libraries&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#static-library" id="id61"&gt;Static Library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id9" id="id62"&gt;Shared Libraries&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id10" id="id63"&gt;其它&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#nm" id="id64"&gt;nm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#gcov" id="id65"&gt;gcov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id11" id="id66"&gt;内存泄漏&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#tcmalloc-heap-profiler" id="id67"&gt;tcmalloc heap_profiler.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#valgrind" id="id68"&gt;Valgrind&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id12" id="id69"&gt;Valgrind 使用举例&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#profiling" id="id70"&gt;profiling&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#gprof" id="id71"&gt;gprof&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id13" id="id72"&gt;gprof基本用法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id14" id="id73"&gt;gprof 实现原理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id15" id="id74"&gt;使用注意：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id16" id="id75"&gt;问题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#google-cpu-profile" id="id76"&gt;google-cpu-profile&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id17" id="id77"&gt;安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id18" id="id78"&gt;使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#tcmalloc" id="id79"&gt;和tcmalloc 是同一个工具集&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id19" id="id80"&gt;例子&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#perf" id="id81"&gt;perf&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#source-level-analysis-with-perf-annotate" id="id82"&gt;Source level analysis with perf annotate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#perf-top" id="id83"&gt;perf top&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#callgrind" id="id84"&gt;callgrind&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#oprofile" id="id85"&gt;oprofile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#systemtap-root" id="id86"&gt;systemtap(root)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#vtune-root" id="id87"&gt;vtune(root)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="gcc"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id20"&gt;gcc编译带符号&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="literal-block"&gt;
-g
-g2
-g3: 最多调试信息  =&amp;gt; 最好用这个.
-ggdb: gdb 特有的符号表, 无法被其它调试器使用.
&lt;/pre&gt;
&lt;p&gt;默认情况下，GCC在编译时不会将调试符号插入到生成的二进制代码中，因为这样会增加可执行文件的大小。如果需要在编译时生成调试符号信息，可以使用GCC 的-g或者-ggdb选项。GCC在产生调试符号时，同样采用了分级的思路，开发人员可以通过在-g选项后附加数字1、2或3来指定在代码中加入调试信息的多少。默认的级别是2（-g2），此时产生的调试信息包括扩展的符号表、行号、局部或外部变量信息。级别3（-g3）包含级别2中的所有调试信息，以及源代码中定义的宏。级别1（-g1）不包含局部变量和与行号有关的调试信息，因此只能够用于回溯跟踪和堆栈转储之用。回溯跟踪指的是监视程序在运行过程中的函数调用历史，堆栈转储则是一种以原始的十六进制格式保存程序执行环境的方法，两者都是经常用到的调试手段。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="gdb"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id21"&gt;gdb 启动参数&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这种用法会报错:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ gdb ./redis-cli -h 127.0.0.5 -p 22002 --replay /tmp/r/redis-22001/data/appendonly.aof
gdb: unrecognized option '--replay'
Use `gdb --help' for a complete list of options.
&lt;/pre&gt;
&lt;p&gt;可以这样:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ gdb ./redis-cli -ex 'r -h 127.0.0.5 -p 22002 --replay /tmp/r/redis-22001/data/appendonly.aof'
&lt;/pre&gt;
&lt;p&gt;或者:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ning&amp;#64;ning-laptop:~/idning-github/redis/src$ cat d.gdb
r -h 127.0.0.5 -p 22002 --replay /tmp/r/redis-22001/data/appendonly.aof

ning&amp;#64;ning-laptop:~/idning-github/redis/src$ gdb ./redis-cli -x d.gdb
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id22"&gt;gdb 查看结构体，格式&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;直接 &lt;tt class="docutils literal"&gt;p *abc&lt;/tt&gt; 的话会出来一大团东西，好处是最短的垂直空间内能显示完，坏处是层次结构不好找。&lt;/p&gt;
&lt;p&gt;在gdb里运行一下set print pretty on
再输出就是层次结构了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="some-ppt-for-gdb"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id23"&gt;some ppt for gdb&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.slideshare.net/ftt/gdb-2764286"&gt;http://www.slideshare.net/ftt/gdb-2764286&lt;/a&gt;  淺入淺出 GDB  中央资工二 张竟.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="core-dump"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id24"&gt;core dump&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
$ ulimit -c 1024
$ ulimit -a
core file size (blocks, -c) 1024
$ gdb --core=core.9128&lt;/blockquote&gt;
&lt;p&gt;此时用bt看不到backtrace，也就是调用堆栈，原来GDB还不知道符号信息在哪里。我们告诉它一下:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
(gdb) file ./a.out
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id25"&gt;gdb 基本使用&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="literal-block"&gt;
gcc -g program.c -o programname
&lt;/pre&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id26"&gt;修改代码查找路径&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="http://sourceware.org/gdb/current/onlinedocs/gdb/Source-Path.html"&gt;http://sourceware.org/gdb/current/onlinedocs/gdb/Source-Path.html&lt;/a&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
dir xxx
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="run"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id27"&gt;run&lt;/a&gt;&lt;/h3&gt;
&lt;pre class="literal-block"&gt;
(gdb) run arg1 &amp;quot;arg2&amp;quot; ...
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="continue"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id28"&gt;continue&lt;/a&gt;&lt;/h3&gt;
&lt;pre class="literal-block"&gt;
^+c
continue
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="bt"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id29"&gt;bt&lt;/a&gt;&lt;/h3&gt;
&lt;pre class="literal-block"&gt;
back trace.
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="list"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id30"&gt;list&lt;/a&gt;&lt;/h3&gt;
&lt;pre class="literal-block"&gt;
(gdb) list
3 int main(int argc, char **argv)
4 {
5 int x = 30;
6 int y = 10;
7
8 x = y;
9
10 return 0;
11 }

(gdb) l 17
l -200  显示当前行往前200行处的代码.
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="break"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id31"&gt;break&lt;/a&gt;&lt;/h3&gt;
&lt;pre class="literal-block"&gt;
break LinkedList&amp;lt;int&amp;gt;::remove
break func1
b 27x
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="watch"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id32"&gt;watch&lt;/a&gt;&lt;/h3&gt;
&lt;pre class="literal-block"&gt;
watch [var] 当var变动时break

rwatch [var] 当var读取时break

info watch
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="info"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id33"&gt;info&lt;/a&gt;&lt;/h3&gt;
&lt;pre class="literal-block"&gt;
(gdb) disable 2
(gdb) info breakpoints
Num Type Disp Enb Address What
2 breakpoint keep n 0x080483c3 in func2 at test.c:5
3 breakpoint keep y 0x080483da in func1 at test.c:10
&lt;/pre&gt;
&lt;div class="section" id="info-locals"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id34"&gt;info locals&lt;/a&gt;&lt;/h4&gt;
&lt;pre class="literal-block"&gt;
(gdb) info locals
msg = 0x7ffff680feb0
i = 2
&lt;/pre&gt;
&lt;p&gt;没有debuginfo时, 如果是数字, 字符串, 可以试试:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
I know that you can find any parameters by looking at a positive offset from $ebp using gdb:

(gdb) x/4wx $ebp
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="next-over"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id35"&gt;next&amp;lt;over&amp;gt;&lt;/a&gt;&lt;/h3&gt;
&lt;pre class="literal-block"&gt;
(gdb)
Node&amp;lt;int&amp;gt;::next (this=0x0) at main.cc:28
28 Node&amp;lt;T&amp;gt;* next () const { return next_; }
(gdb)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="step-into"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id36"&gt;step &amp;lt;into&amp;gt;&lt;/a&gt;&lt;/h3&gt;
&lt;pre class="literal-block"&gt;
(gdb) step
53 Node&amp;lt;T&amp;gt; *temp = 0; // temp points to one behind as we iterate
(gdb)
&lt;/pre&gt;
&lt;p&gt;next will go 'over' the function call to the next line of code, while step will go 'into' the function call.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="print"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id37"&gt;print&lt;/a&gt;&lt;/h3&gt;
&lt;pre class="literal-block"&gt;
(gdb) p price[ii]
$7 = 1.1000000000000001
(gdb) p (bst[jj] / price[kk] * 0.97)
$8 = 92380.952380952382
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="x"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id38"&gt;x&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;examine memory in any of several formats&lt;/p&gt;
&lt;pre class="literal-block"&gt;
x/nfu addr
x addr
x
Use the x command to examine memory.
n, f, and u are all optional parameters that specify how much memory to display and how to format it; addr is an expression giving the address where you want to start displaying memory. If you use defaults for nfu, you need not type the slash `/'. Several commands set convenient defaults for addr.

n, the repeat count
The repeat count is a decimal integer; the default is 1. It specifies how much memory (counting by units u) to display.
f, the display format
The display format is one of the formats used by print, `s' (null-terminated string), or `i' (machine instruction). The default is `x' (hexadecimal) initially. The default changes each time you use either x or print.
u, the unit size
The unit size is any of
b
Bytes.
h
Halfwords (two bytes).
w
Words (four bytes). This is the initial default.
g
Giant words (eight bytes).
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="set"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id39"&gt;set&lt;/a&gt;&lt;/h3&gt;
&lt;pre class="literal-block"&gt;
set x = 3
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="call"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id40"&gt;call&lt;/a&gt;&lt;/h3&gt;
&lt;pre class="literal-block"&gt;
call abort()
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="watch-rwatch"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id41"&gt;watch &amp;amp; rwatch&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;write_watch &amp;amp; read_watch&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="nexti-and-stepi"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id42"&gt;nexti and stepi&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;step through my code at the instruction level&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="disassemble"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id43"&gt;disassemble&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;see the assembly code my program is running:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
(gdb) disassemble main
Dump of assembler code for function main:
0x80483c0 &amp;lt;main&amp;gt;: push %ebp
0x80483c1 &amp;lt;main+1&amp;gt;: mov %esp,%ebp
0x80483c3 &amp;lt;main+3&amp;gt;: sub $0x18,%esp
0x80483c6 &amp;lt;main+6&amp;gt;: movl $0x0,0xfffffffc(%ebp)
0x80483cd &amp;lt;main+13&amp;gt;: mov 0xfffffffc(%ebp),%eax
0x80483d0 &amp;lt;main+16&amp;gt;: movb $0x7,(%eax)
0x80483d3 &amp;lt;main+19&amp;gt;: xor %eax,%eax
0x80483d5 &amp;lt;main+21&amp;gt;: jmp 0x80483d7 &amp;lt;main+23&amp;gt;
0x80483d7 &amp;lt;main+23&amp;gt;: leave
0x80483d8 &amp;lt;main+24&amp;gt;: ret
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="trace-stack-control"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id44"&gt;trace stack control&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;f 0 : 到0对应的栈帧。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="gdb-tui"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id45"&gt;gdb TUI&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;偶然无意键入win命令，发现了TUI功能&lt;/p&gt;
&lt;p&gt;The GDB Text User Interface (TUI)&lt;/p&gt;
&lt;p&gt;gdb -tui&lt;/p&gt;
&lt;p&gt;问题：  当程序有printf到终端的时候，界面会乱掉.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cgdb"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id46"&gt;cgdb&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;当遇到断点的时候cgdb就会停下来，
ESC进入到source模式，&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;j, k ，上下移动行&lt;/li&gt;
&lt;li&gt;space  添加断点。&lt;/li&gt;
&lt;li&gt;i 回到调试模式.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而且可以记忆上次在cgdb session中写的命令.&lt;/p&gt;
&lt;p&gt;cgdb比emacs的gdb mode还是有相当的差距的，目前还算可以用，以后也会越来越好吧&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="vimgdb"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id47"&gt;vimgdb ?&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="xxgdb-gui"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id48"&gt;xxgdb (gui)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;不好用&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ddd-gui"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id49"&gt;DDD (gui)&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="gdb-scripts"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id50"&gt;gdb scripts&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Using the GDB Scripts for Analyzing the Data&lt;/p&gt;
&lt;p&gt;Suppose that you have a singly-linked list that has strings in it. At some point, you might want to know the contents of the list. To do this, use the GDB scripting instead of adding the debug statements in your code:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
#Example for gslist traversal.
define p_gslist_str
set $list = ($arg0)
 while ((GSList *)$list-&amp;gt;next != 0)
p (char *)(GSList *)$list-&amp;gt;data
 set $list = (GSList *)$list-&amp;gt;next
 end
end
document p_gslist_str
p_gslist_str &amp;lt;list&amp;gt;: Dumps the strings in a GSList
end
&amp;lt;/code&amp;gt;
Add the above snippet into a file and load it into the GDB as follows:
&amp;lt;code&amp;gt;
(gdb) source /home/jjohnny/scripts/gdb/gslist.gdb
&amp;lt;/code&amp;gt;
Now, anywhere you want to take a look in the GSList, simply break and
&amp;lt;code&amp;gt;
(gdb) p_gslist_str server_uid_list
$17 = 0x7fffd81101b0 “7666BC1E000000015870BD1E00000001″
$18 = 0x7fffd810e330 “7666BC1E000000015970BD1E00000001″
$19 = 0x7fffd810cbe0 “7666BC1E000000015C70BD1E00000001″
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id51"&gt;高级使用&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="load"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id52"&gt;启动load一个脚本&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;比如调试redis, 每次进入gdb后, 需要 先设置breakpoint,  &lt;tt class="docutils literal"&gt;r xxx&lt;/tt&gt; 来启动, 此时可以把这些命令写入一个文件:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
cat d.gdb
r -h 127.0.0.5 -p 22002 --replay /tmp/r/redis-22001/data/appendonly.aof

gdb ./redis-cli -x d.gdb
&lt;/pre&gt;
&lt;p&gt;或者通过在命令行中用 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-ex&lt;/span&gt;&lt;/tt&gt; 指定命令&lt;/p&gt;
&lt;pre class="literal-block"&gt;
gdb ./redis-cli -ex 'r -h 127.0.0.5 -p 22002 --replay /tmp/r/redis-22001/data/appendonly.aof'
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id53"&gt;获得某个地址对应的代码::&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;比如mongodb 会自己打印breaktrace:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
532651f65c 0x7f53264fc016 0x7f5326527865 0x7f5326526293 0x7f5326527808 0x7f5326526293 0x7f5326527808 0x7f5326526293 0x7f5
326527808 0x7f5326526293 0x7f5326527261
 /home/ning/mongo/bin/mongod(_ZN5mongo15printStackTraceERSo+0x26) [0xc95896]
 /home/ning/mongo/bin/mongod(_ZN5mongo10abruptQuitEi+0x260) [0x6be1c0]
 /lib64/libc.so.6() [0x318ae32920]
 /lib64/libc.so.6(gsignal+0x35) [0x318ae328a5]
 /lib64/libc.so.6(abort+0x175) [0x318ae34085]
 /home/ning/mongo/bin/../lib64/libtokuportability.so(+0x4327) [0x7f53267da327]
 /home/ning/mongo/bin/../lib64/libtokuportability.so(+0x43a3) [0x7f53267da3a3]
 /home/ning/mongo/bin/../lib64/libtokufractaltree.so(+0xc1299) [0x7f532656f299]
 /home/ning/mongo/bin/../lib64/libtokufractaltree.so(+0x712af) [0x7f532651f2af]
 /home/ning/mongo/bin/../lib64/libtokufractaltree.so(+0x7165c) [0x7f532651f65c]
 /home/ning/mongo/bin/../lib64/libtokufractaltree.so(+0x4e016) [0x7f53264fc016]
 /home/ning/mongo/bin/../lib64/libtokufractaltree.so(+0x79865) [0x7f5326527865]
 /home/ning/mongo/bin/../lib64/libtokufractaltree.so(+0x78293) [0x7f5326526293]
 /home/ning/mongo/bin/../lib64/libtokufractaltree.so(+0x79808) [0x7f5326527808]
 /home/ning/mongo/bin/../lib64/libtokufractaltree.so(+0x78293) [0x7f5326526293]
 /home/ning/mongo/bin/../lib64/libtokufractaltree.so(+0x79808) [0x7f5326527808]
 /home/ning/mongo/bin/../lib64/libtokufractaltree.so(+0x78293) [0x7f5326526293]
 /home/ning/mongo/bin/../lib64/libtokufractaltree.so(+0x79808) [0x7f5326527808]
 /home/ning/mongo/bin/../lib64/libtokufractaltree.so(+0x78293) [0x7f5326526293]
 /home/ning/mongo/bin/../lib64/libtokufractaltree.so(+0x79261) [0x7f5326527261]
&lt;/pre&gt;
&lt;p&gt;怎么获得这些地址对应的 函数呢?&lt;/p&gt;
&lt;p&gt;nm:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ nm ./src/third_party/ft-index/portability/libtokuportability.so | head
0000000000209148 d _DYNAMIC
00000000002093e0 d _GLOBAL_OFFSET_TABLE_
0000000000003e20 t _GLOBAL__I_65535_0_huge_page_detection.cc.o.3766.2377
                 w _ITM_deregisterTMCloneTable
                 w _ITM_registerTMCloneTable
                 w _Jv_RegisterClasses
0000000000004c00 T _Z10os_reallocPvm
0000000000004810 T _Z10toku_fstatiP4stat
0000000000004f10 T _Z11toku_callocmm
0000000000004cd0 T _Z11toku_mallocm
&lt;/pre&gt;
&lt;p&gt;更好的方法:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
gdb  lib64/libtokuportability.so --batch -ex 'info line *0x4327'

gdb  lib64/libtokufractaltree.so --batch -ex 'info line *0xc1299'
Line 198 of &amp;quot;/home/xiaobeibei/tokumxSrc/mongo/src/third_party/ft-index/ft/bndata.cc&amp;quot; starts at address 0xc1277 &amp;lt;_ZN7bn_data15get_memory_sizeEv+87&amp;gt; and ends at 0xc12a0 &amp;lt;_ZN7bn_data14verify_mempoolEv&amp;gt;.
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id54"&gt;gcc&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="gcc-warn"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id55"&gt;gcc warn 选项&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;TODO:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
-Werror
       Make all warnings into errors.

-Wall (打开大部分检查- 不是所有)
    This enables all the warnings about constructions that some users consider questionable, and that are easy to avoid (or modify to prevent the warning), even in conjunction with macros.  This
    also enables some language-specific warnings described in C++ Dialect Options and Objective-C and Objective-C++ Dialect Options.

    -Wall turns on the following warning flags:

    -Waddress -Warray-bounds (only with -O2) -Wc++0x-compat -Wchar-subscripts -Wimplicit-int -Wimplicit-function-declaration -Wcomment -Wformat -Wmain (only for C/ObjC and unless -ffreestanding)
    -Wmissing-braces -Wnonnull -Wparentheses -Wpointer-sign -Wreorder -Wreturn-type -Wsequence-point -Wsign-compare (only in C++) -Wstrict-aliasing -Wstrict-overflow=1 -Wswitch -Wtrigraphs
    -Wuninitialized -Wunknown-pragmas -Wunused-function -Wunused-label -Wunused-value -Wunused-variable -Wvolatile-register-var

-Wextra(这才是最猛的, 以前是叫&amp;quot;-W &amp;quot;)
    This enables some extra warning flags that are not enabled by -Wall.
    (This option used to be called -W.  The older name is still supported, but
    the newer name is more descriptive.)
&lt;/pre&gt;
&lt;p&gt;-W is now deprecated by -Wextra with new gcc versions.&lt;/p&gt;
&lt;p&gt;对部分文件关闭warning:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
When using GCC you can use the -isystem flag instead of the -I flag to disable warnings from that location.

So if you’re currently using

gcc -Iparent/path/of/bar …
use

gcc -isystem parent/path/of/bar …
instead. Unfortunately, this isn’t a particularly fine-grained control. I’m not aware of a more targeted mechanism.
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id56"&gt;gcc编译生成汇编：&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;gcc -S inline.c -o inline_O0.s&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-l-l"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id57"&gt;-I, -L -l&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;-include和-I参数(x.h &amp;amp; path_to_x.h)&lt;/p&gt;
&lt;p&gt;-include用来包含头文件，但一般情况下包含头文件都在源码里用#include xxxxxx实现，-include参数很少用。-I参数是用来指定头文件目录，/usr/include目录一般是不用指定的，gcc知道去那里找，但 是如果头文件不在/usr/include里我们就要用-I参数指定了，比如头文件放在/myinclude目录里，那编译命令行就要加上-I /myinclude参数了，如果不加你会得到一个&amp;quot;xxxx.h: No such file or directory&amp;quot;的错误。-I参数可以用相对路径，比如头文件在当前目录，可以用-I.来指定。上面我们提到的--cflags参数就是用来生成-I 参数的&lt;/p&gt;
&lt;p&gt;-l参数和-L参数(libx.a &amp;amp; path_to_libx.a )&lt;/p&gt;
&lt;blockquote&gt;
-l参数就是用来指定程序要链接的库，-l参数紧接着就是库名，那么库名跟真正的库文件名有什么关系呢？就拿数学库来说，他的库名是m，他的库文件名是libm.so，很容易看出，把库文件名的头lib和尾.so去掉就是库名了
好了现在我们知道怎么得到库名，当我们自已要用到一个第三方提供的库名字libtest.so，那么我们只要把libtest.so拷贝到/usr /lib里，编译时加上-ltest参数，我们就能用上libtest.so库了（当然要用libtest.so库里的函数，我们还需要与 libtest.so配套的头文件）
放在/lib和/usr/lib和/usr/local/lib里的库直接用-l参数就能链接了，但如果库文件没放在这三个目录里，而是放在其他目 录里，这时我们只用-l参数的话，链接还是会出错，出错信息大概是：“/usr/bin/ld: cannot find -lxxx”，也就是链接程序ld在那3个目录里找不到libxxx.so，这时另外一个参数-L就派上用场了，比如常用的X11的库，它在/usr /X11R6/lib目录下，我们编译时就要用-L/usr/X11R6/lib -lX11参数，-L参数跟着的是库文件所在的目录名。再比如我们把libtest.so放在/aaa/bbb/ccc目录下，那链接参数就是-L /aaa/bbb/ccc -ltest&lt;/blockquote&gt;
&lt;div class="section" id="id8"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id58"&gt;静态链接指定的库&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;比如说我要把mongo-c-driver 的静态.a 静态编译到nginx 里面去.&lt;/p&gt;
&lt;p&gt;You could also use ld option -Bdynamic:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
gcc &amp;lt;objectfiles&amp;gt; -static -lstatic1 -lstatic2 -Wl,-Bdynamic -ldynamic1 -ldynamic2
&lt;/pre&gt;
&lt;p&gt;All libraries after it (including system ones linked by gcc automatically) will be linked dynamically.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="gcc-object"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id59"&gt;gcc 产生 object文件（只编译）&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;gcc -Wall -c main.c&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="shared-libraries"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id60"&gt;关于shared-libraries&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.dwheeler.com/program-library"&gt;http://www.dwheeler.com/program-library&lt;/a&gt;
&lt;a class="reference external" href="http://tldp.org/HOWTO/Program-Library-HOWTO/shared-libraries.html"&gt;http://tldp.org/HOWTO/Program-Library-HOWTO/shared-libraries.html&lt;/a&gt;
&lt;a class="reference external" href="http://tldp.org/HOWTO/Program-Library-HOWTO/"&gt;http://tldp.org/HOWTO/Program-Library-HOWTO/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;三种：
static libraries
shared libraries
dynamically loaded (DL) libraries.&lt;/p&gt;
&lt;blockquote&gt;
DL libraries aren't really a different kind of library format (both static and shared libraries can be used as DL libraries); instead, the difference is in how DL libraries are used by programmers.&lt;/blockquote&gt;
&lt;p&gt;DLL的多个意思：some people use the term dynamically linked libraries (DLLs) to refer to shared libraries, some use the term DLL to mean any library that is used as a DL library, and some use the term DLL to mean a library meeting either condition.&lt;/p&gt;
&lt;p&gt;If you're building an application that should port to many systems(Solaris等?), you might consider using GNU libtool to build and install libraries instead of using the Linux tools directly.&lt;/p&gt;
&lt;p&gt;This HOWTO's master location is &lt;a class="reference external" href="http://www.dwheeler.com/program-library"&gt;http://www.dwheeler.com/program-library&lt;/a&gt;, and it has been contributed to the Linux Documentation Project (&lt;a class="reference external" href="http://www.linuxdoc.org"&gt;http://www.linuxdoc.org&lt;/a&gt;)&lt;/p&gt;
&lt;div class="section" id="static-library"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id61"&gt;Static Library&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;过去用于节省重新编译的时间，但是现在编译器越来越快，这个已经不是主要原因
现在可以用来发布.h和.a，隐藏源代码
比动态库快：&lt;/p&gt;
&lt;p&gt;In theory, code in static ELF libraries that is linked into an executable should run slightly faster (by 1-5%) than a shared library or a dynamically loaded library, but in practice this rarely seems to be the case due to other confounding factors.&lt;/p&gt;
&lt;p&gt;创建：&lt;/p&gt;
&lt;p&gt;ar rcs my_library.a file1.o file2.o&lt;/p&gt;
&lt;p&gt;注意用gcc链接静态库的时候, -l要放在xxx.c后面. (AFTER the name of the file to be compiled.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id62"&gt;Shared Libraries&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;名字问题：&lt;/p&gt;
&lt;p&gt;linker name: &lt;tt class="docutils literal"&gt;/usr/lib/libreadline.so&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;soname: &lt;tt class="docutils literal"&gt;/usr/lib/libreadline.so.3&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;realname : &lt;tt class="docutils literal"&gt;/usr/lib/libreadline.so.3.0&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;the filename containing the actual library code
the linker name is simply created as a symbolic link to the &lt;tt class="docutils literal"&gt;latest&lt;/tt&gt; soname or the latest real name.&lt;/p&gt;
&lt;p&gt;You also need to understand where they should be placed in the filesystem.&lt;/p&gt;
&lt;p&gt;The GNU standards recommend installing by default all libraries in /usr/local/lib when distributing source code (and all commands should go into /usr/local/bin).
The Filesystem Hierarchy Standard (FHS) discusses what should go where in a distribution (see &lt;a class="reference external" href="http://www.pathname.com/fhs"&gt;http://www.pathname.com/fhs&lt;/a&gt;). According to the FHS, most libraries should be installed in /usr/lib, but libraries required for startup should be in /lib and libraries that are not part of the system should be in /usr/local/lib.&lt;/p&gt;
&lt;p&gt;当程序（ ELF binary）运行的时候，一个loader(/lib/ld-linux.so.X)自动加载其它所有library.&lt;/p&gt;
&lt;p&gt;ldconfig, ld.so.conf, ld.so.cache的关系：非常清楚!!! -Lin Yang 1/11/11 11:14 AM
扫描路径：The list of directories to be searched is stored in the file /etc/ld.so.conf
Searching all of these directories at program start-up would be grossly inefficient, so a caching arrangement is actually used. The program ldconfig(8) by default reads in the file /etc/ld.so.conf, sets up the appropriate symbolic links in the dynamic link directories,  and then writes a cache to /etc/ld.so.cache  The implication is that ldconfig must be run whenever a DLL is added, when a DLL is removed, or when the set of DLL directories changes; 之后. On start-up, then, the dynamic loader actually uses the file /etc/ld.so.cache and then loads the libraries it needs.
ldconfig是关键，ldconfig读取 /ect/ld.so.conf&lt;/p&gt;
&lt;p&gt;环境变量，覆盖上面/ect/ld.so.conf中的内容&lt;/p&gt;
&lt;p&gt;LD_LIBRARY_PATH&lt;/p&gt;
&lt;p&gt;a colon-separated set of directories where libraries should be searched for first,
最好只用于debug, LD_LIBRARY_PATH is handy for development and testing, but shouldn't be modified by an installation process for normal use by normal users;&lt;/p&gt;
&lt;p&gt;LD_PRELOAD&lt;/p&gt;
&lt;p&gt;The environment variable LD_PRELOAD lists shared libraries with functions that override the standard set, just as /etc/ld.so.preload does&lt;/p&gt;
&lt;p&gt;/lib/ld-linux.so.2 本身是个可执行的，可以这样用：&lt;/p&gt;
&lt;p&gt;/lib/ld-linux.so.2 --library-path PATH EXECUTABLE
/lib/ld-linux.so.2 test/protocol_test.out&lt;/p&gt;
&lt;p&gt;LD_DEBUG 用于调试：&lt;/p&gt;
&lt;p&gt;export LD_DEBUG=files
command_to_run&lt;/p&gt;
&lt;p&gt;LD_xxxx&lt;/p&gt;
&lt;p&gt;Most of them aren't well-documented; if you need to know about them, the best way to learn about them is to read the source code of the loader (part of gcc).&lt;/p&gt;
&lt;p&gt;Creating a Shared Library&lt;/p&gt;
&lt;p&gt;The -fPIC and -fpic options enable &lt;tt class="docutils literal"&gt;position independent code&lt;/tt&gt; generation， The -fPIC choice always works, but may produce larger code than -fpic&lt;/p&gt;
&lt;p&gt;The -Wl option passes options along to the linker (in this case the -soname linker option) - the commas after -Wl are not a typo&lt;/p&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;p&gt;Here's an example, which creates two object files (a.o and b.o) and then creates a shared library that contains both of them. Note that this compilation includes debugging information (-g) and will generate warnings (-Wall), which aren't required for shared libraries but are recommended. The compilation generates object files (using -c), and includes the required -fPIC option:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
gcc -fPIC -g -c -Wall a.c
gcc -fPIC -g -c -Wall b.c
gcc -shared -Wl,-soname,libmystuff.so.1 \
-o libmystuff.so.1.0.1 a.o b.o -lc
&lt;/pre&gt;
&lt;p&gt;安装 Shared Library&lt;/p&gt;
&lt;p&gt;Once you've created a shared library, you'll want to install it. The simple approach is simply to copy the library into one of the standard directories (e.g., /usr/lib) and run ldconfig(8).
可以通过 ldconfig -n directory_with_shared_libraries 实现.
Usually you can update libraries without concern; if there was an API change, the library creator is supposed to change the soname.比如libevent, libevent2 -Lin Yang 1/11/11 11:51 AM  That way, multiple libraries can be on a single system, and the right one is selected for each program.&lt;/p&gt;
&lt;p&gt;make sure that your libraries are either backwards-compatible or that you've incremented the version number in the soname every time you make an incompatible change.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id10"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id63"&gt;其它&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="nm"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id64"&gt;nm&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The nm(1) command can report the list of symbols in a given library:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ning&amp;#64;pcning:~/idning-paper/src$ nm test/protocol_test.out
08049f18 d _DYNAMIC
08049ff4 d _GLOBAL_OFFSET_TABLE_
08048dbc R _IO_stdin_used
         w _Jv_RegisterClasses
08049f08 d __CTOR_END__
08049f04 d __CTOR_LIST__
08049f10 D __DTOR_END__
08049f0c d __DTOR_LIST__
08048ef4 r __FRAME_END__
08049f14 d __JCR_END__
08049f14 d __JCR_LIST__
08048ede r __PRETTY_FUNCTION__.4058
         U __assert_fail&amp;#64;&amp;#64;GLIBC_2.0
0804a024 A __bss_start
0804a01c D __data_start
08048d70 t __do_global_ctors_aux
08048550 t __do_global_dtors_aux
0804a020 D __dso_handle
         w __gmon_start__
&lt;/pre&gt;
&lt;p&gt;nm输出:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
lowercase means that the symbol is local
uppercase means that the symbol is global
T (a normal definition in the code section),
D (initialized data section),
B (uninitialized data section),
U (undefined; the symbol is used by the library but not defined by the library),
W (weak; if another library also defines this symbol, that definition overrides this one).
&lt;/pre&gt;
&lt;p&gt;If you know the name of a function, but you truly can't remember what library it was defined in, you can use nm's &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-o&lt;/span&gt;&lt;/tt&gt; option (which prefixes the filename in each line) along with grep to find the library name. From a Bourne shell, you can search all the libraries in /lib, /usr/lib, direct subdirectories of /usr/lib, and /usr/local/lib for &lt;tt class="docutils literal"&gt;cos&lt;/tt&gt; as follows:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
nm -o /lib/* /usr/lib/* /usr/lib/*/* \
/usr/local/lib/* 2&amp;gt; /dev/null | grep 'cos$'
&lt;/pre&gt;
&lt;p&gt;Shared Libraries Can Be Scripts&lt;/p&gt;
&lt;p&gt;/usr/lib/libc.so on one of my systems:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
/* GNU ld script
Use the shared library, but some functions are only in
the static library, so try that secondarily. */
GROUP ( /lib/libc.so.6 /usr/lib/libc_nonshared.a )
&lt;/pre&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;使用和创建shared library的时候都只需要soname.&lt;/dt&gt;
&lt;dd&gt;When you install a new version of a library, you install it in one of a few special directories and then run the program ldconfig(8). ldconfig examines the existing files and creates the sonames as symbolic links to the real names, as well as setting up the cache file /etc/ld.so.cache (described in a moment).&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;自己的一个shared-library的例子&lt;/p&gt;
&lt;p&gt;原来只有libevent1.4, 安装了libevent2后
比如:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
gcc -o test/protocol_test.gen.o -c -D_DEBUG -Wall -Icommon -I/usr/local/include test/protocol_test.gen.c
gcc -o test/protocol_test.gen.out test/protocol_test.gen.o -Lcommon -L/usr/local/lib -lcommon -levent
&lt;/pre&gt;
&lt;p&gt;但是运行时发现:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ning&amp;#64;pcning:~/idning-paper/src$ ./test/protocol_test.gen.out
./test/protocol_test.gen.out: error while loading shared libraries: libevent-2.0.so.5: cannot open shared object file: No such file or directory
&lt;/pre&gt;
&lt;p&gt;用ldd （list dynamic dependencies）查看:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ning&amp;#64;pcning:~/idning-paper/src$ ldd ./test/protocol_test.gen.out
        linux-gate.so.1 =&amp;gt;  (0x00fb4000)
        libevent-2.0.so.5 =&amp;gt; not found
        libc.so.6 =&amp;gt; /lib/tls/i686/cmov/libc.so.6 (0x00af5000)
        /lib/ld-linux.so.2 (0x00589000)
&lt;/pre&gt;
&lt;p&gt;这时候有两个办法：
运行前:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ export LD_LIBRARY_PATH=/usr/local/lib
$ ldd ./test/protocol_test.gen.out
        linux-gate.so.1 =&amp;gt;  (0x00a35000)
        libevent-2.0.so.5 =&amp;gt; /usr/local/lib/libevent-2.0.so.5 (0x00abd000)
        libc.so.6 =&amp;gt; /lib/tls/i686/cmov/libc.so.6 (0x00110000)
        librt.so.1 =&amp;gt; /lib/tls/i686/cmov/librt.so.1 (0x00a01000)
        /lib/ld-linux.so.2 (0x008a5000)
        libpthread.so.0 =&amp;gt; /lib/tls/i686/cmov/libpthread.so.0 (0x00bf1000)
&lt;/pre&gt;
&lt;p&gt;编译前:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ export LD_RUN_PATH=/usr/local/lib
&lt;/pre&gt;
&lt;p&gt;没用..这可能是 solarios上的选项 &lt;em&gt;-Lin Yang 1/11/11 10:17 AM&lt;/em&gt;&lt;/p&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;ldconfig －这个好使 &lt;em&gt;-Lin Yang 1/11/11 11:19 AM&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;又例如&lt;/p&gt;
&lt;p&gt;在安装libevent2的时候，使用 &lt;tt class="docutils literal"&gt;./configure&lt;/tt&gt; 将会安装到/usr/local/下&lt;/p&gt;
&lt;p&gt;运行程序的时候出现错误:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[root&amp;#64;localhost src]# ./mds/mds.out
./mds/mds.out: error while loading shared libraries: libevent-2.0.so.5: cannot open shared object file: No such file or directory
&lt;/pre&gt;
&lt;p&gt;这时候需要:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
vi /etc/ld.so.conf.d/libevent2.conf
/usr/local/lib
# libevent-2.0.so.5 在这个目录下

ldconfig
&lt;/pre&gt;
&lt;p&gt;然后就好了&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.cs.cmu.edu/~gilpin/tutorial/"&gt;http://www.cs.cmu.edu/~gilpin/tutorial/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.unknownroad.com/rtfm/gdbtut/gdbtoc.html"&gt;http://www.unknownroad.com/rtfm/gdbtut/gdbtoc.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="gcov"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id65"&gt;gcov&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;gcov is a test coverage program
how often each line of code executes
what lines of code are actually executed
how much computing time each section of code uses&lt;/p&gt;
&lt;p&gt;When using gcov, you must first compile your program with two special GCC options: &lt;cite&gt;-fprofile-arcs -ftest-coverage&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;For each source file compiled with -fprofile-arcs, an accompanying .gcda file will be placed in the object file directory.
usage:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ gcc -fprofile-arcs -ftest-coverage tmp.c
$ ./a.out
$ gcov tmp.c
90.00% of 10 source lines executed in file tmp.c
Creating tmp.c.gcov.
The file tmp.c.gcov contains output from gcov. Here is a sample:
-: 0:Source:tmp.c
-: 0:Graph:tmp.gcno
-: 0:Data:tmp.gcda
-: 0:Runs:1
-: 0:Programs:1
-: 1:#include &amp;lt;stdio.h&amp;gt;
-: 2:
-: 3:int main (void)
1: 4:{
1: 5: int i, total;
-: 6:
1: 7: total = 0;
-: 8:
11: 9: for (i = 0; i &amp;lt; 10; i++)
10: 10: total += i;
-: 11:
1: 12: if (total != 45)
#####: 13: printf (&amp;quot;Failure\n&amp;quot;);
-: 14: else
1: 15: printf (&amp;quot;Success\n&amp;quot;);
1: 16: return 0;
-: 17:}
&lt;/pre&gt;
&lt;p&gt;编译时: -fprofile-arcs -ftest-coverage
链接时: -l gcov&lt;/p&gt;
&lt;p&gt;The .gcno file is generated when the source file is compiled with the GCC -ftest-coverage option. It contains information to reconstruct the basic block graphs and assign source line numbers to blocks.
The .gcda file is generated when a program containing object files built with the GCC -fprofile-arcs option is executed. A separate.gcda file is created for each object file compiled with this option. It contains arc transition counts, and some summary information.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id11"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id66"&gt;内存泄漏&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="tcmalloc-heap-profiler"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id67"&gt;tcmalloc heap_profiler.&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="valgrind"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id68"&gt;Valgrind&lt;/a&gt;&lt;/h3&gt;
&lt;pre class="literal-block"&gt;
valgrind --tool=memcheck --leak-check=full -v --log-file=lighttpd --num-callers=8 ./bin/lighttpd -D -f ./conf/lighttpd.conf
&lt;/pre&gt;
&lt;p&gt;A leak error Message involving an unloaded shared object:
84 bytes in 1 blocks are possibly lost in loss record 488 of 713 at 0x1B9036DA: operator new(unsigned) (vg_replace_malloc.c:132) by 0x1DB63EEB: ??? by 0x1DB4B800: ??? by 0x1D65E007: ??? by 0x8049EE6: main (main.cpp:24)&lt;/p&gt;
&lt;p&gt;-g&lt;/p&gt;
&lt;p&gt;Valgrind是一个GPL的软件，用于Linux（For x86, amd64 and ppc32）程序的内存调试和代码剖析。你可以在它的环境中运行你的程序来监视内存的使用情况，比如C 语言中的malloc和free或者 C++中的new和 delete。使用Valgrind的工具包，你可以自动的检测许多内存管理和线程的bug，避免花费太多的时间在bug寻找上，使得你的程序更加稳固。
Valgrind的主要功能
Valgrind工具包包含多个工具，如Memcheck,Cachegrind,Helgrind, Callgrind，Massif。下面分别介绍个工具的作用：
Memcheck 工具主要检查下面的程序错误：
•        使用未初始化的内存 (Use of uninitialised memory)
•        使用已经释放了的内存 (Reading/writing memory after it has been free’d)
•        使用超过 malloc分配的内存空间(Reading/writing off the end of malloc’d blocks)
•        对堆栈的非法访问 (Reading/writing inappropriate areas on the stack)
•        申请的空间是否有释放 (Memory leaks – where pointers to malloc’d blocks are lost forever)
•        malloc/free/new/delete申请和释放内存的匹配(Mismatched use of malloc/new/new [] vs free/delete/delete [])
•        src和dst的重叠(Overlapping src and dst pointers in memcpy() and related functions)
Callgrind
Callgrind收集程序运行时的一些数据，函数调用关系等信息，还可以有选择地进行cache 模拟。在运行结束时，它会把分析数据写入一个文件。callgrind_annotate可以把这个文件的内容转化成可读的形式。
Cachegrind
它模拟 CPU中的一级缓存I1,D1和L2二级缓存，能够精确地指出程序中 cache的丢失和命中。如果需要，它还能够为我们提供cache丢失次数，内存引用次数，以及每行代码，每个函数，每个模块，整个程序产生的指令数。这对优化程序有很大的帮助。
Helgrind
它主要用来检查多线程程序中出现的竞争问题。Helgrind 寻找内存中被多个线程访问，而又没有一贯加锁的区域，这些区域往往是线程之间失去同步的地方，而且会导致难以发掘的错误。Helgrind实现了名为” Eraser” 的竞争检测算法，并做了进一步改进，减少了报告错误的次数。
Massif
堆栈分析器，它能测量程序在堆栈中使用了多少内存，告诉我们堆块，堆管理块和栈的大小。Massif能帮助我们减少内存的使用，在带有虚拟内存的现代系统中，它还能够加速我们程序的运行，减少程序停留在交换区中的几率。&lt;/p&gt;
&lt;p&gt;Valgrind 使用
用法: valgrind [options] prog-and-args [options]: 常用选项，适用于所有Valgrind工具
1.        -tool=&amp;lt;name&amp;gt; 最常用的选项。运行 valgrind中名为toolname的工具。默认memcheck。
2.        h –help 显示帮助信息。
3.        -version 显示valgrind内核的版本，每个工具都有各自的版本。
4.        q –quiet 安静地运行，只打印错误信息。
5.        v –verbose 更详细的信息, 增加错误数统计。
6.        -trace-children=no|yes 跟踪子线程? [no]
7.        -track-fds=no|yes 跟踪打开的文件描述？[no]
8.        -time-stamp=no|yes 增加时间戳到LOG信息? [no]
9.        -log-fd=&amp;lt;number&amp;gt; 输出LOG到描述符文件 [2=stderr]
10.        -log-file=&amp;lt;file&amp;gt; 将输出的信息写入到filename.PID的文件里，PID是运行程序的进行ID
11.        -log-file-exactly=&amp;lt;file&amp;gt; 输出LOG信息到 file
12.        -log-file-qualifier=&amp;lt;VAR&amp;gt; 取得环境变量的值来做为输出信息的文件名。 [none]
13.        -log-socket=ipaddr:port 输出LOG到socket ，ipaddr:port
LOG信息输出
1.        -xml=yes 将信息以xml格式输出，只有memcheck可用
2.        -num-callers=&amp;lt;number&amp;gt; show &amp;lt;number&amp;gt; callers in stack traces [12]
3.        -error-limit=no|yes 如果太多错误，则停止显示新错误? [yes]
4.        -error-exitcode=&amp;lt;number&amp;gt; 如果发现错误则返回错误代码 [0=disable]
5.        -db-attach=no|yes 当出现错误，valgrind会自动启动调试器gdb。[no]
6.        -db-command=&amp;lt;command&amp;gt; 启动调试器的命令行选项[gdb -nw %f %p]
适用于Memcheck工具的相关选项：
1.        -leak-check=no|summary|full 要求对leak给出详细信息? [summary]
2.        -leak-resolution=low|med|high how much bt merging in leak check [low]
3.        -show-reachable=no|yes show reachable blocks in leak check? [no]&lt;/p&gt;
&lt;div class="section" id="id12"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id69"&gt;Valgrind 使用举例&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;下面是一段有问题的C程序代码test.c:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
#include &amp;lt;stdlib.h&amp;gt;
void f(void)
{
   int* x = malloc(10 * sizeof(int));
   x[10] = 0;  //问题1: 数组下标越界
}           //问题2: 内存没有释放

int main(void)
{
   f();
   return 0;
}
&lt;/pre&gt;
&lt;p&gt;1、 编译程序test.c
gcc -Wall test.c -g -o test
2、 使用Valgrind检查程序BUG
valgrind --tool=memcheck --leak-check=full ./test
3、 分析输出的调试信息:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
==3908== Memcheck, a memory error detector.
==3908== Copyright (C) 2002-2007, and GNU GPL'd, by Julian Seward et al.
==3908== Using LibVEX rev 1732, a library for dynamic binary translation.
==3908== Copyright (C) 2004-2007, and GNU GPL'd, by OpenWorks LLP.
==3908== Using valgrind-3.2.3, a dynamic binary instrumentation framework.
==3908== Copyright (C) 2000-2007, and GNU GPL'd, by Julian Seward et al.
==3908== For more details, rerun with: -v
==3908==
--3908-- DWARF2 CFI reader: unhandled CFI instruction 0:50
--3908-- DWARF2 CFI reader: unhandled CFI instruction 0:50
/*数组越界错误*/
==3908== Invalid write of size 4
==3908==    at 0x8048384: f (test.c:6)
==3908==    by 0x80483AC: main (test.c:11)
==3908==  Address 0x400C050 is 0 bytes after a block of size 40 alloc'd
==3908==    at 0x40046F2: malloc (vg_replace_malloc.c:149)
==3908==    by 0x8048377: f (test.c:5)
==3908==    by 0x80483AC: main (test.c:11)
==3908==
==3908== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 14 from 1)
==3908== malloc/free: in use at exit: 40 bytes in 1 blocks.
==3908== malloc/free: 1 allocs, 0 frees, 40 bytes allocated.
==3908== For counts of detected errors, rerun with: -v
==3908== searching for pointers to 1 not-freed blocks.
==3908== checked 59,124 bytes.
==3908==
==3908==
/*有内存空间没有释放*/
==3908== 40 bytes in 1 blocks are definitely lost in loss record 1 of 1
==3908==    at 0x40046F2: malloc (vg_replace_malloc.c:149)
==3908==    by 0x8048377: f (test.c:5)
==3908==    by 0x80483AC: main (test.c:11)
==3908==
==3908== LEAK SUMMARY:
==3908==    definitely lost: 40 bytes in 1 blocks.
==3908==    possibly lost: 0 bytes in 0 blocks.
==3908==    still reachable: 0 bytes in 0 blocks.
==3908==       suppressed: 0 bytes in 0 blocks.
&lt;/pre&gt;
&lt;p&gt;valgrind有使用方便，容易操作的特点，能够快速的查询出程序的代码占用内存情况，能够有效的找出内存的泄漏的原因，而且是开源。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="profiling"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id70"&gt;profiling&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="gprof"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id71"&gt;gprof&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.cs.utah.edu/dept/old/texinfo/as/gprof.h"&gt;http://www.cs.utah.edu/dept/old/texinfo/as/gprof.h&lt;/a&gt; tml#SEC3&lt;/p&gt;
&lt;div class="section" id="id13"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id72"&gt;gprof基本用法&lt;/a&gt;&lt;/h4&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;使用 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-pg&lt;/span&gt;&lt;/tt&gt; 选项编译和链接.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;执行你的应用程序，使之运行完成后生成供gprof分析的数据文件（默认是gmon.out）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;使用gprof程序分析你的应用程序生成的数据，例如:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
gprof a.out gmon.out
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="id14"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id73"&gt;gprof 实现原理&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;gprof并不神奇，在编译和链接程序的时 候（使用 -pg 编译和链接选项），gcc 在你应用程序的每个函数中都加入了一个名为mcount（or“_mcount”, or“__mcount”）的函数，也就是说-pg编译的应用程序里的每一个函数都会调用mcount, 而mcount会在内存中保存一张函数调用图，并通过函数调用堆栈的形式查找子函数和父函数的地址。这张调用图也保存了所有与函数相关的调用时间，调用次 数等等的所有信息。
1. 在内存中分配一些内存，存储程序执行期间的统计数据
2. 在GCC使用-pg选项编译后，gcc会在程序的入口处(main 函数之前)调用
void monstartup(lowpc, highpc)
在每个函数的入口处调用
void _mcount()
在程序退出时(在 atexit () 里)调用
void _mcleanup()
monstartup：负责初始化profile环境，分配内存空间 _mcount: 记录每个函数代码的caller和callee的位置 _mcleanup：清除profile环境，保存结果数据为gmon.out，供gprof分析结果 3．在_mcount函数中跟踪程序的执行状况，记录程序代码的执行次数，时间等数据。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id15"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id74"&gt;使用注意：&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;1） 一般gprof只能查看用户函数信息。如果想查看库函数的信息，需要在编译是再加入“-lc_p”编译参数代替“-lc”编译参数，这样程序会链接libc_p.a库，才可以产生库函数的profiling信息。
2） gprof只能在程序 &lt;strong&gt;正常结束&lt;/strong&gt; 退出之后才 能生成程序测评报告，原因是gprof通过在atexit()里注册了一个函数来产生结果信息，任何非正常退出都不会执行atexit()的动作，所以不 会产生gmon.out文件。如果你的程序是一个不会退出的服务程序，那就只有修改代码来达到目的。如果不想改变程序的运行方式，可以添加一个信号处理函 数解决问题（这样对代码修改最少），例如：
static void sighandler( int sig_no ) { exit(0); } signal( SIGUSR1, sighandler );&lt;/p&gt;
&lt;p&gt;当使用 &lt;tt class="docutils literal"&gt;kill &lt;span class="pre"&gt;-USR1&lt;/span&gt; pid&lt;/tt&gt; 后，程序退出，生成gmon.out文件。&lt;/p&gt;
&lt;p&gt;编译：
cc的时候加 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-pg&lt;/span&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;ld的时候加：&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;/lib/gcrt0.o&lt;/tt&gt;  (或者/usr/lib/gcrt1.o)  现在不需要了. -Lin Yang 6/24/11 11:27 AM&lt;/p&gt;
&lt;p&gt;然后运行并且 &lt;strong&gt;正常终止&lt;/strong&gt; 程序&lt;/p&gt;
&lt;p&gt;发现生成gmon.out&lt;/p&gt;
&lt;p&gt;再:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
gprof -z  dist/sbin/mfsmaster dist/localstatedir/mfs/gmon.out

不过我得到的报告都是0：
  %   cumulative   self              self     total
 time   seconds   seconds    calls  Ts/call  Ts/call  name
  0.00      0.00     0.00        3     0.00     0.00  mylock
  0.00      0.00     0.00        1     0.00     0.00  changeugid
  0.00      0.00     0.00        1     0.00     0.00  check_old_locks
  0.00      0.00     0.00        1     0.00     0.00  remove_old_wdlock
  0.00      0.00     0.00        1     0.00     0.00  wdlock
  0.00      0.00     0.00                             __do_global_ctors_aux
  0.00      0.00     0.00                             __do_global_dtors_aux
  0.00      0.00     0.00                             __gmon_start__
  0.00      0.00     0.00                             __libc_csu_fini
&lt;/pre&gt;
&lt;p&gt;可以用kprof打开  dist/sbin/mfsmaster察看（gmon.out要在exe文件的同一目录下.）
我自己用的时候:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
mv gmon.out client/
kprof
file / open . client/mount.out
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id16"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id75"&gt;问题&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;感觉不太靠谱:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ning&amp;#64;ning-laptop:~/idning-github/redis/deps/hiredis$ cc bench1.c libhiredis.a -pg
ning&amp;#64;ning-laptop:~/idning-github/redis/deps/hiredis$ ./a.out
$ gprof  ./a.out ./gmon.out  | vim -

Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total
 time   seconds   seconds    calls  Ts/call  Ts/call  name
 22.23      0.04     0.04                             redisReaderGetReply
 16.67      0.07     0.03                             redisvFormatCommand
 11.12      0.09     0.02                             redisGetReply
 11.12      0.11     0.02                             sdscatlen
  5.56      0.12     0.01                             main
  5.56      0.13     0.01                             redisBufferRead
  5.56      0.14     0.01                             redisBufferWrite
  5.56      0.15     0.01                             sdsIncrLen
  5.56      0.16     0.01                             sdsempty
  5.56      0.17     0.01                             sdsnewlen
  2.78      0.18     0.01                             sdsMakeRoomFor
  2.78      0.18     0.01                             sdsRemoveFreeSpace
&lt;/pre&gt;
&lt;p&gt;总共7s, 为啥self seconds 加起来不是7s&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="google-cpu-profile"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id76"&gt;google-cpu-profile&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;goolge profile 工具&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://goog-perftools.sourceforge.net/doc/cpu_profiler.html"&gt;http://goog-perftools.sourceforge.net/doc/cpu_profiler.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is the CPU profiler we use at Google. There are three parts to using it: linking the library into an application, running the code, and analyzing the output.&lt;/p&gt;
&lt;p&gt;生成调用关系图和时间占用.&lt;/p&gt;
&lt;img alt="" src="/imgs/pprof-test.gif" /&gt;
&lt;div class="section" id="id17"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id77"&gt;安装&lt;/a&gt;&lt;/h4&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;安装libunwind: &lt;a class="reference external" href="http://download.savannah.gnu.org/releases/libunwind/libunwind-1.1.tar.gz"&gt;http://download.savannah.gnu.org/releases/libunwind/libunwind-1.1.tar.gz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;./configure --enable-frame-pointers --prefix=/home/ning/local/&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="id18"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id78"&gt;使用&lt;/a&gt;&lt;/h4&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;链接时加上 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-lprofiler&lt;/span&gt;&lt;/tt&gt;,
或者用 &lt;tt class="docutils literal"&gt;LD_PRELOAD&lt;/tt&gt; (不推荐)&lt;/p&gt;
&lt;pre class="literal-block"&gt;
env LD_PRELOAD=&amp;quot;/usr/lib/libprofiler.so&amp;quot; &amp;lt;binary&amp;gt;
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;run:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
#In your code, bracket the code you want profiled in calls to ProfilerStart() and ProfilerStop()   (google/profiler.h)
程序需要正常结束.
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;analysis:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pprof is the script used to analyze a profile.
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Linux 2.6 and above, profiling works correctly with threads, automatically profiling all threads&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tcmalloc"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id79"&gt;和tcmalloc 是同一个工具集&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;TC Malloc:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
gcc [...] -ltcmalloc
&lt;/pre&gt;
&lt;p&gt;Heap Checker:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
gcc [...] -o myprogram -ltcmalloc
HEAPCHECK=normal ./myprogram
&lt;/pre&gt;
&lt;p&gt;Heap Profiler:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
gcc [...] -o myprogram -ltcmalloc
HEAPPROFILE=/tmp/netheap ./myprogram
&lt;/pre&gt;
&lt;p&gt;Cpu Profiler:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
gcc [...] -o myprogram -lprofiler
CPUPROFILE=/tmp/profile ./myprogram
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id19"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id80"&gt;例子&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;LD_PRELOAD试用:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
#1. 启动
PROFILEFREQUENCY=1000 CPUPROFILE=/tmp/profile LD_PRELOAD=/home/ning/local/lib/libprofiler.so bin/nutcracker -c /home/ning/tmp/r/nutcracker-4000/conf/nutcracker.conf -o /home/ning/tmp/r/nutcracker-4000/log/nutcracker.log -p /home/ning/tmp/r/nutcracker-4000/log/nutcracker.pid -s 5000 -v 4
#起压力
./redis-benchmark.1000 -n 1000 -p 4000 -t mget  -r 1000000000 -c 2

#2.  ^C结束后:
^CPROFILE: interrupts/evictions/bytes = 610/103/4120
$ pprof --text bin/nutcracker /tmp/profile

9470  71.5%  71.5%     9470  71.5% req_error
1040   7.8%  79.3%     1040   7.8% memcpy
 465   3.5%  82.8%      465   3.5% writev
 241   1.8%  84.7%      241   1.8% _msg_get
 171   1.3%  85.9%      171   1.3% msg_send_chain
 142   1.1%  87.0%      142   1.1% mbuf_get
 107   0.8%  87.8%      107   0.8% rbtree_insert
 107   0.8%  88.6%      107   0.8% redis_parse_req
  94   0.7%  89.3%       94   0.7% array_get
  86   0.6%  90.0%       86   0.6% mbuf_remove
  81   0.6%  90.6%       81   0.6% rsp_send_next
  80   0.6%  91.2%       80   0.6% req_done
&lt;/pre&gt;
&lt;p&gt;对性能影响很小.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="perf"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id81"&gt;perf&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;速度快. 2.6内核提供的. ubuntu, centos都默认安装, 不需要root&lt;/p&gt;
&lt;p&gt;perf list:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
List of pre-defined events (to be used in -e):

 cpu-cycles OR cycles                       [Hardware event]
 instructions                               [Hardware event]
 cache-references                           [Hardware event]
 cache-misses                               [Hardware event]    可以统计cache-miss噢.
 page-faults OR faults                      [Software event]
&lt;/pre&gt;
&lt;p&gt;有点像strace 对系统调用计数 .&lt;/p&gt;
&lt;p&gt;使用:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
perf stat -e cycles dd if=/dev/zero of=/dev/null count=100000
&lt;/pre&gt;
&lt;p&gt;attach:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
perf stat -e cycles -p 2262 sleep 2
&lt;/pre&gt;
&lt;div class="section" id="source-level-analysis-with-perf-annotate"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id82"&gt;Source level analysis with perf annotate&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;div class="section" id="perf-top"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id83"&gt;perf top&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;系统级别top, 哪个函数正在占cpu. 很叼啊!!:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
perf top
Events: 4K cycles
 15.14%  libc-2.12.so            [.] memcpy
  6.16%  libc-2.12.so            [.] _wordcopy_fwd_dest_aligned
  4.79%  perf                    [.] 0x412d6
  2.57%  libc-2.12.so            [.] malloc
  2.53%  nutcracker              [.] msg_send_chain                                                 nutcracker
  2.10%  [kernel]                [k] intel_idle
  1.98%  [kernel]                [k] copy_user_generic_string
  1.95%  nutcracker              [.] mbuf_get                                                       nutcracker
  1.81%  nutcracker              [.] rbtree_insert                                                  nutcracker
  1.65%  libc-2.12.so            [.] _int_free
  1.55%  nutcracker              [.] redis_parse_req
  1.50%  nutcracker              [.] req_done
  1.46%  libc-2.12.so            [.] _int_malloc
  1.39%  [kernel]                [k] tcp_sendmsg
  1.23%  nutcracker              [.] rbtree_delete
&lt;/pre&gt;
&lt;p&gt;可以只采样一个 CPU:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
perf top -C &amp;lt;cpu-list&amp;gt;

 26.14%  libc-2.12.so        [.] memcpy
  7.69%  nutcracker          [.] mbuf_get
  7.11%  nutcracker          [.] _msg_get
  6.82%  nutcracker          [.] msg_send_chain
  4.40%  [kernel]            [k] copy_user_generic_string
  3.87%  nutcracker          [.] mbuf_remove
  3.79%  nutcracker          [.] req_done
  3.08%  nutcracker          [.] rbtree_delete
  3.02%  nutcracker          [.] rsp_recv_done
  2.54%  nutcracker          [.] rsp_send_next
  1.67%  nutcracker          [.] rbtree_insert
  1.57%  libc-2.12.so        [.] _IO_default_xsputn
  1.50%  nutcracker          [.] msg_get
  1.45%  nutcracker          [.] redis_parse_req
&lt;/pre&gt;
&lt;p&gt;不能只采样某个进程.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="callgrind"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id84"&gt;callgrind&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="http://kcachegrind.sourceforge.net/html/Home.html"&gt;http://kcachegrind.sourceforge.net/html/Home.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is the homepage of the profiling tool Callgrind and the profile data visualization KCachegrind&lt;/p&gt;
&lt;img alt="" src="/imgs/callgrind-output-tile-2.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="oprofile"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id85"&gt;oprofile&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;oprofile和Intel的VTune类似，都是利用CPU提供的性能计数功能对系统进行profiling. CPU提供一些性能计数器，经过配置可以对各种事件进行计数，当超过一定的threshold，会发出NMI中断，中断处理程序可以记录下当前的PC，current task等信息。用户可以对其dump进行分析。
采样往往会对系统性能带来一些影响(想想测不准原理)，oprofile带来的影响为1%-8%，还好。特别是考虑到它可能是唯一能提供你所需要的信息的工具。&lt;/p&gt;
&lt;p&gt;但不需要像gprof一样，必须优雅退出才可以剖分&lt;/p&gt;
&lt;ol class="arabic" start="3"&gt;
&lt;li&gt;&lt;p class="first"&gt;这就可以开始使用oprofile了，不过需要注意的是，需要有root权限才可以运行，请向&amp;gt;系统管理员索要sudo权限。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;对mysqld进行profile为例:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo opcontrol --reset
sudo opcontrol --separate=lib --no-vmlinux --start --image=/home/software/output/libexec/mysqld
在其他机器起压力,压力停止后再进行后续操作
sudo opcontrol --dump
sudo opcontrol --shutdown

opreport -l /home/software/output/libexec/mysqld
opannotate -s /home/software/output/libexec/mysqld
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="systemtap-root"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id86"&gt;systemtap(root)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;非常好用.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="vtune-root"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id87"&gt;vtune(root)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Intel® VTune™ Amplifier XE 2013 is the premier performance profiler for C, C++, C#, Fortran, Assembly and Java*.&lt;/p&gt;
&lt;p&gt;Intel 提供. 只能用在Intel CPU上.&lt;/p&gt;
&lt;img alt="" src="/imgs/hotspots_xe_1.png" style="width: 463px; height: 307px;" /&gt;
&lt;p&gt;三种数据收集方式:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Sampling 采样, 打断处理器执行, (如每秒1000次)&lt;/li&gt;
&lt;li&gt;Call graph&lt;/li&gt;
&lt;li&gt;Counter Monitoring&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以在linux上安装Smpling Driver, 启动VTune Server, 在windows 安装客户端.&lt;/p&gt;
&lt;p&gt;小结&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="18%" /&gt;
&lt;col width="23%" /&gt;
&lt;col width="16%" /&gt;
&lt;col width="16%" /&gt;
&lt;col width="16%" /&gt;
&lt;col width="10%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;工具&lt;/th&gt;
&lt;th class="head"&gt;需要修改代码&lt;/th&gt;
&lt;th class="head"&gt;正常结束&lt;/th&gt;
&lt;th class="head"&gt;需要root&lt;/th&gt;
&lt;th class="head"&gt;影响性能&lt;/th&gt;
&lt;th class="head"&gt;推荐&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;gprof&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;google-perf&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;callgrind&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;perf&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;不需要&lt;/td&gt;
&lt;td&gt;0.5&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;systemtap&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;不需要&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;oprofile&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;vtune&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;google-perf比gprof简单的一点是, 编译的时候不需要加 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-pg&lt;/span&gt;&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;google-perf的方法应该和 systemtap 类似, 采样.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;推荐使用:
- google-perf
- systemtap&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="all"></category></entry></feed>