<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>ning</title><link href="/" rel="alternate"></link><link href="http://idning.github.io/feeds/golang.atom.xml" rel="self"></link><id>/</id><updated>2015-05-15T16:15:04+08:00</updated><entry><title>go-logging</title><link href="/logging.html" rel="alternate"></link><updated>2015-05-15T16:15:04+08:00</updated><author><name>ning</name></author><id>tag:,2015-05-15:logging.html</id><summary type="html">&lt;div class="contents topic" id="table-of-contents"&gt;
&lt;p class="topic-title first"&gt;Table of Contents&lt;/p&gt;
&lt;ul class="auto-toc simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id1" id="id5"&gt;1&amp;nbsp;&amp;nbsp;&amp;nbsp;常见库&lt;/a&gt;&lt;ul class="auto-toc"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id2" id="id6"&gt;1.1&amp;nbsp;&amp;nbsp;&amp;nbsp;标准库&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#beego" id="id7"&gt;1.2&amp;nbsp;&amp;nbsp;&amp;nbsp;beego&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#log4go" id="id8"&gt;1.3&amp;nbsp;&amp;nbsp;&amp;nbsp;log4go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#codis-logging" id="id9"&gt;1.4&amp;nbsp;&amp;nbsp;&amp;nbsp;codis logging库&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id3" id="id10"&gt;2&amp;nbsp;&amp;nbsp;&amp;nbsp;性能&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id4" id="id11"&gt;3&amp;nbsp;&amp;nbsp;&amp;nbsp;小结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;日志库考虑因素:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;级别: 最好是 always, err, warn, notice, info, debug, verbos 几个级别.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;性能: 如果设置级别低, 应该对程序性能没有任何影响.(不要先format)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;易用性:&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;&lt;p class="first"&gt;不需要显示初始化.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;打印代码行.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;可以动态设置日志级别&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;如果支持rolling, rolling 需要提供小时级()&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;不过自动rolling切日志都会降低性能.&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为标准库不支持日志级别, 所以造轮子的需求很强烈.&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;1&amp;nbsp;&amp;nbsp;&amp;nbsp;常见库&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id6"&gt;1.1&amp;nbsp;&amp;nbsp;&amp;nbsp;标准库&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;/usr/local/go/src/pkg/log/log.go&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;没有级别:&lt;/li&gt;
&lt;li&gt;不需要初始化, 易用性ok&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="beego"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id7"&gt;1.2&amp;nbsp;&amp;nbsp;&amp;nbsp;beego&lt;/a&gt;&lt;/h3&gt;
&lt;pre class="literal-block"&gt;
~/go/src/github.com/astaxie/beego/logs
http://beego.me/docs/module/logs.md
&lt;/pre&gt;
&lt;p&gt;遵守 RFC5424 log message levels:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
const (
    LevelEmergency = iota
    LevelAlert
    LevelCritical
    LevelError
    LevelWarning
    LevelNotice
    LevelInformational
    LevelDebug
)

Numerical         Severity
 Code

  0       Emergency: system is unusable
  1       Alert: action must be taken immediately
  2       Critical: critical conditions
  3       Error: error conditions
  4       Warning: warning conditions
  5       Notice: normal but significant condition
  6       Informational: informational messages
  7       Debug: debug-level messages
&lt;/pre&gt;
&lt;p&gt;问题:&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;必须初始化并持有一个句柄才能打印日志:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
log := NewLogger(10000)
log.Trace(&amp;quot;trace %s %s&amp;quot;,&amp;quot;param1&amp;quot;,&amp;quot;param2&amp;quot;)
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;打日志先format再去判断级别, 性能差:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
// Log WARNING level message.
func (bl *BeeLogger) Warning(format string, v ...interface{}) {
    msg := fmt.Sprintf(&amp;quot;[W] &amp;quot;+format, v...)
    bl.writerMsg(LevelWarning, msg)
}

func (bl *BeeLogger) writerMsg(loglevel int, msg string) error {
    if loglevel &amp;gt; bl.level {
        return nil
    }
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;为了兼容老代码, 代码中冗余函数较多.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="log4go"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id8"&gt;1.3&amp;nbsp;&amp;nbsp;&amp;nbsp;log4go&lt;/a&gt;&lt;/h3&gt;
&lt;pre class="literal-block"&gt;
File logging with rotation (size, linecount, daily) and custom output formats
Console logging
Network logging via JSON and TCP/UDP
&lt;/pre&gt;
&lt;p&gt;级别很奇怪:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
const (
    FINEST level = iota
    FINE
    DEBUG
    TRACE
    INFO
    WARNING
    ERROR
    CRITICAL
)
&lt;/pre&gt;
&lt;p&gt;和常见的顺序是反的.. 没有NOTICE.&lt;/p&gt;
&lt;p&gt;使用上也需要初始化一个实例再调用实例的方法.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="codis-logging"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id9"&gt;1.4&amp;nbsp;&amp;nbsp;&amp;nbsp;codis logging库&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;级别差不多, 问题不大:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
const (
    LOG_FATAL   = LogType(0x1)
    LOG_ERROR   = LogType(0x2)
    LOG_WARNING = LogType(0x4)
    LOG_INFO    = LogType(0x8)
    LOG_DEBUG   = LogType(0x10)
)
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;底层是基于Log.&lt;/li&gt;
&lt;li&gt;性能ok&lt;/li&gt;
&lt;li&gt;不需要初始化一个实例&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;2&amp;nbsp;&amp;nbsp;&amp;nbsp;性能&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;对几个库做了benchmark, (代码: &lt;a class="reference external" href="https://github.com/idning/golog/blob/master/benchmark/log_benchmark.go"&gt;https://github.com/idning/golog/blob/master/benchmark/log_benchmark.go&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;结果如下:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
go run benchmark/log_benchmark.go
qps of     dummy1: 2727908735
qps of     dummy2:  552468326
qps of   variadic:    6151799
qps of    logging:    4003802
qps of      golog:    5986678
qps of     beelog:    1170780       &amp;lt;beego 性能确实较差&amp;gt;
&lt;/pre&gt;
&lt;p&gt;测试发现, 使用变参形式就会导致性能很差:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Debug(&amp;quot;hello %s&amp;quot;, &amp;quot;world&amp;quot;)        // 1. 100w/s
Debug(&amp;quot;hello world&amp;quot;)              // 2. 1000w/s 性能好10倍.
&lt;/pre&gt;
&lt;p&gt;对于变参写法, 通过profiling发现, 此时90%的时间都用于GC,&lt;/p&gt;
&lt;p&gt;原因在于, 变参的这种写法, 每次要把参数转为 interface 构成的 slice, 产生了很多对象. 所以gc时间很重.&lt;/p&gt;
&lt;p&gt;在benchmark里面我也加了 variadic测试, 对于一个空函数, 也只能达到600w/s 的性能.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;3&amp;nbsp;&amp;nbsp;&amp;nbsp;小结&lt;/a&gt;&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;beego性能较差.&lt;/li&gt;
&lt;li&gt;codis logging是目前所见较好的库(日志级别不习惯)&lt;/li&gt;
&lt;li&gt;一旦使用了变参函数, 性能就很差.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</summary></entry></feed>